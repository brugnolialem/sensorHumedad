
GSM_MQTT_Arduino_Subscribe_Publish.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00002f92  00003026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a6  0080035a  0080035a  00003280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000708  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013a56  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029e5  00000000  00000000  0001744e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000043cf  00000000  00000000  00019e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000191c  00000000  00000000  0001e204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030e2  00000000  00000000  0001fb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a1b3  00000000  00000000  00022c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  0002cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 01 	jmp	0x370	; 0x370 <__dtors_end>
       4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_3>
      10:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_3>
      14:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_3>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__vector_16>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_18>
      4c:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__vector_19>
      50:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      54:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	ee 04       	cpc	r14, r14
      6a:	fd 04       	cpc	r15, r13
      6c:	0b 05       	cpc	r16, r11
      6e:	19 05       	cpc	r17, r9
      70:	27 05       	cpc	r18, r7
      72:	35 05       	cpc	r19, r5
      74:	43 05       	cpc	r20, r3
      76:	51 05       	cpc	r21, r1
      78:	5f 05       	cpc	r21, r15
      7a:	6e 05       	cpc	r22, r14
      7c:	7d 05       	cpc	r23, r13
      7e:	8c 05       	cpc	r24, r12
      80:	9b 05       	cpc	r25, r11
      82:	aa 05       	cpc	r26, r10

00000084 <__trampolines_end>:
      84:	43 6f       	ori	r20, 0xF3	; 243
      86:	6e 6e       	ori	r22, 0xEE	; 238
      88:	65 63       	ori	r22, 0x35	; 53
      8a:	74 69       	ori	r23, 0x94	; 148
      8c:	6f 6e       	ori	r22, 0xEF	; 239
      8e:	20 52       	subi	r18, 0x20	; 32
      90:	65 66       	ori	r22, 0x65	; 101
      92:	75 73       	andi	r23, 0x35	; 53
      94:	65 64       	ori	r22, 0x45	; 69
      96:	3a 20       	and	r3, r10
      98:	6e 6f       	ori	r22, 0xFE	; 254
      9a:	74 20       	and	r7, r4
      9c:	61 75       	andi	r22, 0x51	; 81
      9e:	74 68       	ori	r23, 0x84	; 132
      a0:	6f 72       	andi	r22, 0x2F	; 47
      a2:	69 7a       	andi	r22, 0xA9	; 169
      a4:	65 64       	ori	r22, 0x45	; 69
      a6:	0d 0a       	sbc	r0, r29
	...

000000a9 <_ZL11ConnectAck4>:
      a9:	43 6f 6e 6e 65 63 74 69 6f 6e 20 52 65 66 75 73     Connection Refus
      b9:	65 64 3a 20 62 61 64 20 75 73 65 72 20 6e 61 6d     ed: bad user nam
      c9:	65 20 6f 72 20 70 61 73 73 77 6f 72 64 0d 0a 00     e or password...

000000d9 <_ZL11ConnectAck3>:
      d9:	43 6f 6e 6e 65 63 74 69 6f 6e 20 52 65 66 75 73     Connection Refus
      e9:	65 64 3a 20 73 65 72 76 65 72 20 75 6e 61 76 61     ed: server unava
      f9:	69 6c 61 62 6c 65 0d 0a 00                          ilable...

00000102 <_ZL11ConnectAck2>:
     102:	43 6f 6e 6e 65 63 74 69 6f 6e 20 52 65 66 75 73     Connection Refus
     112:	65 64 3a 20 69 64 65 6e 74 69 66 69 65 72 20 72     ed: identifier r
     122:	65 6a 65 63 74 65 64 0d 0a 00                       ejected...

0000012c <_ZL11ConnectAck1>:
     12c:	43 6f 6e 6e 65 63 74 69 6f 6e 20 52 65 66 75 73     Connection Refus
     13c:	65 64 3a 20 75 6e 61 63 63 65 70 74 61 62 6c 65     ed: unacceptable
     14c:	20 70 72 6f 74 6f 63 6f 6c 20 76 65 72 73 69 6f      protocol versio
     15c:	6e 0d 0a 00                                         n...

00000160 <_ZL11ConnectAck0>:
     160:	43 6f 6e 6e 65 63 74 69 6f 6e 20 41 63 63 65 70     Connection Accep
     170:	74 65 64 0d 0a 00                                   ted...

00000176 <_ZL17DISCONNECTMessage>:
     176:	43 6c 69 65 6e 74 20 69 73 20 44 69 73 63 6f 6e     Client is Discon
     186:	6e 65 63 74 69 6e 67 0d 0a 00                       necting...

00000190 <_ZL15PINGRESPMessage>:
     190:	50 49 4e 47 20 52 65 73 70 6f 6e 73 65 0d 0a 00     PING Response...

000001a0 <_ZL14PINGREQMessage>:
     1a0:	50 49 4e 47 20 52 65 71 75 65 73 74 0d 0a 00        PING Request...

000001af <_ZL15UNSUBACKMessage>:
     1af:	55 6e 73 75 62 73 63 72 69 62 65 20 41 63 6b 6e     Unsubscribe Ackn
     1bf:	6f 77 6c 65 64 67 6d 65 6e 74 0d 0a 00              owledgment...

000001cc <_ZL18UNSUBSCRIBEMessage>:
     1cc:	43 6c 69 65 6e 74 20 55 6e 73 75 62 73 63 72 69     Client Unsubscri
     1dc:	62 65 20 72 65 71 75 65 73 74 0d 0a 00              be request...

000001e9 <_ZL13SUBACKMessage>:
     1e9:	53 75 62 73 63 72 69 62 65 20 41 63 6b 6e 6f 77     Subscribe Acknow
     1f9:	6c 65 64 67 6d 65 6e 74 0d 0a 00                    ledgment...

00000204 <_ZL16SUBSCRIBEMessage>:
     204:	43 6c 69 65 6e 74 20 53 75 62 73 63 72 69 62 65     Client Subscribe
     214:	20 72 65 71 75 65 73 74 0d 0a 00                     request...

0000021f <_ZL14PUBCOMPMessage>:
     21f:	50 75 62 6c 69 73 68 20 43 6f 6d 70 6c 65 74 65     Publish Complete
     22f:	20 28 61 73 73 75 72 65 64 20 64 65 6c 69 76 65      (assured delive
     23f:	72 79 20 70 61 72 74 20 33 29 0d 0a 00              ry part 3)...

0000024c <_ZL13PUBRELMessage>:
     24c:	50 75 62 6c 69 73 68 20 52 65 6c 65 61 73 65 20     Publish Release 
     25c:	28 61 73 73 75 72 65 64 20 64 65 6c 69 76 65 72     (assured deliver
     26c:	79 20 70 61 72 74 20 32 29 0d 0a 00                 y part 2)...

00000278 <_ZL13PUBRECMessage>:
     278:	50 75 62 6c 69 73 68 20 52 65 63 65 69 76 65 64     Publish Received
     288:	20 28 61 73 73 75 72 65 64 20 64 65 6c 69 76 65      (assured delive
     298:	72 79 20 70 61 72 74 20 31 29 0d 0a 00              ry part 1)...

000002a5 <_ZL13PUBACKMessage>:
     2a5:	50 75 62 6c 69 73 68 20 41 63 6b 6e 6f 77 6c 65     Publish Acknowle
     2b5:	64 67 6d 65 6e 74 0d 0a 00                          dgment...

000002be <_ZL14PUBLISHMessage>:
     2be:	50 75 62 6c 69 73 68 20 6d 65 73 73 61 67 65 0d     Publish message.
     2ce:	0a 00                                               ..

000002d0 <_ZL14CONNACKMessage>:
     2d0:	43 6f 6e 6e 65 63 74 20 41 63 6b 6e 6f 77 6c 65     Connect Acknowle
     2e0:	64 67 6d 65 6e 74 0d 0a 00                          dgment...

000002e9 <_ZL14CONNECTMessage>:
     2e9:	43 6c 69 65 6e 74 20 72 65 71 75 65 73 74 20 74     Client request t
     2f9:	6f 20 63 6f 6e 6e 65 63 74 20 74 6f 20 53 65 72     o connect to Ser
     309:	76 65 72 0d 0a 00                                   ver...

0000030f <digital_pin_to_timer_PGM>:
     30f:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     31f:	00 00 00 00                                         ....

00000323 <digital_pin_to_bit_mask_PGM>:
     323:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     333:	04 08 10 20                                         ... 

00000337 <digital_pin_to_port_PGM>:
     337:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     347:	03 03 03 03                                         ....

0000034b <port_to_input_PGM>:
     34b:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000355 <port_to_output_PGM>:
     355:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000035f <port_to_mode_PGM>:
     35f:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000036a <__ctors_start>:
     36a:	4b 0d       	add	r20, r11
     36c:	0c 0f       	add	r16, r28

0000036e <__ctors_end>:
     36e:	66 0d       	add	r22, r6

00000370 <__dtors_end>:
     370:	11 24       	eor	r1, r1
     372:	1f be       	out	0x3f, r1	; 63
     374:	cf ef       	ldi	r28, 0xFF	; 255
     376:	d8 e0       	ldi	r29, 0x08	; 8
     378:	de bf       	out	0x3e, r29	; 62
     37a:	cd bf       	out	0x3d, r28	; 61

0000037c <__do_copy_data>:
     37c:	13 e0       	ldi	r17, 0x03	; 3
     37e:	a0 e0       	ldi	r26, 0x00	; 0
     380:	b1 e0       	ldi	r27, 0x01	; 1
     382:	e2 e9       	ldi	r30, 0x92	; 146
     384:	ff e2       	ldi	r31, 0x2F	; 47
     386:	02 c0       	rjmp	.+4      	; 0x38c <__do_copy_data+0x10>
     388:	05 90       	lpm	r0, Z+
     38a:	0d 92       	st	X+, r0
     38c:	aa 35       	cpi	r26, 0x5A	; 90
     38e:	b1 07       	cpc	r27, r17
     390:	d9 f7       	brne	.-10     	; 0x388 <__do_copy_data+0xc>

00000392 <__do_clear_bss>:
     392:	27 e0       	ldi	r18, 0x07	; 7
     394:	aa e5       	ldi	r26, 0x5A	; 90
     396:	b3 e0       	ldi	r27, 0x03	; 3
     398:	01 c0       	rjmp	.+2      	; 0x39c <.do_clear_bss_start>

0000039a <.do_clear_bss_loop>:
     39a:	1d 92       	st	X+, r1

0000039c <.do_clear_bss_start>:
     39c:	a0 30       	cpi	r26, 0x00	; 0
     39e:	b2 07       	cpc	r27, r18
     3a0:	e1 f7       	brne	.-8      	; 0x39a <.do_clear_bss_loop>

000003a2 <__do_global_ctors>:
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	c7 eb       	ldi	r28, 0xB7	; 183
     3a6:	d1 e0       	ldi	r29, 0x01	; 1
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__do_global_ctors+0x10>
     3aa:	21 97       	sbiw	r28, 0x01	; 1
     3ac:	fe 01       	movw	r30, r28
     3ae:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__tablejump2__>
     3b2:	c5 3b       	cpi	r28, 0xB5	; 181
     3b4:	d1 07       	cpc	r29, r17
     3b6:	c9 f7       	brne	.-14     	; 0x3aa <__do_global_ctors+0x8>
     3b8:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <main>
     3bc:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__do_global_dtors>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <_ZN5Print5writeEPKc>:
void GSM_MQTT::disconnect(void)
{
  Serial.print(char(DISCONNECT * 16));
  _sendLength(0);
  pingFlag = false;
}
     3c4:	61 15       	cp	r22, r1
     3c6:	71 05       	cpc	r23, r1
     3c8:	79 f0       	breq	.+30     	; 0x3e8 <_ZN5Print5writeEPKc+0x24>
     3ca:	fb 01       	movw	r30, r22
     3cc:	01 90       	ld	r0, Z+
     3ce:	00 20       	and	r0, r0
     3d0:	e9 f7       	brne	.-6      	; 0x3cc <_ZN5Print5writeEPKc+0x8>
     3d2:	31 97       	sbiw	r30, 0x01	; 1
     3d4:	af 01       	movw	r20, r30
     3d6:	46 1b       	sub	r20, r22
     3d8:	57 0b       	sbc	r21, r23
     3da:	dc 01       	movw	r26, r24
     3dc:	ed 91       	ld	r30, X+
     3de:	fc 91       	ld	r31, X
     3e0:	02 80       	ldd	r0, Z+2	; 0x02
     3e2:	f3 81       	ldd	r31, Z+3	; 0x03
     3e4:	e0 2d       	mov	r30, r0
     3e6:	09 94       	ijmp
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	08 95       	ret

000003ee <_ZN8GSM_MQTTC1Em>:
     3ee:	fc 01       	movw	r30, r24
     3f0:	10 82       	st	Z, r1
     3f2:	14 86       	std	Z+12, r1	; 0x0c
     3f4:	15 86       	std	Z+13, r1	; 0x0d
     3f6:	16 86       	std	Z+14, r1	; 0x0e
     3f8:	8f ef       	ldi	r24, 0xFF	; 255
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 8b       	std	Z+16, r25	; 0x10
     3fe:	87 87       	std	Z+15, r24	; 0x0f
     400:	12 8a       	std	Z+18, r1	; 0x12
     402:	11 8a       	std	Z+17, r1	; 0x11
     404:	df 01       	movw	r26, r30
     406:	ab 5b       	subi	r26, 0xBB	; 187
     408:	bf 4f       	sbci	r27, 0xFF	; 255
     40a:	11 96       	adiw	r26, 0x01	; 1
     40c:	1c 92       	st	X, r1
     40e:	1e 92       	st	-X, r1
     410:	a4 50       	subi	r26, 0x04	; 4
     412:	bf 4f       	sbci	r27, 0xFF	; 255
     414:	11 96       	adiw	r26, 0x01	; 1
     416:	1c 92       	st	X, r1
     418:	1e 92       	st	-X, r1
     41a:	12 96       	adiw	r26, 0x02	; 2
     41c:	11 96       	adiw	r26, 0x01	; 1
     41e:	1c 92       	st	X, r1
     420:	1e 92       	st	-X, r1
     422:	12 96       	adiw	r26, 0x02	; 2
     424:	1c 92       	st	X, r1
     426:	11 96       	adiw	r26, 0x01	; 1
     428:	1d 92       	st	X+, r1
     42a:	1d 92       	st	X+, r1
     42c:	1d 92       	st	X+, r1
     42e:	1c 92       	st	X, r1
     430:	13 97       	sbiw	r26, 0x03	; 3
     432:	14 96       	adiw	r26, 0x04	; 4
     434:	1d 92       	st	X+, r1
     436:	1d 92       	st	X+, r1
     438:	1d 92       	st	X+, r1
     43a:	1c 92       	st	X, r1
     43c:	13 97       	sbiw	r26, 0x03	; 3
     43e:	14 96       	adiw	r26, 0x04	; 4
     440:	1d 92       	st	X+, r1
     442:	1d 92       	st	X+, r1
     444:	1d 92       	st	X+, r1
     446:	1c 92       	st	X, r1
     448:	13 97       	sbiw	r26, 0x03	; 3
     44a:	a0 5d       	subi	r26, 0xD0	; 208
     44c:	be 4f       	sbci	r27, 0xFE	; 254
     44e:	11 96       	adiw	r26, 0x01	; 1
     450:	1c 92       	st	X, r1
     452:	1e 92       	st	-X, r1
     454:	12 96       	adiw	r26, 0x02	; 2
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	8c 93       	st	X, r24
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	1d 92       	st	X+, r1
     45e:	1d 92       	st	X+, r1
     460:	1d 92       	st	X+, r1
     462:	1c 92       	st	X, r1
     464:	13 97       	sbiw	r26, 0x03	; 3
     466:	14 96       	adiw	r26, 0x04	; 4
     468:	1c 92       	st	X, r1
     46a:	11 96       	adiw	r26, 0x01	; 1
     46c:	1c 92       	st	X, r1
     46e:	e9 57       	subi	r30, 0x79	; 121
     470:	fd 4f       	sbci	r31, 0xFD	; 253
     472:	40 83       	st	Z, r20
     474:	51 83       	std	Z+1, r21	; 0x01
     476:	62 83       	std	Z+2, r22	; 0x02
     478:	73 83       	std	Z+3, r23	; 0x03
     47a:	08 95       	ret

0000047c <_ZN8GSM_MQTT14_sendUTFStringEPc>:
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	8b 01       	movw	r16, r22
     486:	eb 01       	movw	r28, r22
     488:	09 90       	ld	r0, Y+
     48a:	00 20       	and	r0, r0
     48c:	e9 f7       	brne	.-6      	; 0x488 <_ZN8GSM_MQTT14_sendUTFStringEPc+0xc>
     48e:	21 97       	sbiw	r28, 0x01	; 1
     490:	c6 1b       	sub	r28, r22
     492:	d7 0b       	sbc	r29, r23
     494:	ce 01       	movw	r24, r28
     496:	d7 ff       	sbrs	r29, 7
     498:	02 c0       	rjmp	.+4      	; 0x49e <_ZN8GSM_MQTT14_sendUTFStringEPc+0x22>
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	9f 4f       	sbci	r25, 0xFF	; 255
     49e:	69 2f       	mov	r22, r25
     4a0:	82 e1       	ldi	r24, 0x12	; 18
     4a2:	96 e0       	ldi	r25, 0x06	; 6
     4a4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     4a8:	ce 01       	movw	r24, r28
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	71 e0       	ldi	r23, 0x01	; 1
     4ae:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__divmodhi4>
     4b2:	68 2f       	mov	r22, r24
     4b4:	82 e1       	ldi	r24, 0x12	; 18
     4b6:	96 e0       	ldi	r25, 0x06	; 6
     4b8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     4bc:	b8 01       	movw	r22, r16
     4be:	82 e1       	ldi	r24, 0x12	; 18
     4c0:	96 e0       	ldi	r25, 0x06	; 6
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>

000004ce <_ZN8GSM_MQTT11_sendLengthEi>:
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	eb 01       	movw	r28, r22
     4d4:	c0 38       	cpi	r28, 0x80	; 128
     4d6:	d1 05       	cpc	r29, r1
     4d8:	6c f0       	brlt	.+26     	; 0x4f4 <_ZN8GSM_MQTT11_sendLengthEi+0x26>
     4da:	be 01       	movw	r22, r28
     4dc:	6f 77       	andi	r22, 0x7F	; 127
     4de:	77 27       	eor	r23, r23
     4e0:	60 58       	subi	r22, 0x80	; 128
     4e2:	82 e1       	ldi	r24, 0x12	; 18
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     4ea:	cc 0f       	add	r28, r28
     4ec:	cd 2f       	mov	r28, r29
     4ee:	cc 1f       	adc	r28, r28
     4f0:	dd 0b       	sbc	r29, r29
     4f2:	f0 cf       	rjmp	.-32     	; 0x4d4 <_ZN8GSM_MQTT11_sendLengthEi+0x6>
     4f4:	6c 2f       	mov	r22, r28
     4f6:	82 e1       	ldi	r24, 0x12	; 18
     4f8:	96 e0       	ldi	r25, 0x06	; 6
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_ZN5Print5printEc>

00000502 <_ZN8GSM_MQTT5_pingEv>:
     502:	8f 92       	push	r8
     504:	9f 92       	push	r9
     506:	af 92       	push	r10
     508:	bf 92       	push	r11
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	fc 01       	movw	r30, r24
     51c:	24 85       	ldd	r18, Z+12	; 0x0c
     51e:	22 23       	and	r18, r18
     520:	09 f4       	brne	.+2      	; 0x524 <_ZN8GSM_MQTT5_pingEv+0x22>
     522:	3f c0       	rjmp	.+126    	; 0x5a2 <_ZN8GSM_MQTT5_pingEv+0xa0>
     524:	ec 01       	movw	r28, r24
     526:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
     52a:	6b 01       	movw	r12, r22
     52c:	7c 01       	movw	r14, r24
     52e:	8e 01       	movw	r16, r28
     530:	0f 57       	subi	r16, 0x7F	; 127
     532:	1d 4f       	sbci	r17, 0xFD	; 253
     534:	f8 01       	movw	r30, r16
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	a2 81       	ldd	r26, Z+2	; 0x02
     53c:	b3 81       	ldd	r27, Z+3	; 0x03
     53e:	9e 01       	movw	r18, r28
     540:	29 57       	subi	r18, 0x79	; 121
     542:	3d 4f       	sbci	r19, 0xFD	; 253
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	31 81       	ldd	r19, Z+1	; 0x01
     54a:	42 81       	ldd	r20, Z+2	; 0x02
     54c:	53 81       	ldd	r21, Z+3	; 0x03
     54e:	46 01       	movw	r8, r12
     550:	57 01       	movw	r10, r14
     552:	88 1a       	sub	r8, r24
     554:	99 0a       	sbc	r9, r25
     556:	aa 0a       	sbc	r10, r26
     558:	bb 0a       	sbc	r11, r27
     55a:	a8 ee       	ldi	r26, 0xE8	; 232
     55c:	b3 e0       	ldi	r27, 0x03	; 3
     55e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
     562:	86 16       	cp	r8, r22
     564:	97 06       	cpc	r9, r23
     566:	a8 06       	cpc	r10, r24
     568:	b9 06       	cpc	r11, r25
     56a:	d8 f0       	brcs	.+54     	; 0x5a2 <_ZN8GSM_MQTT5_pingEv+0xa0>
     56c:	f8 01       	movw	r30, r16
     56e:	c0 82       	st	Z, r12
     570:	d1 82       	std	Z+1, r13	; 0x01
     572:	e2 82       	std	Z+2, r14	; 0x02
     574:	f3 82       	std	Z+3, r15	; 0x03
     576:	60 ec       	ldi	r22, 0xC0	; 192
     578:	82 e1       	ldi	r24, 0x12	; 18
     57a:	96 e0       	ldi	r25, 0x06	; 6
     57c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	ce 01       	movw	r24, r28
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	bf 90       	pop	r11
     5b4:	af 90       	pop	r10
     5b6:	9f 90       	pop	r9
     5b8:	8f 90       	pop	r8
     5ba:	08 95       	ret

000005bc <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_>:
     5bc:	3f 92       	push	r3
     5be:	4f 92       	push	r4
     5c0:	5f 92       	push	r5
     5c2:	6f 92       	push	r6
     5c4:	7f 92       	push	r7
     5c6:	8f 92       	push	r8
     5c8:	9f 92       	push	r9
     5ca:	af 92       	push	r10
     5cc:	bf 92       	push	r11
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	27 97       	sbiw	r28, 0x07	; 7
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	3c 01       	movw	r6, r24
     5f0:	2b 01       	movw	r4, r22
     5f2:	34 2e       	mov	r3, r20
     5f4:	b2 2e       	mov	r11, r18
     5f6:	9c 2c       	mov	r9, r12
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	f3 01       	movw	r30, r6
     5fe:	90 8b       	std	Z+16, r25	; 0x10
     600:	87 87       	std	Z+15, r24	; 0x0f
     602:	60 e1       	ldi	r22, 0x10	; 16
     604:	82 e1       	ldi	r24, 0x12	; 18
     606:	96 e0       	ldi	r25, 0x06	; 6
     608:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     60c:	87 e0       	ldi	r24, 0x07	; 7
     60e:	e6 e0       	ldi	r30, 0x06	; 6
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	9e 01       	movw	r18, r28
     614:	2f 5f       	subi	r18, 0xFF	; 255
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	69 01       	movw	r12, r18
     61a:	d9 01       	movw	r26, r18
     61c:	01 90       	ld	r0, Z+
     61e:	0d 92       	st	X+, r0
     620:	8a 95       	dec	r24
     622:	e1 f7       	brne	.-8      	; 0x61c <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x60>
     624:	f9 01       	movw	r30, r18
     626:	01 90       	ld	r0, Z+
     628:	00 20       	and	r0, r0
     62a:	e9 f7       	brne	.-6      	; 0x626 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x6a>
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	bf 01       	movw	r22, r30
     630:	62 1b       	sub	r22, r18
     632:	73 0b       	sbc	r23, r19
     634:	f2 01       	movw	r30, r4
     636:	01 90       	ld	r0, Z+
     638:	00 20       	and	r0, r0
     63a:	e9 f7       	brne	.-6      	; 0x636 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x7a>
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	e4 19       	sub	r30, r4
     640:	f5 09       	sbc	r31, r5
     642:	e6 0f       	add	r30, r22
     644:	f7 1f       	adc	r31, r23
     646:	a1 10       	cpse	r10, r1
     648:	04 c0       	rjmp	.+8      	; 0x652 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x96>
     64a:	bf 01       	movw	r22, r30
     64c:	68 5f       	subi	r22, 0xF8	; 248
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	1d c0       	rjmp	.+58     	; 0x68c <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0xd0>
     652:	ac 8d       	ldd	r26, Y+28	; 0x1c
     654:	bd 8d       	ldd	r27, Y+29	; 0x1d
     656:	0d 90       	ld	r0, X+
     658:	00 20       	and	r0, r0
     65a:	e9 f7       	brne	.-6      	; 0x656 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x9a>
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	9d 01       	movw	r18, r26
     660:	4c 8d       	ldd	r20, Y+28	; 0x1c
     662:	5d 8d       	ldd	r21, Y+29	; 0x1d
     664:	24 1b       	sub	r18, r20
     666:	35 0b       	sbc	r19, r21
     668:	ae 8d       	ldd	r26, Y+30	; 0x1e
     66a:	bf 8d       	ldd	r27, Y+31	; 0x1f
     66c:	0d 90       	ld	r0, X+
     66e:	00 20       	and	r0, r0
     670:	e9 f7       	brne	.-6      	; 0x66c <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0xb0>
     672:	11 97       	sbiw	r26, 0x01	; 1
     674:	cd 01       	movw	r24, r26
     676:	4e 8d       	ldd	r20, Y+30	; 0x1e
     678:	5f 8d       	ldd	r21, Y+31	; 0x1f
     67a:	84 1b       	sub	r24, r20
     67c:	95 0b       	sbc	r25, r21
     67e:	bf 01       	movw	r22, r30
     680:	64 5f       	subi	r22, 0xF4	; 244
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	62 0f       	add	r22, r18
     686:	73 1f       	adc	r23, r19
     688:	68 0f       	add	r22, r24
     68a:	79 1f       	adc	r23, r25
     68c:	33 20       	and	r3, r3
     68e:	c1 f0       	breq	.+48     	; 0x6c0 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x104>
     690:	f8 01       	movw	r30, r16
     692:	01 90       	ld	r0, Z+
     694:	00 20       	and	r0, r0
     696:	e9 f7       	brne	.-6      	; 0x692 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0xd6>
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	e0 1b       	sub	r30, r16
     69c:	f1 0b       	sbc	r31, r17
     69e:	6e 5f       	subi	r22, 0xFE	; 254
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	6e 0f       	add	r22, r30
     6a4:	7f 1f       	adc	r23, r31
     6a6:	bb 20       	and	r11, r11
     6a8:	59 f0       	breq	.+22     	; 0x6c0 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x104>
     6aa:	f7 01       	movw	r30, r14
     6ac:	01 90       	ld	r0, Z+
     6ae:	00 20       	and	r0, r0
     6b0:	e9 f7       	brne	.-6      	; 0x6ac <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0xf0>
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	ee 19       	sub	r30, r14
     6b6:	ff 09       	sbc	r31, r15
     6b8:	6e 5f       	subi	r22, 0xFE	; 254
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	6e 0f       	add	r22, r30
     6be:	7f 1f       	adc	r23, r31
     6c0:	c3 01       	movw	r24, r6
     6c2:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     6c6:	b6 01       	movw	r22, r12
     6c8:	c3 01       	movw	r24, r6
     6ca:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     6ce:	f3 01       	movw	r30, r6
     6d0:	e0 58       	subi	r30, 0x80	; 128
     6d2:	fd 4f       	sbci	r31, 0xFD	; 253
     6d4:	60 81       	ld	r22, Z
     6d6:	82 e1       	ldi	r24, 0x12	; 18
     6d8:	96 e0       	ldi	r25, 0x06	; 6
     6da:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     6de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6e0:	9b 2d       	mov	r25, r11
     6e2:	52 e0       	ldi	r21, 0x02	; 2
     6e4:	35 9e       	mul	r3, r21
     6e6:	90 0d       	add	r25, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	e2 e0       	ldi	r30, 0x02	; 2
     6ec:	9e 9f       	mul	r25, r30
     6ee:	80 0d       	add	r24, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	f4 e0       	ldi	r31, 0x04	; 4
     6f4:	8f 9f       	mul	r24, r31
     6f6:	80 0c       	add	r8, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	8a 2d       	mov	r24, r10
     6fc:	22 e0       	ldi	r18, 0x02	; 2
     6fe:	82 9e       	mul	r8, r18
     700:	80 0d       	add	r24, r0
     702:	11 24       	eor	r1, r1
     704:	69 2d       	mov	r22, r9
     706:	32 e0       	ldi	r19, 0x02	; 2
     708:	83 9f       	mul	r24, r19
     70a:	60 0d       	add	r22, r0
     70c:	11 24       	eor	r1, r1
     70e:	66 0f       	add	r22, r22
     710:	82 e1       	ldi	r24, 0x12	; 18
     712:	96 e0       	ldi	r25, 0x06	; 6
     714:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     718:	63 01       	movw	r12, r6
     71a:	49 e7       	ldi	r20, 0x79	; 121
     71c:	c4 1a       	sub	r12, r20
     71e:	4d ef       	ldi	r20, 0xFD	; 253
     720:	d4 0a       	sbc	r13, r20
     722:	f6 01       	movw	r30, r12
     724:	80 81       	ld	r24, Z
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	a2 81       	ldd	r26, Z+2	; 0x02
     72a:	b3 81       	ldd	r27, Z+3	; 0x03
     72c:	69 2f       	mov	r22, r25
     72e:	7a 2f       	mov	r23, r26
     730:	8b 2f       	mov	r24, r27
     732:	99 27       	eor	r25, r25
     734:	82 e1       	ldi	r24, 0x12	; 18
     736:	96 e0       	ldi	r25, 0x06	; 6
     738:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     73c:	f6 01       	movw	r30, r12
     73e:	60 81       	ld	r22, Z
     740:	71 81       	ldd	r23, Z+1	; 0x01
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	93 81       	ldd	r25, Z+3	; 0x03
     746:	82 e1       	ldi	r24, 0x12	; 18
     748:	96 e0       	ldi	r25, 0x06	; 6
     74a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     74e:	b2 01       	movw	r22, r4
     750:	c3 01       	movw	r24, r6
     752:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     756:	aa 20       	and	r10, r10
     758:	51 f0       	breq	.+20     	; 0x76e <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x1b2>
     75a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     75c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     75e:	c3 01       	movw	r24, r6
     760:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     764:	6e 8d       	ldd	r22, Y+30	; 0x1e
     766:	7f 8d       	ldd	r23, Y+31	; 0x1f
     768:	c3 01       	movw	r24, r6
     76a:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     76e:	33 20       	and	r3, r3
     770:	51 f0       	breq	.+20     	; 0x786 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x1ca>
     772:	b8 01       	movw	r22, r16
     774:	c3 01       	movw	r24, r6
     776:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     77a:	bb 20       	and	r11, r11
     77c:	21 f0       	breq	.+8      	; 0x786 <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_+0x1ca>
     77e:	b7 01       	movw	r22, r14
     780:	c3 01       	movw	r24, r6
     782:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     786:	27 96       	adiw	r28, 0x07	; 7
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	9f 90       	pop	r9
     7a8:	8f 90       	pop	r8
     7aa:	7f 90       	pop	r7
     7ac:	6f 90       	pop	r6
     7ae:	5f 90       	pop	r5
     7b0:	4f 90       	pop	r4
     7b2:	3f 90       	pop	r3
     7b4:	08 95       	ret

000007b6 <_ZN8GSM_MQTT7publishEcccjPcS0_>:
     7b6:	bf 92       	push	r11
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
     7ca:	b4 2e       	mov	r11, r20
     7cc:	94 2f       	mov	r25, r20
     7ce:	84 e0       	ldi	r24, 0x04	; 4
     7d0:	68 9f       	mul	r22, r24
     7d2:	90 0d       	add	r25, r0
     7d4:	11 24       	eor	r1, r1
     7d6:	69 2f       	mov	r22, r25
     7d8:	68 5e       	subi	r22, 0xE8	; 232
     7da:	66 0f       	add	r22, r22
     7dc:	62 0f       	add	r22, r18
     7de:	82 e1       	ldi	r24, 0x12	; 18
     7e0:	96 e0       	ldi	r25, 0x06	; 6
     7e2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     7e6:	f7 01       	movw	r30, r14
     7e8:	01 90       	ld	r0, Z+
     7ea:	00 20       	and	r0, r0
     7ec:	e9 f7       	brne	.-6      	; 0x7e8 <_ZN8GSM_MQTT7publishEcccjPcS0_+0x32>
     7ee:	bf 01       	movw	r22, r30
     7f0:	6e 19       	sub	r22, r14
     7f2:	7f 09       	sbc	r23, r15
     7f4:	6f 5f       	subi	r22, 0xFF	; 255
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	bb 20       	and	r11, r11
     7fa:	11 f0       	breq	.+4      	; 0x800 <_ZN8GSM_MQTT7publishEcccjPcS0_+0x4a>
     7fc:	6e 5f       	subi	r22, 0xFE	; 254
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	f6 01       	movw	r30, r12
     802:	01 90       	ld	r0, Z+
     804:	00 20       	and	r0, r0
     806:	e9 f7       	brne	.-6      	; 0x802 <_ZN8GSM_MQTT7publishEcccjPcS0_+0x4c>
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	ec 19       	sub	r30, r12
     80c:	fd 09       	sbc	r31, r13
     80e:	6e 0f       	add	r22, r30
     810:	7f 1f       	adc	r23, r31
     812:	ce 01       	movw	r24, r28
     814:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     818:	b7 01       	movw	r22, r14
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     820:	bb 20       	and	r11, r11
     822:	51 f0       	breq	.+20     	; 0x838 <_ZN8GSM_MQTT7publishEcccjPcS0_+0x82>
     824:	61 2f       	mov	r22, r17
     826:	82 e1       	ldi	r24, 0x12	; 18
     828:	96 e0       	ldi	r25, 0x06	; 6
     82a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     82e:	60 2f       	mov	r22, r16
     830:	82 e1       	ldi	r24, 0x12	; 18
     832:	96 e0       	ldi	r25, 0x06	; 6
     834:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     838:	b6 01       	movw	r22, r12
     83a:	82 e1       	ldi	r24, 0x12	; 18
     83c:	96 e0       	ldi	r25, 0x06	; 6
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	bf 90       	pop	r11
     850:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>

00000854 <_ZN8GSM_MQTT10publishACKEj>:
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	8c 01       	movw	r16, r24
     85e:	eb 01       	movw	r28, r22
     860:	60 e4       	ldi	r22, 0x40	; 64
     862:	82 e1       	ldi	r24, 0x12	; 18
     864:	96 e0       	ldi	r25, 0x06	; 6
     866:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	c8 01       	movw	r24, r16
     870:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     874:	6d 2f       	mov	r22, r29
     876:	82 e1       	ldi	r24, 0x12	; 18
     878:	96 e0       	ldi	r25, 0x06	; 6
     87a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     87e:	6c 2f       	mov	r22, r28
     880:	82 e1       	ldi	r24, 0x12	; 18
     882:	96 e0       	ldi	r25, 0x06	; 6
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_ZN5Print5printEc>

00000890 <_ZN8GSM_MQTT10publishRECEj>:
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	8c 01       	movw	r16, r24
     89a:	eb 01       	movw	r28, r22
     89c:	60 e5       	ldi	r22, 0x50	; 80
     89e:	82 e1       	ldi	r24, 0x12	; 18
     8a0:	96 e0       	ldi	r25, 0x06	; 6
     8a2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     8a6:	62 e0       	ldi	r22, 0x02	; 2
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	c8 01       	movw	r24, r16
     8ac:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     8b0:	6d 2f       	mov	r22, r29
     8b2:	82 e1       	ldi	r24, 0x12	; 18
     8b4:	96 e0       	ldi	r25, 0x06	; 6
     8b6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     8ba:	6c 2f       	mov	r22, r28
     8bc:	82 e1       	ldi	r24, 0x12	; 18
     8be:	96 e0       	ldi	r25, 0x06	; 6
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_ZN5Print5printEc>

000008cc <_ZN8GSM_MQTT10publishRELEcj>:
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	8c 01       	movw	r16, r24
     8d6:	ea 01       	movw	r28, r20
     8d8:	66 0f       	add	r22, r22
     8da:	66 0f       	add	r22, r22
     8dc:	66 0f       	add	r22, r22
     8de:	6e 59       	subi	r22, 0x9E	; 158
     8e0:	82 e1       	ldi	r24, 0x12	; 18
     8e2:	96 e0       	ldi	r25, 0x06	; 6
     8e4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     8e8:	62 e0       	ldi	r22, 0x02	; 2
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	c8 01       	movw	r24, r16
     8ee:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     8f2:	6d 2f       	mov	r22, r29
     8f4:	82 e1       	ldi	r24, 0x12	; 18
     8f6:	96 e0       	ldi	r25, 0x06	; 6
     8f8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     8fc:	6c 2f       	mov	r22, r28
     8fe:	82 e1       	ldi	r24, 0x12	; 18
     900:	96 e0       	ldi	r25, 0x06	; 6
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_ZN5Print5printEc>

0000090e <_ZN8GSM_MQTT11publishCOMPEj>:
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	8c 01       	movw	r16, r24
     918:	eb 01       	movw	r28, r22
     91a:	60 e7       	ldi	r22, 0x70	; 112
     91c:	82 e1       	ldi	r24, 0x12	; 18
     91e:	96 e0       	ldi	r25, 0x06	; 6
     920:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     924:	62 e0       	ldi	r22, 0x02	; 2
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	c8 01       	movw	r24, r16
     92a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     92e:	6d 2f       	mov	r22, r29
     930:	82 e1       	ldi	r24, 0x12	; 18
     932:	96 e0       	ldi	r25, 0x06	; 6
     934:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     938:	6c 2f       	mov	r22, r28
     93a:	82 e1       	ldi	r24, 0x12	; 18
     93c:	96 e0       	ldi	r25, 0x06	; 6
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_ZN5Print5printEc>

0000094a <_ZN8GSM_MQTT9subscribeEcjPcc>:
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	7c 01       	movw	r14, r24
     95a:	14 2f       	mov	r17, r20
     95c:	d5 2e       	mov	r13, r21
     95e:	e9 01       	movw	r28, r18
     960:	66 0f       	add	r22, r22
     962:	66 0f       	add	r22, r22
     964:	66 0f       	add	r22, r22
     966:	6e 57       	subi	r22, 0x7E	; 126
     968:	82 e1       	ldi	r24, 0x12	; 18
     96a:	96 e0       	ldi	r25, 0x06	; 6
     96c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     970:	fe 01       	movw	r30, r28
     972:	01 90       	ld	r0, Z+
     974:	00 20       	and	r0, r0
     976:	e9 f7       	brne	.-6      	; 0x972 <_ZN8GSM_MQTT9subscribeEcjPcc+0x28>
     978:	bf 01       	movw	r22, r30
     97a:	6c 1b       	sub	r22, r28
     97c:	7d 0b       	sbc	r23, r29
     97e:	6c 5f       	subi	r22, 0xFC	; 252
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	c7 01       	movw	r24, r14
     984:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN8GSM_MQTT11_sendLengthEi>
     988:	6d 2d       	mov	r22, r13
     98a:	82 e1       	ldi	r24, 0x12	; 18
     98c:	96 e0       	ldi	r25, 0x06	; 6
     98e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     992:	61 2f       	mov	r22, r17
     994:	82 e1       	ldi	r24, 0x12	; 18
     996:	96 e0       	ldi	r25, 0x06	; 6
     998:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     99c:	be 01       	movw	r22, r28
     99e:	c7 01       	movw	r24, r14
     9a0:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN8GSM_MQTT14_sendUTFStringEPc>
     9a4:	60 2f       	mov	r22, r16
     9a6:	82 e1       	ldi	r24, 0x12	; 18
     9a8:	96 e0       	ldi	r25, 0x06	; 6
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_ZN5Print5printEc>

000009bc <_ZN8GSM_MQTT16printMessageTypeEh>:
const char PINGREQMessage[] PROGMEM  = {"PING Request\r\n"};
const char PINGRESPMessage[] PROGMEM  = {"PING Response\r\n"};
const char DISCONNECTMessage[] PROGMEM  = {"Client is Disconnecting\r\n"};

void GSM_MQTT::printMessageType(uint8_t Message)
{
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
  switch (Message)
     9c4:	86 2f       	mov	r24, r22
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	fc 01       	movw	r30, r24
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	ee 30       	cpi	r30, 0x0E	; 14
     9ce:	f1 05       	cpc	r31, r1
     9d0:	08 f0       	brcs	.+2      	; 0x9d4 <_ZN8GSM_MQTT16printMessageTypeEh+0x18>
     9d2:	ce c0       	rjmp	.+412    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     9d4:	ec 5c       	subi	r30, 0xCC	; 204
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__tablejump2__>
     9dc:	c9 ee       	ldi	r28, 0xE9	; 233
     9de:	d2 e0       	ldi	r29, 0x02	; 2
     9e0:	0e e0       	ldi	r16, 0x0E	; 14
     9e2:	13 e0       	ldi	r17, 0x03	; 3
      {
        int k, len = strlen_P(CONNECTMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(CONNECTMessage + k);
     9e4:	fe 01       	movw	r30, r28
     9e6:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     9e8:	87 ee       	ldi	r24, 0xE7	; 231
     9ea:	95 e0       	ldi	r25, 0x05	; 5
     9ec:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     9f0:	21 96       	adiw	r28, 0x01	; 1
  {
    case CONNECT:
      {
        int k, len = strlen_P(CONNECTMessage);
        char myChar;
        for (k = 0; k < len; k++)
     9f2:	0c 17       	cp	r16, r28
     9f4:	1d 07       	cpc	r17, r29
     9f6:	b1 f7       	brne	.-20     	; 0x9e4 <_ZN8GSM_MQTT16printMessageTypeEh+0x28>
     9f8:	bb c0       	rjmp	.+374    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     9fa:	c0 ed       	ldi	r28, 0xD0	; 208
     9fc:	d2 e0       	ldi	r29, 0x02	; 2
      {
        int k, len = strlen_P(CONNACKMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(CONNACKMessage + k);
     9fe:	fe 01       	movw	r30, r28
     a00:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     a02:	87 ee       	ldi	r24, 0xE7	; 231
     a04:	95 e0       	ldi	r25, 0x05	; 5
     a06:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     a0a:	21 96       	adiw	r28, 0x01	; 1
      }
    case CONNACK:
      {
        int k, len = strlen_P(CONNACKMessage);
        char myChar;
        for (k = 0; k < len; k++)
     a0c:	f2 e0       	ldi	r31, 0x02	; 2
     a0e:	c8 3e       	cpi	r28, 0xE8	; 232
     a10:	df 07       	cpc	r29, r31
     a12:	a9 f7       	brne	.-22     	; 0x9fe <_ZN8GSM_MQTT16printMessageTypeEh+0x42>
     a14:	ad c0       	rjmp	.+346    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     a16:	ce eb       	ldi	r28, 0xBE	; 190
     a18:	d2 e0       	ldi	r29, 0x02	; 2
      {
        int k, len = strlen_P(PUBLISHMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(PUBLISHMessage + k);
     a1a:	fe 01       	movw	r30, r28
     a1c:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     a1e:	87 ee       	ldi	r24, 0xE7	; 231
     a20:	95 e0       	ldi	r25, 0x05	; 5
     a22:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     a26:	21 96       	adiw	r28, 0x01	; 1
      }
    case PUBLISH:
      {
        int k, len = strlen_P(PUBLISHMessage);
        char myChar;
        for (k = 0; k < len; k++)
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	cf 3c       	cpi	r28, 0xCF	; 207
     a2c:	df 07       	cpc	r29, r31
     a2e:	a9 f7       	brne	.-22     	; 0xa1a <_ZN8GSM_MQTT16printMessageTypeEh+0x5e>
     a30:	9f c0       	rjmp	.+318    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     a32:	c5 ea       	ldi	r28, 0xA5	; 165
     a34:	d2 e0       	ldi	r29, 0x02	; 2
      {
        int k, len = strlen_P(PUBACKMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(PUBACKMessage + k);
     a36:	fe 01       	movw	r30, r28
     a38:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     a3a:	87 ee       	ldi	r24, 0xE7	; 231
     a3c:	95 e0       	ldi	r25, 0x05	; 5
     a3e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     a42:	21 96       	adiw	r28, 0x01	; 1
      }
    case PUBACK:
      {
        int k, len = strlen_P(PUBACKMessage);
        char myChar;
        for (k = 0; k < len; k++)
     a44:	f2 e0       	ldi	r31, 0x02	; 2
     a46:	cd 3b       	cpi	r28, 0xBD	; 189
     a48:	df 07       	cpc	r29, r31
     a4a:	a9 f7       	brne	.-22     	; 0xa36 <_ZN8GSM_MQTT16printMessageTypeEh+0x7a>
     a4c:	91 c0       	rjmp	.+290    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     a4e:	c8 e7       	ldi	r28, 0x78	; 120
     a50:	d2 e0       	ldi	r29, 0x02	; 2
      {
        int k, len = strlen_P(PUBRECMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(PUBRECMessage + k);
     a52:	fe 01       	movw	r30, r28
     a54:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     a56:	87 ee       	ldi	r24, 0xE7	; 231
     a58:	95 e0       	ldi	r25, 0x05	; 5
     a5a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     a5e:	21 96       	adiw	r28, 0x01	; 1
      }
    case  PUBREC:
      {
        int k, len = strlen_P(PUBRECMessage);
        char myChar;
        for (k = 0; k < len; k++)
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	c4 3a       	cpi	r28, 0xA4	; 164
     a64:	df 07       	cpc	r29, r31
     a66:	a9 f7       	brne	.-22     	; 0xa52 <_ZN8GSM_MQTT16printMessageTypeEh+0x96>
     a68:	83 c0       	rjmp	.+262    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     a6a:	cc e4       	ldi	r28, 0x4C	; 76
     a6c:	d2 e0       	ldi	r29, 0x02	; 2
      {
        int k, len = strlen_P(PUBRELMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(PUBRELMessage + k);
     a6e:	fe 01       	movw	r30, r28
     a70:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     a72:	87 ee       	ldi	r24, 0xE7	; 231
     a74:	95 e0       	ldi	r25, 0x05	; 5
     a76:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     a7a:	21 96       	adiw	r28, 0x01	; 1
      }
    case PUBREL:
      {
        int k, len = strlen_P(PUBRELMessage);
        char myChar;
        for (k = 0; k < len; k++)
     a7c:	f2 e0       	ldi	r31, 0x02	; 2
     a7e:	c7 37       	cpi	r28, 0x77	; 119
     a80:	df 07       	cpc	r29, r31
     a82:	a9 f7       	brne	.-22     	; 0xa6e <_ZN8GSM_MQTT16printMessageTypeEh+0xb2>
     a84:	75 c0       	rjmp	.+234    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     a86:	cf e1       	ldi	r28, 0x1F	; 31
     a88:	d2 e0       	ldi	r29, 0x02	; 2
      {
        int k, len = strlen_P(PUBCOMPMessage );
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(PUBCOMPMessage  + k);
     a8a:	fe 01       	movw	r30, r28
     a8c:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     a8e:	87 ee       	ldi	r24, 0xE7	; 231
     a90:	95 e0       	ldi	r25, 0x05	; 5
     a92:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     a96:	21 96       	adiw	r28, 0x01	; 1
      }
    case PUBCOMP:
      {
        int k, len = strlen_P(PUBCOMPMessage );
        char myChar;
        for (k = 0; k < len; k++)
     a98:	f2 e0       	ldi	r31, 0x02	; 2
     a9a:	cb 34       	cpi	r28, 0x4B	; 75
     a9c:	df 07       	cpc	r29, r31
     a9e:	a9 f7       	brne	.-22     	; 0xa8a <_ZN8GSM_MQTT16printMessageTypeEh+0xce>
     aa0:	67 c0       	rjmp	.+206    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     aa2:	c4 e0       	ldi	r28, 0x04	; 4
     aa4:	d2 e0       	ldi	r29, 0x02	; 2
      {
        int k, len = strlen_P(SUBSCRIBEMessage );
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(SUBSCRIBEMessage  + k);
     aa6:	fe 01       	movw	r30, r28
     aa8:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     aaa:	87 ee       	ldi	r24, 0xE7	; 231
     aac:	95 e0       	ldi	r25, 0x05	; 5
     aae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     ab2:	21 96       	adiw	r28, 0x01	; 1
      }
    case SUBSCRIBE:
      {
        int k, len = strlen_P(SUBSCRIBEMessage );
        char myChar;
        for (k = 0; k < len; k++)
     ab4:	f2 e0       	ldi	r31, 0x02	; 2
     ab6:	ce 31       	cpi	r28, 0x1E	; 30
     ab8:	df 07       	cpc	r29, r31
     aba:	a9 f7       	brne	.-22     	; 0xaa6 <_ZN8GSM_MQTT16printMessageTypeEh+0xea>
     abc:	59 c0       	rjmp	.+178    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     abe:	c9 ee       	ldi	r28, 0xE9	; 233
     ac0:	d1 e0       	ldi	r29, 0x01	; 1
     ac2:	03 e0       	ldi	r16, 0x03	; 3
     ac4:	12 e0       	ldi	r17, 0x02	; 2
      {
        int k, len = strlen_P(SUBACKMessage );
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(SUBACKMessage  + k);
     ac6:	fe 01       	movw	r30, r28
     ac8:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     aca:	87 ee       	ldi	r24, 0xE7	; 231
     acc:	95 e0       	ldi	r25, 0x05	; 5
     ace:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     ad2:	21 96       	adiw	r28, 0x01	; 1
      }
    case SUBACK:
      {
        int k, len = strlen_P(SUBACKMessage );
        char myChar;
        for (k = 0; k < len; k++)
     ad4:	0c 17       	cp	r16, r28
     ad6:	1d 07       	cpc	r17, r29
     ad8:	b1 f7       	brne	.-20     	; 0xac6 <_ZN8GSM_MQTT16printMessageTypeEh+0x10a>
     ada:	4a c0       	rjmp	.+148    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     adc:	cc ec       	ldi	r28, 0xCC	; 204
     ade:	d1 e0       	ldi	r29, 0x01	; 1
     ae0:	08 ee       	ldi	r16, 0xE8	; 232
     ae2:	11 e0       	ldi	r17, 0x01	; 1
      {
        int k, len = strlen_P(UNSUBSCRIBEMessage );
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(UNSUBSCRIBEMessage  + k);
     ae4:	fe 01       	movw	r30, r28
     ae6:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     ae8:	87 ee       	ldi	r24, 0xE7	; 231
     aea:	95 e0       	ldi	r25, 0x05	; 5
     aec:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     af0:	21 96       	adiw	r28, 0x01	; 1
      }
    case UNSUBSCRIBE:
      {
        int k, len = strlen_P(UNSUBSCRIBEMessage );
        char myChar;
        for (k = 0; k < len; k++)
     af2:	0c 17       	cp	r16, r28
     af4:	1d 07       	cpc	r17, r29
     af6:	b1 f7       	brne	.-20     	; 0xae4 <_ZN8GSM_MQTT16printMessageTypeEh+0x128>
     af8:	3b c0       	rjmp	.+118    	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     afa:	cf ea       	ldi	r28, 0xAF	; 175
     afc:	d1 e0       	ldi	r29, 0x01	; 1
     afe:	0b ec       	ldi	r16, 0xCB	; 203
     b00:	11 e0       	ldi	r17, 0x01	; 1
      {
        int k, len = strlen_P(UNSUBACKMessage );
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(UNSUBACKMessage  + k);
     b02:	fe 01       	movw	r30, r28
     b04:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     b06:	87 ee       	ldi	r24, 0xE7	; 231
     b08:	95 e0       	ldi	r25, 0x05	; 5
     b0a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     b0e:	21 96       	adiw	r28, 0x01	; 1
      }
    case UNSUBACK:
      {
        int k, len = strlen_P(UNSUBACKMessage );
        char myChar;
        for (k = 0; k < len; k++)
     b10:	0c 17       	cp	r16, r28
     b12:	1d 07       	cpc	r17, r29
     b14:	b1 f7       	brne	.-20     	; 0xb02 <_ZN8GSM_MQTT16printMessageTypeEh+0x146>
     b16:	2c c0       	rjmp	.+88     	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     b18:	c0 ea       	ldi	r28, 0xA0	; 160
     b1a:	d1 e0       	ldi	r29, 0x01	; 1
     b1c:	0e ea       	ldi	r16, 0xAE	; 174
     b1e:	11 e0       	ldi	r17, 0x01	; 1
      {
        int k, len = strlen_P(PINGREQMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(PINGREQMessage + k);
     b20:	fe 01       	movw	r30, r28
     b22:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     b24:	87 ee       	ldi	r24, 0xE7	; 231
     b26:	95 e0       	ldi	r25, 0x05	; 5
     b28:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     b2c:	21 96       	adiw	r28, 0x01	; 1
      }
    case PINGREQ:
      {
        int k, len = strlen_P(PINGREQMessage);
        char myChar;
        for (k = 0; k < len; k++)
     b2e:	0c 17       	cp	r16, r28
     b30:	1d 07       	cpc	r17, r29
     b32:	b1 f7       	brne	.-20     	; 0xb20 <_ZN8GSM_MQTT16printMessageTypeEh+0x164>
     b34:	1d c0       	rjmp	.+58     	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     b36:	c0 e9       	ldi	r28, 0x90	; 144
     b38:	d1 e0       	ldi	r29, 0x01	; 1
     b3a:	0f e9       	ldi	r16, 0x9F	; 159
     b3c:	11 e0       	ldi	r17, 0x01	; 1
      {
        int k, len = strlen_P(PINGRESPMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(PINGRESPMessage + k);
     b3e:	fe 01       	movw	r30, r28
     b40:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     b42:	87 ee       	ldi	r24, 0xE7	; 231
     b44:	95 e0       	ldi	r25, 0x05	; 5
     b46:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     b4a:	21 96       	adiw	r28, 0x01	; 1
      }
    case PINGRESP:
      {
        int k, len = strlen_P(PINGRESPMessage);
        char myChar;
        for (k = 0; k < len; k++)
     b4c:	0c 17       	cp	r16, r28
     b4e:	1d 07       	cpc	r17, r29
     b50:	b1 f7       	brne	.-20     	; 0xb3e <_ZN8GSM_MQTT16printMessageTypeEh+0x182>
     b52:	0e c0       	rjmp	.+28     	; 0xb70 <_ZN8GSM_MQTT16printMessageTypeEh+0x1b4>
     b54:	c6 e7       	ldi	r28, 0x76	; 118
     b56:	d1 e0       	ldi	r29, 0x01	; 1
     b58:	0f e8       	ldi	r16, 0x8F	; 143
     b5a:	11 e0       	ldi	r17, 0x01	; 1
      {
        int k, len = strlen_P(DISCONNECTMessage);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(DISCONNECTMessage + k);
     b5c:	fe 01       	movw	r30, r28
     b5e:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     b60:	87 ee       	ldi	r24, 0xE7	; 231
     b62:	95 e0       	ldi	r25, 0x05	; 5
     b64:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     b68:	21 96       	adiw	r28, 0x01	; 1
      }
    case DISCONNECT:
      {
        int k, len = strlen_P(DISCONNECTMessage);
        char myChar;
        for (k = 0; k < len; k++)
     b6a:	0c 17       	cp	r16, r28
     b6c:	1d 07       	cpc	r17, r29
     b6e:	b1 f7       	brne	.-20     	; 0xb5c <_ZN8GSM_MQTT16printMessageTypeEh+0x1a0>
          mySerial.print(myChar);
        }
        break;
      }
  }
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <_ZN8GSM_MQTT15printConnectAckEh>:
const char ConnectAck2[] PROGMEM  = {"Connection Refused: identifier rejected\r\n"};
const char ConnectAck3[] PROGMEM  = {"Connection Refused: server unavailable\r\n"};
const char ConnectAck4[] PROGMEM  = {"Connection Refused: bad user name or password\r\n"};
const char ConnectAck5[] PROGMEM  = {"Connection Refused: not authorized\r\n"};
void GSM_MQTT::printConnectAck(uint8_t Ack)
{
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
  switch (Ack)
     b82:	62 30       	cpi	r22, 0x02	; 2
     b84:	81 f1       	breq	.+96     	; 0xbe6 <_ZN8GSM_MQTT15printConnectAckEh+0x6c>
     b86:	40 f4       	brcc	.+16     	; 0xb98 <_ZN8GSM_MQTT15printConnectAckEh+0x1e>
     b88:	66 23       	and	r22, r22
     b8a:	91 f0       	breq	.+36     	; 0xbb0 <_ZN8GSM_MQTT15printConnectAckEh+0x36>
     b8c:	61 30       	cpi	r22, 0x01	; 1
     b8e:	09 f0       	breq	.+2      	; 0xb92 <_ZN8GSM_MQTT15printConnectAckEh+0x18>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <_ZN8GSM_MQTT15printConnectAckEh+0xd6>
     b92:	cc e2       	ldi	r28, 0x2C	; 44
     b94:	d1 e0       	ldi	r29, 0x01	; 1
     b96:	1b c0       	rjmp	.+54     	; 0xbce <_ZN8GSM_MQTT15printConnectAckEh+0x54>
     b98:	64 30       	cpi	r22, 0x04	; 4
     b9a:	09 f4       	brne	.+2      	; 0xb9e <_ZN8GSM_MQTT15printConnectAckEh+0x24>
     b9c:	40 c0       	rjmp	.+128    	; 0xc1e <_ZN8GSM_MQTT15printConnectAckEh+0xa4>
     b9e:	88 f1       	brcs	.+98     	; 0xc02 <_ZN8GSM_MQTT15printConnectAckEh+0x88>
     ba0:	65 30       	cpi	r22, 0x05	; 5
     ba2:	09 f0       	breq	.+2      	; 0xba6 <_ZN8GSM_MQTT15printConnectAckEh+0x2c>
     ba4:	55 c0       	rjmp	.+170    	; 0xc50 <_ZN8GSM_MQTT15printConnectAckEh+0xd6>
     ba6:	c4 e8       	ldi	r28, 0x84	; 132
     ba8:	d0 e0       	ldi	r29, 0x00	; 0
     baa:	08 ea       	ldi	r16, 0xA8	; 168
     bac:	10 e0       	ldi	r17, 0x00	; 0
     bae:	46 c0       	rjmp	.+140    	; 0xc3c <_ZN8GSM_MQTT15printConnectAckEh+0xc2>
     bb0:	c0 e6       	ldi	r28, 0x60	; 96
     bb2:	d1 e0       	ldi	r29, 0x01	; 1
     bb4:	05 e7       	ldi	r16, 0x75	; 117
     bb6:	11 e0       	ldi	r17, 0x01	; 1
      {
        int k, len = strlen_P(ConnectAck0);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(ConnectAck0 + k);
     bb8:	fe 01       	movw	r30, r28
     bba:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     bbc:	87 ee       	ldi	r24, 0xE7	; 231
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     bc4:	21 96       	adiw	r28, 0x01	; 1
  {
    case 0:
      {
        int k, len = strlen_P(ConnectAck0);
        char myChar;
        for (k = 0; k < len; k++)
     bc6:	0c 17       	cp	r16, r28
     bc8:	1d 07       	cpc	r17, r29
     bca:	b1 f7       	brne	.-20     	; 0xbb8 <_ZN8GSM_MQTT15printConnectAckEh+0x3e>
     bcc:	41 c0       	rjmp	.+130    	; 0xc50 <_ZN8GSM_MQTT15printConnectAckEh+0xd6>
      {
        int k, len = strlen_P(ConnectAck1);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(ConnectAck1 + k);
     bce:	fe 01       	movw	r30, r28
     bd0:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     bd2:	87 ee       	ldi	r24, 0xE7	; 231
     bd4:	95 e0       	ldi	r25, 0x05	; 5
     bd6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     bda:	21 96       	adiw	r28, 0x01	; 1
      }
    case 1:
      {
        int k, len = strlen_P(ConnectAck1);
        char myChar;
        for (k = 0; k < len; k++)
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	cf 35       	cpi	r28, 0x5F	; 95
     be0:	df 07       	cpc	r29, r31
     be2:	a9 f7       	brne	.-22     	; 0xbce <_ZN8GSM_MQTT15printConnectAckEh+0x54>
     be4:	35 c0       	rjmp	.+106    	; 0xc50 <_ZN8GSM_MQTT15printConnectAckEh+0xd6>
     be6:	c2 e0       	ldi	r28, 0x02	; 2
     be8:	d1 e0       	ldi	r29, 0x01	; 1
      {
        int k, len = strlen_P(ConnectAck2);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(ConnectAck2 + k);
     bea:	fe 01       	movw	r30, r28
     bec:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     bee:	87 ee       	ldi	r24, 0xE7	; 231
     bf0:	95 e0       	ldi	r25, 0x05	; 5
     bf2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     bf6:	21 96       	adiw	r28, 0x01	; 1
      }
    case 2:
      {
        int k, len = strlen_P(ConnectAck2);
        char myChar;
        for (k = 0; k < len; k++)
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	cb 32       	cpi	r28, 0x2B	; 43
     bfc:	df 07       	cpc	r29, r31
     bfe:	a9 f7       	brne	.-22     	; 0xbea <_ZN8GSM_MQTT15printConnectAckEh+0x70>
     c00:	27 c0       	rjmp	.+78     	; 0xc50 <_ZN8GSM_MQTT15printConnectAckEh+0xd6>
     c02:	c9 ed       	ldi	r28, 0xD9	; 217
     c04:	d0 e0       	ldi	r29, 0x00	; 0
      {
        int k, len = strlen_P(ConnectAck3);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(ConnectAck3 + k);
     c06:	fe 01       	movw	r30, r28
     c08:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     c0a:	87 ee       	ldi	r24, 0xE7	; 231
     c0c:	95 e0       	ldi	r25, 0x05	; 5
     c0e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     c12:	21 96       	adiw	r28, 0x01	; 1
      }
    case 3:
      {
        int k, len = strlen_P(ConnectAck3);
        char myChar;
        for (k = 0; k < len; k++)
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	c1 30       	cpi	r28, 0x01	; 1
     c18:	df 07       	cpc	r29, r31
     c1a:	a9 f7       	brne	.-22     	; 0xc06 <_ZN8GSM_MQTT15printConnectAckEh+0x8c>
     c1c:	19 c0       	rjmp	.+50     	; 0xc50 <_ZN8GSM_MQTT15printConnectAckEh+0xd6>
     c1e:	c9 ea       	ldi	r28, 0xA9	; 169
     c20:	d0 e0       	ldi	r29, 0x00	; 0
     c22:	08 ed       	ldi	r16, 0xD8	; 216
     c24:	10 e0       	ldi	r17, 0x00	; 0
      {
        int k, len = strlen_P(ConnectAck4);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(ConnectAck4 + k);
     c26:	fe 01       	movw	r30, r28
     c28:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     c2a:	87 ee       	ldi	r24, 0xE7	; 231
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     c32:	21 96       	adiw	r28, 0x01	; 1
      }
    case 4:
      {
        int k, len = strlen_P(ConnectAck4);
        char myChar;
        for (k = 0; k < len; k++)
     c34:	0c 17       	cp	r16, r28
     c36:	1d 07       	cpc	r17, r29
     c38:	b1 f7       	brne	.-20     	; 0xc26 <_ZN8GSM_MQTT15printConnectAckEh+0xac>
     c3a:	0a c0       	rjmp	.+20     	; 0xc50 <_ZN8GSM_MQTT15printConnectAckEh+0xd6>
      {
        int k, len = strlen_P(ConnectAck5);
        char myChar;
        for (k = 0; k < len; k++)
        {
          myChar =  pgm_read_byte_near(ConnectAck5 + k);
     c3c:	fe 01       	movw	r30, r28
     c3e:	64 91       	lpm	r22, Z
          mySerial.print(myChar);
     c40:	87 ee       	ldi	r24, 0xE7	; 231
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
     c48:	21 96       	adiw	r28, 0x01	; 1
      }
    case 5:
      {
        int k, len = strlen_P(ConnectAck5);
        char myChar;
        for (k = 0; k < len; k++)
     c4a:	0c 17       	cp	r16, r28
     c4c:	1d 07       	cpc	r17, r29
     c4e:	b1 f7       	brne	.-20     	; 0xc3c <_ZN8GSM_MQTT15printConnectAckEh+0xc2>
          mySerial.print(myChar);
        }
        break;
      }
  }
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	08 95       	ret

00000c5a <_ZN8GSM_MQTT18_generateMessageIDEv>:
unsigned int GSM_MQTT::_generateMessageID(void)
{
  if (_LastMessaseID < 65535)
     c5a:	fc 01       	movw	r30, r24
     c5c:	e2 58       	subi	r30, 0x82	; 130
     c5e:	fd 4f       	sbci	r31, 0xFD	; 253
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	31 f0       	breq	.+12     	; 0xc74 <_ZN8GSM_MQTT18_generateMessageIDEv+0x1a>
  {
    return ++_LastMessaseID;
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	80 83       	st	Z, r24
     c72:	08 95       	ret
  }
  else
  {
    _LastMessaseID = 0;
     c74:	11 82       	std	Z+1, r1	; 0x01
     c76:	10 82       	st	Z, r1
    return _LastMessaseID;
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
  }
}
     c7c:	08 95       	ret

00000c7e <_ZN8GSM_MQTT9availableEv>:
  }
  _ping();
}
bool GSM_MQTT::available(void)
{
  return MQTT_Flag;
     c7e:	fc 01       	movw	r30, r24
     c80:	86 85       	ldd	r24, Z+14	; 0x0e
}
     c82:	08 95       	ret

00000c84 <_Z11serialEventv>:
void serialEvent()
{
     c84:	2f 92       	push	r2
     c86:	3f 92       	push	r3
     c88:	4f 92       	push	r4
     c8a:	5f 92       	push	r5
     c8c:	6f 92       	push	r6
     c8e:	7f 92       	push	r7
     c90:	8f 92       	push	r8
     c92:	9f 92       	push	r9
     c94:	af 92       	push	r10
     c96:	bf 92       	push	r11
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
          if (ReceivedMessageType == CONNACK)
          {
            MQTT.ConnectionAcknowledgement = MQTT.inputString[0] * 256 + MQTT.inputString[1];
            if (MQTT.ConnectionAcknowledgement == 0)
            {
              MQTT.MQTT_Flag = true;
     ca8:	33 24       	eor	r3, r3
     caa:	33 94       	inc	r3
          MQTT.pingFlag = true;
          MQTT.tcpATerrorcount = 0;
        }
        else if (strstr(MQTT.inputString, "CLOSED") != NULL)
        {
          GSM_Response = 4;
     cac:	a4 e0       	ldi	r26, 0x04	; 4
     cae:	2a 2e       	mov	r2, r26
  return MQTT_Flag;
}
void serialEvent()
{

  while (Serial.available())
     cb0:	82 e1       	ldi	r24, 0x12	; 18
     cb2:	96 e0       	ldi	r25, 0x06	; 6
     cb4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN14HardwareSerial9availableEv>
     cb8:	89 2b       	or	r24, r25
     cba:	09 f4       	brne	.+2      	; 0xcbe <_Z11serialEventv+0x3a>
     cbc:	06 c4       	rjmp	.+2060   	; 0x14ca <_Z11serialEventv+0x846>
  {
    char inChar = (char)Serial.read();
     cbe:	82 e1       	ldi	r24, 0x12	; 18
     cc0:	96 e0       	ldi	r25, 0x06	; 6
     cc2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN14HardwareSerial4readEv>
     cc6:	ec 01       	movw	r28, r24
     cc8:	08 2f       	mov	r16, r24
    if (MQTT.TCP_Flag == false)
     cca:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <MQTT>
     cce:	81 11       	cpse	r24, r1
     cd0:	18 c1       	rjmp	.+560    	; 0xf02 <_Z11serialEventv+0x27e>
    {
      if (MQTT.index < 200)
     cd2:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <MQTT+0x146>
     cd6:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <MQTT+0x147>
     cda:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <MQTT+0x148>
     cde:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <MQTT+0x149>
     ce2:	88 3c       	cpi	r24, 0xC8	; 200
     ce4:	91 05       	cpc	r25, r1
     ce6:	a1 05       	cpc	r26, r1
     ce8:	b1 05       	cpc	r27, r1
     cea:	e0 f4       	brcc	.+56     	; 0xd24 <_Z11serialEventv+0xa0>
      {
        MQTT.inputString[MQTT.index++] = inChar;
     cec:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <MQTT+0x146>
     cf0:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <MQTT+0x147>
     cf4:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <MQTT+0x148>
     cf8:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <MQTT+0x149>
     cfc:	ac 01       	movw	r20, r24
     cfe:	bd 01       	movw	r22, r26
     d00:	4f 5f       	subi	r20, 0xFF	; 255
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	6f 4f       	sbci	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	40 93 a2 04 	sts	0x04A2, r20	; 0x8004a2 <MQTT+0x146>
     d0c:	50 93 a3 04 	sts	0x04A3, r21	; 0x8004a3 <MQTT+0x147>
     d10:	60 93 a4 04 	sts	0x04A4, r22	; 0x8004a4 <MQTT+0x148>
     d14:	70 93 a5 04 	sts	0x04A5, r23	; 0x8004a5 <MQTT+0x149>
     d18:	84 5a       	subi	r24, 0xA4	; 164
     d1a:	9c 4f       	sbci	r25, 0xFC	; 252
     d1c:	fc 01       	movw	r30, r24
     d1e:	ee 5a       	subi	r30, 0xAE	; 174
     d20:	fe 4f       	sbci	r31, 0xFE	; 254
     d22:	c0 83       	st	Z, r28
      }
      if (inChar == '\n')
     d24:	0a 30       	cpi	r16, 0x0A	; 10
     d26:	21 f6       	brne	.-120    	; 0xcb0 <_Z11serialEventv+0x2c>
      {
        MQTT.inputString[MQTT.index] = 0;
     d28:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <MQTT+0x146>
     d2c:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <MQTT+0x147>
     d30:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <MQTT+0x148>
     d34:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <MQTT+0x149>
     d38:	84 5a       	subi	r24, 0xA4	; 164
     d3a:	9c 4f       	sbci	r25, 0xFC	; 252
     d3c:	fc 01       	movw	r30, r24
     d3e:	ee 5a       	subi	r30, 0xAE	; 174
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	10 82       	st	Z, r1
        stringComplete = true;
     d44:	30 92 5a 03 	sts	0x035A, r3	; 0x80035a <__data_end>
        mySerial.print(MQTT.inputString);
     d48:	6e ea       	ldi	r22, 0xAE	; 174
     d4a:	74 e0       	ldi	r23, 0x04	; 4
     d4c:	87 ee       	ldi	r24, 0xE7	; 231
     d4e:	95 e0       	ldi	r25, 0x05	; 5
     d50:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
        if (strstr(MQTT.inputString, MQTT.reply) != NULL)
     d54:	6e e5       	ldi	r22, 0x5E	; 94
     d56:	73 e0       	ldi	r23, 0x03	; 3
     d58:	8e ea       	ldi	r24, 0xAE	; 174
     d5a:	94 e0       	ldi	r25, 0x04	; 4
     d5c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     d60:	89 2b       	or	r24, r25
     d62:	09 f4       	brne	.+2      	; 0xd66 <_Z11serialEventv+0xe2>
     d64:	6b c0       	rjmp	.+214    	; 0xe3c <_Z11serialEventv+0x1b8>
        {
          MQTT.GSM_ReplyFlag = 1;
     d66:	30 92 5d 03 	sts	0x035D, r3	; 0x80035d <MQTT+0x1>
          if (strstr(MQTT.inputString, " INITIAL") != 0)
     d6a:	6d e0       	ldi	r22, 0x0D	; 13
     d6c:	71 e0       	ldi	r23, 0x01	; 1
     d6e:	8e ea       	ldi	r24, 0xAE	; 174
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     d76:	89 2b       	or	r24, r25
     d78:	11 f0       	breq	.+4      	; 0xd7e <_Z11serialEventv+0xfa>
          {
            MQTT.GSM_ReplyFlag = 2; //
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	3f c0       	rjmp	.+126    	; 0xdfc <_Z11serialEventv+0x178>
          }
          else if (strstr(MQTT.inputString, " START") != 0)
     d7e:	66 e1       	ldi	r22, 0x16	; 22
     d80:	71 e0       	ldi	r23, 0x01	; 1
     d82:	8e ea       	ldi	r24, 0xAE	; 174
     d84:	94 e0       	ldi	r25, 0x04	; 4
     d86:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     d8a:	89 2b       	or	r24, r25
     d8c:	11 f0       	breq	.+4      	; 0xd92 <_Z11serialEventv+0x10e>
          {
            MQTT.GSM_ReplyFlag = 3; //
     d8e:	e3 e0       	ldi	r30, 0x03	; 3
     d90:	52 c0       	rjmp	.+164    	; 0xe36 <_Z11serialEventv+0x1b2>
          }
          else if (strstr(MQTT.inputString, "IP CONFIG") != 0)
     d92:	6d e1       	ldi	r22, 0x1D	; 29
     d94:	71 e0       	ldi	r23, 0x01	; 1
     d96:	8e ea       	ldi	r24, 0xAE	; 174
     d98:	94 e0       	ldi	r25, 0x04	; 4
     d9a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     d9e:	89 2b       	or	r24, r25
     da0:	29 f0       	breq	.+10     	; 0xdac <_Z11serialEventv+0x128>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     da2:	fa e1       	ldi	r31, 0x1A	; 26
     da4:	fa 95       	dec	r31
     da6:	f1 f7       	brne	.-4      	; 0xda4 <_Z11serialEventv+0x120>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <_Z11serialEventv+0x126>
     daa:	08 c0       	rjmp	.+16     	; 0xdbc <_Z11serialEventv+0x138>
          {
            _delay_us(10);
            MQTT.GSM_ReplyFlag = 4;
          }
          else if (strstr(MQTT.inputString, " GPRSACT") != 0)
     dac:	67 e2       	ldi	r22, 0x27	; 39
     dae:	71 e0       	ldi	r23, 0x01	; 1
     db0:	8e ea       	ldi	r24, 0xAE	; 174
     db2:	94 e0       	ldi	r25, 0x04	; 4
     db4:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     db8:	89 2b       	or	r24, r25
     dba:	19 f0       	breq	.+6      	; 0xdc2 <_Z11serialEventv+0x13e>
          {
            MQTT.GSM_ReplyFlag = 4; //
     dbc:	20 92 5d 03 	sts	0x035D, r2	; 0x80035d <MQTT+0x1>
     dc0:	95 c0       	rjmp	.+298    	; 0xeec <_Z11serialEventv+0x268>
          }
          else if ((strstr(MQTT.inputString, " STATUS") != 0) || (strstr(MQTT.inputString, "TCP CLOSED") != 0))
     dc2:	60 e3       	ldi	r22, 0x30	; 48
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	8e ea       	ldi	r24, 0xAE	; 174
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     dce:	89 2b       	or	r24, r25
     dd0:	41 f4       	brne	.+16     	; 0xde2 <_Z11serialEventv+0x15e>
     dd2:	68 e3       	ldi	r22, 0x38	; 56
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	8e ea       	ldi	r24, 0xAE	; 174
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     dde:	89 2b       	or	r24, r25
     de0:	21 f0       	breq	.+8      	; 0xdea <_Z11serialEventv+0x166>
          {
            MQTT.GSM_ReplyFlag = 5; //
     de2:	85 e0       	ldi	r24, 0x05	; 5
     de4:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <MQTT+0x1>
     de8:	81 c0       	rjmp	.+258    	; 0xeec <_Z11serialEventv+0x268>
          }
          else if (strstr(MQTT.inputString, " TCP CONNECTING") != 0)
     dea:	63 e4       	ldi	r22, 0x43	; 67
     dec:	71 e0       	ldi	r23, 0x01	; 1
     dee:	8e ea       	ldi	r24, 0xAE	; 174
     df0:	94 e0       	ldi	r25, 0x04	; 4
     df2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     df6:	89 2b       	or	r24, r25
     df8:	21 f0       	breq	.+8      	; 0xe02 <_Z11serialEventv+0x17e>
          {
            MQTT.GSM_ReplyFlag = 6; //
     dfa:	96 e0       	ldi	r25, 0x06	; 6
     dfc:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <MQTT+0x1>
     e00:	75 c0       	rjmp	.+234    	; 0xeec <_Z11serialEventv+0x268>
          }
          else if ((strstr(MQTT.inputString, " CONNECT OK") != 0) || (strstr(MQTT.inputString, "CONNECT FAIL") != NULL) || (strstr(MQTT.inputString, "PDP DEACT") != 0))
     e02:	63 e5       	ldi	r22, 0x53	; 83
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	8e ea       	ldi	r24, 0xAE	; 174
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     e0e:	89 2b       	or	r24, r25
     e10:	89 f4       	brne	.+34     	; 0xe34 <_Z11serialEventv+0x1b0>
     e12:	6f e5       	ldi	r22, 0x5F	; 95
     e14:	71 e0       	ldi	r23, 0x01	; 1
     e16:	8e ea       	ldi	r24, 0xAE	; 174
     e18:	94 e0       	ldi	r25, 0x04	; 4
     e1a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     e1e:	89 2b       	or	r24, r25
     e20:	49 f4       	brne	.+18     	; 0xe34 <_Z11serialEventv+0x1b0>
     e22:	6c e6       	ldi	r22, 0x6C	; 108
     e24:	71 e0       	ldi	r23, 0x01	; 1
     e26:	8e ea       	ldi	r24, 0xAE	; 174
     e28:	94 e0       	ldi	r25, 0x04	; 4
     e2a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     e2e:	89 2b       	or	r24, r25
     e30:	09 f4       	brne	.+2      	; 0xe34 <_Z11serialEventv+0x1b0>
     e32:	5c c0       	rjmp	.+184    	; 0xeec <_Z11serialEventv+0x268>
          {
            MQTT.GSM_ReplyFlag = 7;
     e34:	e7 e0       	ldi	r30, 0x07	; 7
     e36:	e0 93 5d 03 	sts	0x035D, r30	; 0x80035d <MQTT+0x1>
     e3a:	58 c0       	rjmp	.+176    	; 0xeec <_Z11serialEventv+0x268>
          }
        }
        else if (strstr(MQTT.inputString, "OK") != NULL)
     e3c:	6c e5       	ldi	r22, 0x5C	; 92
     e3e:	71 e0       	ldi	r23, 0x01	; 1
     e40:	8e ea       	ldi	r24, 0xAE	; 174
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     e48:	89 2b       	or	r24, r25
     e4a:	19 f0       	breq	.+6      	; 0xe52 <_Z11serialEventv+0x1ce>
        {
          GSM_Response = 1;
     e4c:	30 92 5b 03 	sts	0x035B, r3	; 0x80035b <GSM_Response>
     e50:	4d c0       	rjmp	.+154    	; 0xeec <_Z11serialEventv+0x268>
        }
        else if (strstr(MQTT.inputString, "ERROR") != NULL)
     e52:	66 e7       	ldi	r22, 0x76	; 118
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	8e ea       	ldi	r24, 0xAE	; 174
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     e5e:	89 2b       	or	r24, r25
     e60:	21 f0       	breq	.+8      	; 0xe6a <_Z11serialEventv+0x1e6>
        {
          GSM_Response = 2;
     e62:	f2 e0       	ldi	r31, 0x02	; 2
     e64:	f0 93 5b 03 	sts	0x035B, r31	; 0x80035b <GSM_Response>
     e68:	41 c0       	rjmp	.+130    	; 0xeec <_Z11serialEventv+0x268>
        }
        else if (strstr(MQTT.inputString, ".") != NULL)
     e6a:	6e e2       	ldi	r22, 0x2E	; 46
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	8e ea       	ldi	r24, 0xAE	; 174
     e70:	94 e0       	ldi	r25, 0x04	; 4
     e72:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <strchr>
     e76:	89 2b       	or	r24, r25
     e78:	21 f0       	breq	.+8      	; 0xe82 <_Z11serialEventv+0x1fe>
        {
          GSM_Response = 3;
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <GSM_Response>
     e80:	35 c0       	rjmp	.+106    	; 0xeec <_Z11serialEventv+0x268>
        }
        else if (strstr(MQTT.inputString, "CONNECT FAIL") != NULL)
     e82:	6f e5       	ldi	r22, 0x5F	; 95
     e84:	71 e0       	ldi	r23, 0x01	; 1
     e86:	8e ea       	ldi	r24, 0xAE	; 174
     e88:	94 e0       	ldi	r25, 0x04	; 4
     e8a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     e8e:	89 2b       	or	r24, r25
     e90:	21 f0       	breq	.+8      	; 0xe9a <_Z11serialEventv+0x216>
        {
          GSM_Response = 5;
     e92:	95 e0       	ldi	r25, 0x05	; 5
     e94:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <GSM_Response>
     e98:	29 c0       	rjmp	.+82     	; 0xeec <_Z11serialEventv+0x268>
        }
        else if (strstr(MQTT.inputString, "CONNECT") != NULL)
     e9a:	6c e7       	ldi	r22, 0x7C	; 124
     e9c:	71 e0       	ldi	r23, 0x01	; 1
     e9e:	8e ea       	ldi	r24, 0xAE	; 174
     ea0:	94 e0       	ldi	r25, 0x04	; 4
     ea2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     ea6:	89 2b       	or	r24, r25
     ea8:	99 f0       	breq	.+38     	; 0xed0 <_Z11serialEventv+0x24c>
        {
          GSM_Response = 4;
     eaa:	20 92 5b 03 	sts	0x035B, r2	; 0x80035b <GSM_Response>
          MQTT.TCP_Flag = true;
     eae:	30 92 5c 03 	sts	0x035C, r3	; 0x80035c <MQTT>
          mySerial.println("MQTT.TCP_Flag = True");
     eb2:	64 e8       	ldi	r22, 0x84	; 132
     eb4:	71 e0       	ldi	r23, 0x01	; 1
     eb6:	87 ee       	ldi	r24, 0xE7	; 231
     eb8:	95 e0       	ldi	r25, 0x05	; 5
     eba:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnEPKc>
          MQTT.AutoConnect();
     ebe:	8c e5       	ldi	r24, 0x5C	; 92
     ec0:	93 e0       	ldi	r25, 0x03	; 3
     ec2:	0e 94 9e 0c 	call	0x193c	; 0x193c <_ZN8GSM_MQTT11AutoConnectEv>
          MQTT.pingFlag = true;
     ec6:	30 92 68 03 	sts	0x0368, r3	; 0x800368 <MQTT+0xc>
          MQTT.tcpATerrorcount = 0;
     eca:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <MQTT+0xd>
     ece:	0e c0       	rjmp	.+28     	; 0xeec <_Z11serialEventv+0x268>
        }
        else if (strstr(MQTT.inputString, "CLOSED") != NULL)
     ed0:	6c e3       	ldi	r22, 0x3C	; 60
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	8e ea       	ldi	r24, 0xAE	; 174
     ed6:	94 e0       	ldi	r25, 0x04	; 4
     ed8:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <strstr>
     edc:	89 2b       	or	r24, r25
     ede:	31 f0       	breq	.+12     	; 0xeec <_Z11serialEventv+0x268>
        {
          GSM_Response = 4;
     ee0:	20 92 5b 03 	sts	0x035B, r2	; 0x80035b <GSM_Response>
          MQTT.TCP_Flag = false;
     ee4:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <MQTT>
          MQTT.MQTT_Flag = false;
     ee8:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <MQTT+0xe>
        }
        MQTT.index = 0;
     eec:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <MQTT+0x146>
     ef0:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <MQTT+0x147>
     ef4:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <MQTT+0x148>
     ef8:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <MQTT+0x149>
        MQTT.inputString[0] = 0;
     efc:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <MQTT+0x152>
     f00:	d7 ce       	rjmp	.-594    	; 0xcb0 <_Z11serialEventv+0x2c>
      }
    }
    else
    {
      uint8_t ReceivedMessageType = (inChar / 16) & 0x0F;
     f02:	1c 2f       	mov	r17, r28
     f04:	12 95       	swap	r17
     f06:	1f 70       	andi	r17, 0x0F	; 15
      uint8_t DUP = (inChar & DUP_Mask) / DUP_Mask;
      uint8_t QoS = (inChar & QoS_Mask) / QoS_Scale;
      uint8_t RETAIN = (inChar & RETAIN_Mask);
      if ((ReceivedMessageType >= CONNECT) && (ReceivedMessageType <= DISCONNECT))
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	81 0f       	add	r24, r17
     f0c:	8e 30       	cpi	r24, 0x0E	; 14
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <_Z11serialEventv+0x28e>
     f10:	cf ce       	rjmp	.-610    	; 0xcb0 <_Z11serialEventv+0x2c>
      {
        bool NextLengthByte = true;
        MQTT.length = 0;
     f12:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <MQTT+0x14a>
     f16:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <MQTT+0x14b>
     f1a:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <MQTT+0x14c>
     f1e:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <MQTT+0x14d>
        MQTT.lengthLocal = 0;
     f22:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <MQTT+0x14e>
     f26:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <MQTT+0x14f>
     f2a:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <MQTT+0x150>
     f2e:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <MQTT+0x151>
        uint32_t multiplier=1;
        delay(2);
     f32:	62 e0       	ldi	r22, 0x02	; 2
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <delay>
      if ((ReceivedMessageType >= CONNECT) && (ReceivedMessageType <= DISCONNECT))
      {
        bool NextLengthByte = true;
        MQTT.length = 0;
        MQTT.lengthLocal = 0;
        uint32_t multiplier=1;
     f3e:	81 2c       	mov	r8, r1
     f40:	91 2c       	mov	r9, r1
     f42:	54 01       	movw	r10, r8
     f44:	83 94       	inc	r8
        delay(2);
        char Cchar = inChar;
        while ( (NextLengthByte == true) && (MQTT.TCP_Flag == true))
     f46:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <MQTT>
     f4a:	81 11       	cpse	r24, r1
     f4c:	95 c0       	rjmp	.+298    	; 0x1078 <_Z11serialEventv+0x3f4>
     f4e:	1b c0       	rjmp	.+54     	; 0xf86 <_Z11serialEventv+0x302>
                mySerial.println("More");
              }
              else
              {
                NextLengthByte = false;
                MQTT.length += (inChar & 127) *  multiplier;
     f50:	40 90 a6 04 	lds	r4, 0x04A6	; 0x8004a6 <MQTT+0x14a>
     f54:	50 90 a7 04 	lds	r5, 0x04A7	; 0x8004a7 <MQTT+0x14b>
     f58:	60 90 a8 04 	lds	r6, 0x04A8	; 0x8004a8 <MQTT+0x14c>
     f5c:	70 90 a9 04 	lds	r7, 0x04A9	; 0x8004a9 <MQTT+0x14d>
     f60:	ad 2d       	mov	r26, r13
     f62:	af 77       	andi	r26, 0x7F	; 127
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	a5 01       	movw	r20, r10
     f68:	94 01       	movw	r18, r8
     f6a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
     f6e:	46 0e       	add	r4, r22
     f70:	57 1e       	adc	r5, r23
     f72:	68 1e       	adc	r6, r24
     f74:	79 1e       	adc	r7, r25
     f76:	40 92 a6 04 	sts	0x04A6, r4	; 0x8004a6 <MQTT+0x14a>
     f7a:	50 92 a7 04 	sts	0x04A7, r5	; 0x8004a7 <MQTT+0x14b>
     f7e:	60 92 a8 04 	sts	0x04A8, r6	; 0x8004a8 <MQTT+0x14c>
     f82:	70 92 a9 04 	sts	0x04A9, r7	; 0x8004a9 <MQTT+0x14d>
                multiplier *= 128;
              }
            }
          }
        }
        MQTT.lengthLocal = MQTT.length;
     f86:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <MQTT+0x14a>
     f8a:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <MQTT+0x14b>
     f8e:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <MQTT+0x14c>
     f92:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <MQTT+0x14d>
     f96:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <MQTT+0x14e>
     f9a:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <MQTT+0x14f>
     f9e:	a0 93 ac 04 	sts	0x04AC, r26	; 0x8004ac <MQTT+0x150>
     fa2:	b0 93 ad 04 	sts	0x04AD, r27	; 0x8004ad <MQTT+0x151>
        mySerial.println(MQTT.length);
     fa6:	40 91 a6 04 	lds	r20, 0x04A6	; 0x8004a6 <MQTT+0x14a>
     faa:	50 91 a7 04 	lds	r21, 0x04A7	; 0x8004a7 <MQTT+0x14b>
     fae:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <MQTT+0x14c>
     fb2:	70 91 a9 04 	lds	r23, 0x04A9	; 0x8004a9 <MQTT+0x14d>
     fb6:	2a e0       	ldi	r18, 0x0A	; 10
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	87 ee       	ldi	r24, 0xE7	; 231
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN5Print7printlnEmi>
        if (MQTT.TCP_Flag == true)
     fc2:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <MQTT>
     fc6:	88 23       	and	r24, r24
     fc8:	09 f4       	brne	.+2      	; 0xfcc <_Z11serialEventv+0x348>
     fca:	72 ce       	rjmp	.-796    	; 0xcb0 <_Z11serialEventv+0x2c>
        {
          MQTT.printMessageType(ReceivedMessageType);
     fcc:	61 2f       	mov	r22, r17
     fce:	8c e5       	ldi	r24, 0x5C	; 92
     fd0:	93 e0       	ldi	r25, 0x03	; 3
     fd2:	0e 94 de 04 	call	0x9bc	; 0x9bc <_ZN8GSM_MQTT16printMessageTypeEh>
          MQTT.index = 0L;
     fd6:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <MQTT+0x146>
     fda:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <MQTT+0x147>
     fde:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <MQTT+0x148>
     fe2:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <MQTT+0x149>
          uint32_t a = 0;
          while ((MQTT.length-- > 0) && (Serial.available()))
     fe6:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <MQTT+0x14a>
     fea:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <MQTT+0x14b>
     fee:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <MQTT+0x14c>
     ff2:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <MQTT+0x14d>
     ff6:	ac 01       	movw	r20, r24
     ff8:	bd 01       	movw	r22, r26
     ffa:	41 50       	subi	r20, 0x01	; 1
     ffc:	51 09       	sbc	r21, r1
     ffe:	61 09       	sbc	r22, r1
    1000:	71 09       	sbc	r23, r1
    1002:	40 93 a6 04 	sts	0x04A6, r20	; 0x8004a6 <MQTT+0x14a>
    1006:	50 93 a7 04 	sts	0x04A7, r21	; 0x8004a7 <MQTT+0x14b>
    100a:	60 93 a8 04 	sts	0x04A8, r22	; 0x8004a8 <MQTT+0x14c>
    100e:	70 93 a9 04 	sts	0x04A9, r23	; 0x8004a9 <MQTT+0x14d>
    1012:	89 2b       	or	r24, r25
    1014:	8a 2b       	or	r24, r26
    1016:	8b 2b       	or	r24, r27
    1018:	09 f4       	brne	.+2      	; 0x101c <_Z11serialEventv+0x398>
    101a:	d0 c0       	rjmp	.+416    	; 0x11bc <_Z11serialEventv+0x538>
    101c:	82 e1       	ldi	r24, 0x12	; 18
    101e:	96 e0       	ldi	r25, 0x06	; 6
    1020:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN14HardwareSerial9availableEv>
    1024:	89 2b       	or	r24, r25
    1026:	09 f4       	brne	.+2      	; 0x102a <_Z11serialEventv+0x3a6>
    1028:	c9 c0       	rjmp	.+402    	; 0x11bc <_Z11serialEventv+0x538>
          {
            MQTT.inputString[uint32_t(MQTT.index++)] = (char)Serial.read();
    102a:	c0 90 a2 04 	lds	r12, 0x04A2	; 0x8004a2 <MQTT+0x146>
    102e:	d0 90 a3 04 	lds	r13, 0x04A3	; 0x8004a3 <MQTT+0x147>
    1032:	e0 90 a4 04 	lds	r14, 0x04A4	; 0x8004a4 <MQTT+0x148>
    1036:	f0 90 a5 04 	lds	r15, 0x04A5	; 0x8004a5 <MQTT+0x149>
    103a:	d7 01       	movw	r26, r14
    103c:	c6 01       	movw	r24, r12
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	a1 1d       	adc	r26, r1
    1042:	b1 1d       	adc	r27, r1
    1044:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <MQTT+0x146>
    1048:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <MQTT+0x147>
    104c:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <MQTT+0x148>
    1050:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <MQTT+0x149>
    1054:	82 e1       	ldi	r24, 0x12	; 18
    1056:	96 e0       	ldi	r25, 0x06	; 6
    1058:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN14HardwareSerial4readEv>
    105c:	96 01       	movw	r18, r12
    105e:	24 5a       	subi	r18, 0xA4	; 164
    1060:	3c 4f       	sbci	r19, 0xFC	; 252
    1062:	f9 01       	movw	r30, r18
    1064:	ee 5a       	subi	r30, 0xAE	; 174
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	80 83       	st	Z, r24

            delay(1);
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <delay>
        if (MQTT.TCP_Flag == true)
        {
          MQTT.printMessageType(ReceivedMessageType);
          MQTT.index = 0L;
          uint32_t a = 0;
          while ((MQTT.length-- > 0) && (Serial.available()))
    1076:	b7 cf       	rjmp	.-146    	; 0xfe6 <_Z11serialEventv+0x362>
        uint32_t multiplier=1;
        delay(2);
        char Cchar = inChar;
        while ( (NextLengthByte == true) && (MQTT.TCP_Flag == true))
        {
          if (Serial.available())
    1078:	82 e1       	ldi	r24, 0x12	; 18
    107a:	96 e0       	ldi	r25, 0x06	; 6
    107c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN14HardwareSerial9availableEv>
    1080:	89 2b       	or	r24, r25
    1082:	09 f4       	brne	.+2      	; 0x1086 <_Z11serialEventv+0x402>
    1084:	60 cf       	rjmp	.-320    	; 0xf46 <_Z11serialEventv+0x2c2>
          {
            inChar = (char)Serial.read();
    1086:	82 e1       	ldi	r24, 0x12	; 18
    1088:	96 e0       	ldi	r25, 0x06	; 6
    108a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN14HardwareSerial4readEv>
    108e:	7c 01       	movw	r14, r24
    1090:	d8 2e       	mov	r13, r24
            mySerial.println(inChar, DEC);
    1092:	bc 01       	movw	r22, r24
    1094:	77 27       	eor	r23, r23
    1096:	4a e0       	ldi	r20, 0x0A	; 10
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	87 ee       	ldi	r24, 0xE7	; 231
    109c:	95 e0       	ldi	r25, 0x05	; 5
    109e:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN5Print7printlnEii>
            if ((((Cchar & 0xFF) == 'C') && ((inChar & 0xFF) == 'L') && (MQTT.length == 0)) || (((Cchar & 0xFF) == '+') && ((inChar & 0xFF) == 'P') && (MQTT.length == 0)))
    10a2:	03 34       	cpi	r16, 0x43	; 67
    10a4:	21 f4       	brne	.+8      	; 0x10ae <_Z11serialEventv+0x42a>
    10a6:	ec e4       	ldi	r30, 0x4C	; 76
    10a8:	ee 12       	cpse	r14, r30
    10aa:	61 c0       	rjmp	.+194    	; 0x116e <_Z11serialEventv+0x4ea>
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <_Z11serialEventv+0x436>
    10ae:	0b 32       	cpi	r16, 0x2B	; 43
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <_Z11serialEventv+0x430>
    10b2:	5d c0       	rjmp	.+186    	; 0x116e <_Z11serialEventv+0x4ea>
    10b4:	f0 e5       	ldi	r31, 0x50	; 80
    10b6:	ef 12       	cpse	r14, r31
    10b8:	5a c0       	rjmp	.+180    	; 0x116e <_Z11serialEventv+0x4ea>
    10ba:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <MQTT+0x14a>
    10be:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <MQTT+0x14b>
    10c2:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <MQTT+0x14c>
    10c6:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <MQTT+0x14d>
    10ca:	89 2b       	or	r24, r25
    10cc:	8a 2b       	or	r24, r26
    10ce:	8b 2b       	or	r24, r27
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <_Z11serialEventv+0x450>
    10d2:	4d c0       	rjmp	.+154    	; 0x116e <_Z11serialEventv+0x4ea>
            {
              MQTT.index = 0;
    10d4:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <MQTT+0x146>
    10d8:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <MQTT+0x147>
    10dc:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <MQTT+0x148>
    10e0:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <MQTT+0x149>
              MQTT.inputString[MQTT.index++] = Cchar;
    10e4:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <MQTT+0x146>
    10e8:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <MQTT+0x147>
    10ec:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <MQTT+0x148>
    10f0:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <MQTT+0x149>
    10f4:	ac 01       	movw	r20, r24
    10f6:	bd 01       	movw	r22, r26
    10f8:	4f 5f       	subi	r20, 0xFF	; 255
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
    10fc:	6f 4f       	sbci	r22, 0xFF	; 255
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	40 93 a2 04 	sts	0x04A2, r20	; 0x8004a2 <MQTT+0x146>
    1104:	50 93 a3 04 	sts	0x04A3, r21	; 0x8004a3 <MQTT+0x147>
    1108:	60 93 a4 04 	sts	0x04A4, r22	; 0x8004a4 <MQTT+0x148>
    110c:	70 93 a5 04 	sts	0x04A5, r23	; 0x8004a5 <MQTT+0x149>
    1110:	fc 01       	movw	r30, r24
    1112:	e4 5a       	subi	r30, 0xA4	; 164
    1114:	fc 4f       	sbci	r31, 0xFC	; 252
    1116:	ee 5a       	subi	r30, 0xAE	; 174
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	00 83       	st	Z, r16
              MQTT.inputString[MQTT.index++] = inChar;
    111c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <MQTT+0x146>
    1120:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <MQTT+0x147>
    1124:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <MQTT+0x148>
    1128:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <MQTT+0x149>
    112c:	ac 01       	movw	r20, r24
    112e:	bd 01       	movw	r22, r26
    1130:	4f 5f       	subi	r20, 0xFF	; 255
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	6f 4f       	sbci	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	40 93 a2 04 	sts	0x04A2, r20	; 0x8004a2 <MQTT+0x146>
    113c:	50 93 a3 04 	sts	0x04A3, r21	; 0x8004a3 <MQTT+0x147>
    1140:	60 93 a4 04 	sts	0x04A4, r22	; 0x8004a4 <MQTT+0x148>
    1144:	70 93 a5 04 	sts	0x04A5, r23	; 0x8004a5 <MQTT+0x149>
    1148:	fc 01       	movw	r30, r24
    114a:	e4 5a       	subi	r30, 0xA4	; 164
    114c:	fc 4f       	sbci	r31, 0xFC	; 252
    114e:	ee 5a       	subi	r30, 0xAE	; 174
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	e0 82       	st	Z, r14
              MQTT.TCP_Flag = false;
    1154:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <MQTT>
              MQTT.MQTT_Flag = false;
    1158:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <MQTT+0xe>
              MQTT.pingFlag = false;
    115c:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <MQTT+0xc>
              mySerial.println("Disconnecting");
    1160:	62 ec       	ldi	r22, 0xC2	; 194
    1162:	71 e0       	ldi	r23, 0x01	; 1
    1164:	87 ee       	ldi	r24, 0xE7	; 231
    1166:	95 e0       	ldi	r25, 0x05	; 5
    1168:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnEPKc>
    116c:	ec ce       	rjmp	.-552    	; 0xf46 <_Z11serialEventv+0x2c2>
            }
            else
            {
              if ((inChar & 128) == 128)
    116e:	e7 fe       	sbrs	r14, 7
    1170:	ef ce       	rjmp	.-546    	; 0xf50 <_Z11serialEventv+0x2cc>
              {
                MQTT.length += (inChar & 127) *  multiplier;
    1172:	40 90 a6 04 	lds	r4, 0x04A6	; 0x8004a6 <MQTT+0x14a>
    1176:	50 90 a7 04 	lds	r5, 0x04A7	; 0x8004a7 <MQTT+0x14b>
    117a:	60 90 a8 04 	lds	r6, 0x04A8	; 0x8004a8 <MQTT+0x14c>
    117e:	70 90 a9 04 	lds	r7, 0x04A9	; 0x8004a9 <MQTT+0x14d>
    1182:	ae 2d       	mov	r26, r14
    1184:	af 77       	andi	r26, 0x7F	; 127
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	a5 01       	movw	r20, r10
    118a:	94 01       	movw	r18, r8
    118c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
    1190:	46 0e       	add	r4, r22
    1192:	57 1e       	adc	r5, r23
    1194:	68 1e       	adc	r6, r24
    1196:	79 1e       	adc	r7, r25
    1198:	40 92 a6 04 	sts	0x04A6, r4	; 0x8004a6 <MQTT+0x14a>
    119c:	50 92 a7 04 	sts	0x04A7, r5	; 0x8004a7 <MQTT+0x14b>
    11a0:	60 92 a8 04 	sts	0x04A8, r6	; 0x8004a8 <MQTT+0x14c>
    11a4:	70 92 a9 04 	sts	0x04A9, r7	; 0x8004a9 <MQTT+0x14d>
                multiplier *= 128;
    11a8:	e7 e0       	ldi	r30, 0x07	; 7
    11aa:	88 0c       	add	r8, r8
    11ac:	99 1c       	adc	r9, r9
    11ae:	aa 1c       	adc	r10, r10
    11b0:	bb 1c       	adc	r11, r11
    11b2:	ea 95       	dec	r30
    11b4:	d1 f7       	brne	.-12     	; 0x11aa <_Z11serialEventv+0x526>
                mySerial.println("More");
    11b6:	69 e9       	ldi	r22, 0x99	; 153
    11b8:	71 e0       	ldi	r23, 0x01	; 1
    11ba:	d4 cf       	rjmp	.-88     	; 0x1164 <_Z11serialEventv+0x4e0>
            MQTT.inputString[uint32_t(MQTT.index++)] = (char)Serial.read();

            delay(1);

          }
          mySerial.println(" ");
    11bc:	6f ed       	ldi	r22, 0xDF	; 223
    11be:	71 e0       	ldi	r23, 0x01	; 1
    11c0:	87 ee       	ldi	r24, 0xE7	; 231
    11c2:	95 e0       	ldi	r25, 0x05	; 5
    11c4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnEPKc>
          if (ReceivedMessageType == CONNACK)
    11c8:	12 30       	cpi	r17, 0x02	; 2
    11ca:	11 f5       	brne	.+68     	; 0x1210 <_Z11serialEventv+0x58c>
          {
            MQTT.ConnectionAcknowledgement = MQTT.inputString[0] * 256 + MQTT.inputString[1];
    11cc:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <MQTT+0x152>
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	98 2f       	mov	r25, r24
    11d4:	88 27       	eor	r24, r24
    11d6:	20 91 af 04 	lds	r18, 0x04AF	; 0x8004af <MQTT+0x153>
    11da:	82 0f       	add	r24, r18
    11dc:	91 1d       	adc	r25, r1
    11de:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <MQTT+0x10>
    11e2:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <MQTT+0xf>
            if (MQTT.ConnectionAcknowledgement == 0)
    11e6:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <MQTT+0xf>
    11ea:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <MQTT+0x10>
    11ee:	89 2b       	or	r24, r25
    11f0:	31 f4       	brne	.+12     	; 0x11fe <_Z11serialEventv+0x57a>
            {
              MQTT.MQTT_Flag = true;
    11f2:	30 92 6a 03 	sts	0x036A, r3	; 0x80036a <MQTT+0xe>
              MQTT.OnConnect();
    11f6:	8c e5       	ldi	r24, 0x5C	; 92
    11f8:	93 e0       	ldi	r25, 0x03	; 3
    11fa:	0e 94 c6 0c 	call	0x198c	; 0x198c <_ZN8GSM_MQTT9OnConnectEv>

            }

            MQTT.printConnectAck(MQTT.ConnectionAcknowledgement);
    11fe:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <MQTT+0xf>
    1202:	70 91 6c 03 	lds	r23, 0x036C	; 0x80036c <MQTT+0x10>
    1206:	8c e5       	ldi	r24, 0x5C	; 92
    1208:	93 e0       	ldi	r25, 0x03	; 3
    120a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN8GSM_MQTT15printConnectAckEh>
    120e:	50 cd       	rjmp	.-1376   	; 0xcb0 <_Z11serialEventv+0x2c>
            // MQTT.OnConnect();
          }
          else if (ReceivedMessageType == PUBLISH)
    1210:	13 30       	cpi	r17, 0x03	; 3
    1212:	09 f0       	breq	.+2      	; 0x1216 <_Z11serialEventv+0x592>
    1214:	f3 c0       	rjmp	.+486    	; 0x13fc <_Z11serialEventv+0x778>
          {
            uint32_t TopicLength = (MQTT.inputString[0]) * 256 + (MQTT.inputString[1]);
    1216:	80 90 ae 04 	lds	r8, 0x04AE	; 0x8004ae <MQTT+0x152>
    121a:	91 2c       	mov	r9, r1
    121c:	98 2c       	mov	r9, r8
    121e:	88 24       	eor	r8, r8
    1220:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <MQTT+0x153>
    1224:	88 0e       	add	r8, r24
    1226:	91 1c       	adc	r9, r1
    1228:	09 2c       	mov	r0, r9
    122a:	00 0c       	add	r0, r0
    122c:	aa 08       	sbc	r10, r10
    122e:	bb 08       	sbc	r11, r11
            mySerial.print("Topic : '");
    1230:	6e e9       	ldi	r22, 0x9E	; 158
    1232:	71 e0       	ldi	r23, 0x01	; 1
    1234:	87 ee       	ldi	r24, 0xE7	; 231
    1236:	95 e0       	ldi	r25, 0x05	; 5
    1238:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
            MQTT.PublishIndex = 0;
    123c:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <MQTT+0x12>
    1240:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <MQTT+0x11>
    1244:	00 eb       	ldi	r16, 0xB0	; 176
    1246:	14 e0       	ldi	r17, 0x04	; 4
            for (uint32_t iter = 2; iter < TopicLength + 2; iter++)
    1248:	62 e0       	ldi	r22, 0x02	; 2
    124a:	46 2e       	mov	r4, r22
    124c:	51 2c       	mov	r5, r1
    124e:	61 2c       	mov	r6, r1
    1250:	71 2c       	mov	r7, r1
    1252:	75 01       	movw	r14, r10
    1254:	64 01       	movw	r12, r8
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	c8 0e       	add	r12, r24
    125a:	d1 1c       	adc	r13, r1
    125c:	e1 1c       	adc	r14, r1
    125e:	f1 1c       	adc	r15, r1
    1260:	4c 14       	cp	r4, r12
    1262:	5d 04       	cpc	r5, r13
    1264:	6e 04       	cpc	r6, r14
    1266:	7f 04       	cpc	r7, r15
    1268:	f0 f4       	brcc	.+60     	; 0x12a6 <_Z11serialEventv+0x622>
            {
              mySerial.print(MQTT.inputString[iter]);
    126a:	f8 01       	movw	r30, r16
    126c:	60 81       	ld	r22, Z
    126e:	87 ee       	ldi	r24, 0xE7	; 231
    1270:	95 e0       	ldi	r25, 0x05	; 5
    1272:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
              MQTT.Topic[MQTT.PublishIndex++] = MQTT.inputString[iter];
    1276:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <MQTT+0x11>
    127a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <MQTT+0x12>
    127e:	9c 01       	movw	r18, r24
    1280:	2f 5f       	subi	r18, 0xFF	; 255
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	30 93 6e 03 	sts	0x036E, r19	; 0x80036e <MQTT+0x12>
    1288:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <MQTT+0x11>
    128c:	f8 01       	movw	r30, r16
    128e:	21 91       	ld	r18, Z+
    1290:	8f 01       	movw	r16, r30
    1292:	fc 01       	movw	r30, r24
    1294:	e4 5a       	subi	r30, 0xA4	; 164
    1296:	fc 4f       	sbci	r31, 0xFC	; 252
    1298:	23 8b       	std	Z+19, r18	; 0x13
          else if (ReceivedMessageType == PUBLISH)
          {
            uint32_t TopicLength = (MQTT.inputString[0]) * 256 + (MQTT.inputString[1]);
            mySerial.print("Topic : '");
            MQTT.PublishIndex = 0;
            for (uint32_t iter = 2; iter < TopicLength + 2; iter++)
    129a:	ff ef       	ldi	r31, 0xFF	; 255
    129c:	4f 1a       	sub	r4, r31
    129e:	5f 0a       	sbc	r5, r31
    12a0:	6f 0a       	sbc	r6, r31
    12a2:	7f 0a       	sbc	r7, r31
    12a4:	d6 cf       	rjmp	.-84     	; 0x1252 <_Z11serialEventv+0x5ce>
    }
    else
    {
      uint8_t ReceivedMessageType = (inChar / 16) & 0x0F;
      uint8_t DUP = (inChar & DUP_Mask) / DUP_Mask;
      uint8_t QoS = (inChar & QoS_Mask) / QoS_Scale;
    12a6:	c6 70       	andi	r28, 0x06	; 6
    12a8:	dd 27       	eor	r29, r29
    12aa:	d5 95       	asr	r29
    12ac:	c7 95       	ror	r28
    12ae:	7c 2e       	mov	r7, r28
            for (uint32_t iter = 2; iter < TopicLength + 2; iter++)
            {
              mySerial.print(MQTT.inputString[iter]);
              MQTT.Topic[MQTT.PublishIndex++] = MQTT.inputString[iter];
            }
            MQTT.Topic[MQTT.PublishIndex] = 0;
    12b0:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <MQTT+0x11>
    12b4:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <MQTT+0x12>
    12b8:	e4 5a       	subi	r30, 0xA4	; 164
    12ba:	fc 4f       	sbci	r31, 0xFC	; 252
    12bc:	13 8a       	std	Z+19, r1	; 0x13
            mySerial.print("' Message :'");
    12be:	68 ea       	ldi	r22, 0xA8	; 168
    12c0:	71 e0       	ldi	r23, 0x01	; 1
    12c2:	87 ee       	ldi	r24, 0xE7	; 231
    12c4:	95 e0       	ldi	r25, 0x05	; 5
    12c6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
            MQTT.TopicLength = MQTT.PublishIndex;
    12ca:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <MQTT+0x11>
    12ce:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <MQTT+0x12>
    12d2:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <MQTT+0x46>
    12d6:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <MQTT+0x45>

            MQTT.PublishIndex = 0;
    12da:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <MQTT+0x12>
    12de:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <MQTT+0x11>
            uint32_t MessageSTART = TopicLength + 2UL;
            int MessageID = 0;
            if (QoS != 0)
    12e2:	cc 23       	and	r28, r28
    12e4:	f9 f0       	breq	.+62     	; 0x1324 <_Z11serialEventv+0x6a0>
            {
              MessageSTART += 2;
              MessageID = MQTT.inputString[TopicLength + 2UL] * 256 + MQTT.inputString[TopicLength + 3UL];
    12e6:	c6 01       	movw	r24, r12
    12e8:	84 5a       	subi	r24, 0xA4	; 164
    12ea:	9c 4f       	sbci	r25, 0xFC	; 252
    12ec:	fc 01       	movw	r30, r24
    12ee:	ee 5a       	subi	r30, 0xAE	; 174
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	00 81       	ld	r16, Z
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	10 2f       	mov	r17, r16
    12f8:	00 27       	eor	r16, r16
    12fa:	d5 01       	movw	r26, r10
    12fc:	c4 01       	movw	r24, r8
    12fe:	03 96       	adiw	r24, 0x03	; 3
    1300:	a1 1d       	adc	r26, r1
    1302:	b1 1d       	adc	r27, r1
    1304:	fc 01       	movw	r30, r24
    1306:	e4 5a       	subi	r30, 0xA4	; 164
    1308:	fc 4f       	sbci	r31, 0xFC	; 252
    130a:	ee 5a       	subi	r30, 0xAE	; 174
    130c:	fe 4f       	sbci	r31, 0xFE	; 254
    130e:	80 81       	ld	r24, Z
    1310:	08 0f       	add	r16, r24
    1312:	11 1d       	adc	r17, r1
            MQTT.PublishIndex = 0;
            uint32_t MessageSTART = TopicLength + 2UL;
            int MessageID = 0;
            if (QoS != 0)
            {
              MessageSTART += 2;
    1314:	75 01       	movw	r14, r10
    1316:	64 01       	movw	r12, r8
    1318:	84 e0       	ldi	r24, 0x04	; 4
    131a:	c8 0e       	add	r12, r24
    131c:	d1 1c       	adc	r13, r1
    131e:	e1 1c       	adc	r14, r1
    1320:	f1 1c       	adc	r15, r1
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <_Z11serialEventv+0x6a4>
            mySerial.print("' Message :'");
            MQTT.TopicLength = MQTT.PublishIndex;

            MQTT.PublishIndex = 0;
            uint32_t MessageSTART = TopicLength + 2UL;
            int MessageID = 0;
    1324:	00 e0       	ldi	r16, 0x00	; 0
    1326:	10 e0       	ldi	r17, 0x00	; 0
    1328:	e6 01       	movw	r28, r12
    132a:	ce 5a       	subi	r28, 0xAE	; 174
    132c:	de 4f       	sbci	r29, 0xFE	; 254
    132e:	c4 5a       	subi	r28, 0xA4	; 164
    1330:	dc 4f       	sbci	r29, 0xFC	; 252
            if (QoS != 0)
            {
              MessageSTART += 2;
              MessageID = MQTT.inputString[TopicLength + 2UL] * 256 + MQTT.inputString[TopicLength + 3UL];
            }
            for (uint32_t iter = (MessageSTART); iter < (MQTT.lengthLocal); iter++)
    1332:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <MQTT+0x14e>
    1336:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <MQTT+0x14f>
    133a:	a0 91 ac 04 	lds	r26, 0x04AC	; 0x8004ac <MQTT+0x150>
    133e:	b0 91 ad 04 	lds	r27, 0x04AD	; 0x8004ad <MQTT+0x151>
    1342:	c8 16       	cp	r12, r24
    1344:	d9 06       	cpc	r13, r25
    1346:	ea 06       	cpc	r14, r26
    1348:	fb 06       	cpc	r15, r27
    134a:	d8 f4       	brcc	.+54     	; 0x1382 <_Z11serialEventv+0x6fe>
            {
              mySerial.print(MQTT.inputString[iter]);
    134c:	68 81       	ld	r22, Y
    134e:	87 ee       	ldi	r24, 0xE7	; 231
    1350:	95 e0       	ldi	r25, 0x05	; 5
    1352:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
              MQTT.Message[MQTT.PublishIndex++] = MQTT.inputString[iter];
    1356:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <MQTT+0x11>
    135a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <MQTT+0x12>
    135e:	9c 01       	movw	r18, r24
    1360:	2f 5f       	subi	r18, 0xFF	; 255
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	30 93 6e 03 	sts	0x036E, r19	; 0x80036e <MQTT+0x12>
    1368:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <MQTT+0x11>
    136c:	29 91       	ld	r18, Y+
    136e:	fc 01       	movw	r30, r24
    1370:	ed 55       	subi	r30, 0x5D	; 93
    1372:	fc 4f       	sbci	r31, 0xFC	; 252
    1374:	20 83       	st	Z, r18
            if (QoS != 0)
            {
              MessageSTART += 2;
              MessageID = MQTT.inputString[TopicLength + 2UL] * 256 + MQTT.inputString[TopicLength + 3UL];
            }
            for (uint32_t iter = (MessageSTART); iter < (MQTT.lengthLocal); iter++)
    1376:	9f ef       	ldi	r25, 0xFF	; 255
    1378:	c9 1a       	sub	r12, r25
    137a:	d9 0a       	sbc	r13, r25
    137c:	e9 0a       	sbc	r14, r25
    137e:	f9 0a       	sbc	r15, r25
    1380:	d8 cf       	rjmp	.-80     	; 0x1332 <_Z11serialEventv+0x6ae>
            {
              mySerial.print(MQTT.inputString[iter]);
              MQTT.Message[MQTT.PublishIndex++] = MQTT.inputString[iter];
            }
            MQTT.Message[MQTT.PublishIndex] = 0;
    1382:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <MQTT+0x11>
    1386:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <MQTT+0x12>
    138a:	ed 55       	subi	r30, 0x5D	; 93
    138c:	fc 4f       	sbci	r31, 0xFC	; 252
    138e:	10 82       	st	Z, r1
            mySerial.println("'");
    1390:	66 ea       	ldi	r22, 0xA6	; 166
    1392:	71 e0       	ldi	r23, 0x01	; 1
    1394:	87 ee       	ldi	r24, 0xE7	; 231
    1396:	95 e0       	ldi	r25, 0x05	; 5
    1398:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnEPKc>
            MQTT.MessageLength = MQTT.PublishIndex;
    139c:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <MQTT+0x11>
    13a0:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <MQTT+0x12>
    13a4:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <MQTT+0x142>
    13a8:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <MQTT+0x141>
            if (QoS == 1)
    13ac:	e1 e0       	ldi	r30, 0x01	; 1
    13ae:	7e 12       	cpse	r7, r30
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <_Z11serialEventv+0x73a>
            {
              MQTT.publishACK(MessageID);
    13b2:	b8 01       	movw	r22, r16
    13b4:	8c e5       	ldi	r24, 0x5C	; 92
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    13b8:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN8GSM_MQTT10publishACKEj>
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <_Z11serialEventv+0x74a>
            }
            else if (QoS == 2)
    13be:	f2 e0       	ldi	r31, 0x02	; 2
    13c0:	7f 12       	cpse	r7, r31
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <_Z11serialEventv+0x74a>
            {
              MQTT.publishREC(MessageID);
    13c4:	b8 01       	movw	r22, r16
    13c6:	8c e5       	ldi	r24, 0x5C	; 92
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	0e 94 48 04 	call	0x890	; 0x890 <_ZN8GSM_MQTT10publishRECEj>
            }
            MQTT.OnMessage(MQTT.Topic, MQTT.TopicLength, MQTT.Message, MQTT.MessageLength);
    13ce:	00 91 9d 04 	lds	r16, 0x049D	; 0x80049d <MQTT+0x141>
    13d2:	10 91 9e 04 	lds	r17, 0x049E	; 0x80049e <MQTT+0x142>
    13d6:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <MQTT+0x45>
    13da:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <MQTT+0x46>
    13de:	23 ea       	ldi	r18, 0xA3	; 163
    13e0:	33 e0       	ldi	r19, 0x03	; 3
    13e2:	6f e6       	ldi	r22, 0x6F	; 111
    13e4:	73 e0       	ldi	r23, 0x03	; 3
    13e6:	8c e5       	ldi	r24, 0x5C	; 92
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <_ZN8GSM_MQTT9OnMessageEPciS0_i>
            MQTT.MessageFlag = true;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <MQTT+0x144>
    13f6:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <MQTT+0x143>
    13fa:	5a cc       	rjmp	.-1868   	; 0xcb0 <_Z11serialEventv+0x2c>
          }
          else if (ReceivedMessageType == PUBREC)
    13fc:	15 30       	cpi	r17, 0x05	; 5
    13fe:	a9 f4       	brne	.+42     	; 0x142a <_Z11serialEventv+0x7a6>
          {
            mySerial.print("Message ID :");
    1400:	65 eb       	ldi	r22, 0xB5	; 181
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	87 ee       	ldi	r24, 0xE7	; 231
    1406:	95 e0       	ldi	r25, 0x05	; 5
    1408:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
            MQTT.publishREL(0, MQTT.inputString[0] * 256 + MQTT.inputString[1]) ;
    140c:	40 91 ae 04 	lds	r20, 0x04AE	; 0x8004ae <MQTT+0x152>
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	54 2f       	mov	r21, r20
    1414:	44 27       	eor	r20, r20
    1416:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <MQTT+0x153>
    141a:	48 0f       	add	r20, r24
    141c:	51 1d       	adc	r21, r1
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	8c e5       	ldi	r24, 0x5C	; 92
    1422:	93 e0       	ldi	r25, 0x03	; 3
    1424:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN8GSM_MQTT10publishRELEcj>
    1428:	24 c0       	rjmp	.+72     	; 0x1472 <_Z11serialEventv+0x7ee>
            mySerial.println(MQTT.inputString[0] * 256 + MQTT.inputString[1]) ;

          }
          else if (ReceivedMessageType == PUBREL)
    142a:	16 30       	cpi	r17, 0x06	; 6
    142c:	a1 f4       	brne	.+40     	; 0x1456 <_Z11serialEventv+0x7d2>
          {
            mySerial.print("Message ID :");
    142e:	65 eb       	ldi	r22, 0xB5	; 181
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	87 ee       	ldi	r24, 0xE7	; 231
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
            MQTT.publishCOMP(MQTT.inputString[0] * 256 + MQTT.inputString[1]) ;
    143a:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <MQTT+0x152>
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	76 2f       	mov	r23, r22
    1442:	66 27       	eor	r22, r22
    1444:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <MQTT+0x153>
    1448:	68 0f       	add	r22, r24
    144a:	71 1d       	adc	r23, r1
    144c:	8c e5       	ldi	r24, 0x5C	; 92
    144e:	93 e0       	ldi	r25, 0x03	; 3
    1450:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN8GSM_MQTT11publishCOMPEj>
    1454:	0e c0       	rjmp	.+28     	; 0x1472 <_Z11serialEventv+0x7ee>
            mySerial.println(MQTT.inputString[0] * 256 + MQTT.inputString[1]) ;

          }
          else if ((ReceivedMessageType == PUBACK) || (ReceivedMessageType == PUBCOMP) || (ReceivedMessageType == SUBACK) || (ReceivedMessageType == UNSUBACK))
    1456:	14 30       	cpi	r17, 0x04	; 4
    1458:	31 f0       	breq	.+12     	; 0x1466 <_Z11serialEventv+0x7e2>
    145a:	17 30       	cpi	r17, 0x07	; 7
    145c:	21 f0       	breq	.+8      	; 0x1466 <_Z11serialEventv+0x7e2>
    145e:	81 2f       	mov	r24, r17
    1460:	8d 7f       	andi	r24, 0xFD	; 253
    1462:	89 30       	cpi	r24, 0x09	; 9
    1464:	b1 f4       	brne	.+44     	; 0x1492 <_Z11serialEventv+0x80e>
          {
            mySerial.print("Message ID :");
    1466:	65 eb       	ldi	r22, 0xB5	; 181
    1468:	71 e0       	ldi	r23, 0x01	; 1
    146a:	87 ee       	ldi	r24, 0xE7	; 231
    146c:	95 e0       	ldi	r25, 0x05	; 5
    146e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
            mySerial.println(MQTT.inputString[0] * 256 + MQTT.inputString[1]) ;
    1472:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <MQTT+0x152>
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	76 2f       	mov	r23, r22
    147a:	66 27       	eor	r22, r22
    147c:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <MQTT+0x153>
    1480:	68 0f       	add	r22, r24
    1482:	71 1d       	adc	r23, r1
    1484:	4a e0       	ldi	r20, 0x0A	; 10
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	87 ee       	ldi	r24, 0xE7	; 231
    148a:	95 e0       	ldi	r25, 0x05	; 5
    148c:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN5Print7printlnEii>
    1490:	0f cc       	rjmp	.-2018   	; 0xcb0 <_Z11serialEventv+0x2c>
          }
          else if (ReceivedMessageType == PINGREQ)
    1492:	1c 30       	cpi	r17, 0x0C	; 12
    1494:	09 f0       	breq	.+2      	; 0x1498 <_Z11serialEventv+0x814>
    1496:	0c cc       	rjmp	.-2024   	; 0xcb0 <_Z11serialEventv+0x2c>
          {
            MQTT.TCP_Flag = false;
    1498:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <MQTT>
            MQTT.pingFlag = false;
    149c:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <MQTT+0xc>
            mySerial.println("Disconnecting");
    14a0:	62 ec       	ldi	r22, 0xC2	; 194
    14a2:	71 e0       	ldi	r23, 0x01	; 1
    14a4:	87 ee       	ldi	r24, 0xE7	; 231
    14a6:	95 e0       	ldi	r25, 0x05	; 5
    14a8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnEPKc>
            MQTT.sendATreply("AT+CIPSHUT\r\n", ".", 4000) ;
    14ac:	00 ea       	ldi	r16, 0xA0	; 160
    14ae:	1f e0       	ldi	r17, 0x0F	; 15
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 ed       	ldi	r20, 0xD0	; 208
    14b6:	51 e0       	ldi	r21, 0x01	; 1
    14b8:	62 ed       	ldi	r22, 0xD2	; 210
    14ba:	71 e0       	ldi	r23, 0x01	; 1
    14bc:	8c e5       	ldi	r24, 0x5C	; 92
    14be:	93 e0       	ldi	r25, 0x03	; 3
    14c0:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN8GSM_MQTT11sendATreplyEPcS0_m>
            MQTT.modemStatus = 0;
    14c4:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <MQTT+0x145>
    14c8:	f3 cb       	rjmp	.-2074   	; 0xcb0 <_Z11serialEventv+0x2c>
        mySerial.print("Received :Unknown Message Type :");
        mySerial.println(inChar);
      }
    }
  }
}
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	7f 90       	pop	r7
    14e4:	6f 90       	pop	r6
    14e6:	5f 90       	pop	r5
    14e8:	4f 90       	pop	r4
    14ea:	3f 90       	pop	r3
    14ec:	2f 90       	pop	r2
    14ee:	08 95       	ret

000014f0 <_ZN8GSM_MQTT7_sendATEPcm>:
  Serial.write("AT\r\n");
  delay(1000);
  _tcpInit();
}
char GSM_MQTT::_sendAT(char *command, unsigned long waitms)
{
    14f0:	8f 92       	push	r8
    14f2:	9f 92       	push	r9
    14f4:	af 92       	push	r10
    14f6:	bf 92       	push	r11
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	8c 01       	movw	r16, r24
    150a:	eb 01       	movw	r28, r22
    150c:	49 01       	movw	r8, r18
    150e:	5a 01       	movw	r10, r20

  unsigned long PrevMillis = millis();
    1510:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
    1514:	6b 01       	movw	r12, r22
    1516:	7c 01       	movw	r14, r24
  strcpy(reply, "none");
    1518:	61 ee       	ldi	r22, 0xE1	; 225
    151a:	71 e0       	ldi	r23, 0x01	; 1
    151c:	c8 01       	movw	r24, r16
    151e:	02 96       	adiw	r24, 0x02	; 2
    1520:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <strcpy>
  GSM_Response = 0;
    1524:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <GSM_Response>
  Serial.write(command);
    1528:	be 01       	movw	r22, r28
    152a:	82 e1       	ldi	r24, 0x12	; 18
    152c:	96 e0       	ldi	r25, 0x06	; 6
    152e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN5Print5writeEPKc>
  unsigned long currentMillis = millis();
    1532:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
  //  mySerial.println(PrevMillis);
  //  mySerial.println(currentMillis);
  while ( (GSM_Response == 0) && ((currentMillis - PrevMillis) < waitms) )
    1536:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <GSM_Response>
    153a:	21 11       	cpse	r18, r1
    153c:	0e c0       	rjmp	.+28     	; 0x155a <_ZN8GSM_MQTT7_sendATEPcm+0x6a>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	8c 19       	sub	r24, r12
    1544:	9d 09       	sbc	r25, r13
    1546:	ae 09       	sbc	r26, r14
    1548:	bf 09       	sbc	r27, r15
    154a:	88 15       	cp	r24, r8
    154c:	99 05       	cpc	r25, r9
    154e:	aa 05       	cpc	r26, r10
    1550:	bb 05       	cpc	r27, r11
    1552:	18 f4       	brcc	.+6      	; 0x155a <_ZN8GSM_MQTT7_sendATEPcm+0x6a>
  {
    //    delay(1);
    serialEvent();
    1554:	0e 94 42 06 	call	0xc84	; 0xc84 <_Z11serialEventv>
    1558:	ec cf       	rjmp	.-40     	; 0x1532 <_ZN8GSM_MQTT7_sendATEPcm+0x42>
    currentMillis = millis();
  }
  return GSM_Response;
}
    155a:	82 2f       	mov	r24, r18
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	bf 90       	pop	r11
    156e:	af 90       	pop	r10
    1570:	9f 90       	pop	r9
    1572:	8f 90       	pop	r8
    1574:	08 95       	ret

00001576 <_ZN8GSM_MQTT11sendATreplyEPcS0_m>:
char GSM_MQTT::sendATreply(char *command, char *replystr, unsigned long waitms)
{
    1576:	4f 92       	push	r4
    1578:	5f 92       	push	r5
    157a:	6f 92       	push	r6
    157c:	7f 92       	push	r7
    157e:	af 92       	push	r10
    1580:	bf 92       	push	r11
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	ec 01       	movw	r28, r24
    1594:	5b 01       	movw	r10, r22
    1596:	28 01       	movw	r4, r16
    1598:	39 01       	movw	r6, r18
  strcpy(reply, replystr);
    159a:	ba 01       	movw	r22, r20
    159c:	02 96       	adiw	r24, 0x02	; 2
    159e:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <strcpy>
  unsigned long PrevMillis = millis();
    15a2:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
    15a6:	6b 01       	movw	r12, r22
    15a8:	7c 01       	movw	r14, r24
  GSM_ReplyFlag = 0;
    15aa:	19 82       	std	Y+1, r1	; 0x01
  Serial.write(command);
    15ac:	b5 01       	movw	r22, r10
    15ae:	82 e1       	ldi	r24, 0x12	; 18
    15b0:	96 e0       	ldi	r25, 0x06	; 6
    15b2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN5Print5writeEPKc>
  unsigned long currentMillis = millis();
    15b6:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>

  //  mySerial.println(PrevMillis);
  //  mySerial.println(currentMillis);
  while ( (GSM_ReplyFlag == 0) && ((currentMillis - PrevMillis) < waitms) )
    15ba:	29 81       	ldd	r18, Y+1	; 0x01
    15bc:	21 11       	cpse	r18, r1
    15be:	0e c0       	rjmp	.+28     	; 0x15dc <_ZN8GSM_MQTT11sendATreplyEPcS0_m+0x66>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8c 19       	sub	r24, r12
    15c6:	9d 09       	sbc	r25, r13
    15c8:	ae 09       	sbc	r26, r14
    15ca:	bf 09       	sbc	r27, r15
    15cc:	84 15       	cp	r24, r4
    15ce:	95 05       	cpc	r25, r5
    15d0:	a6 05       	cpc	r26, r6
    15d2:	b7 05       	cpc	r27, r7
    15d4:	18 f4       	brcc	.+6      	; 0x15dc <_ZN8GSM_MQTT11sendATreplyEPcS0_m+0x66>
  {
    //    delay(1);
    serialEvent();
    15d6:	0e 94 42 06 	call	0xc84	; 0xc84 <_Z11serialEventv>
    15da:	ed cf       	rjmp	.-38     	; 0x15b6 <_ZN8GSM_MQTT11sendATreplyEPcS0_m+0x40>
    currentMillis = millis();
  }
  return GSM_ReplyFlag;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	af 90       	pop	r10
    15f2:	7f 90       	pop	r7
    15f4:	6f 90       	pop	r6
    15f6:	5f 90       	pop	r5
    15f8:	4f 90       	pop	r4
    15fa:	08 95       	ret

000015fc <_ZN8GSM_MQTT8_tcpInitEv>:
void GSM_MQTT::_tcpInit(void)
{
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	ec 01       	movw	r28, r24
  switch (modemStatus)
    1612:	6c 01       	movw	r12, r24
    1614:	2b eb       	ldi	r18, 0xBB	; 187
    1616:	c2 1a       	sub	r12, r18
    1618:	2e ef       	ldi	r18, 0xFE	; 254
    161a:	d2 0a       	sbc	r13, r18
    161c:	f6 01       	movw	r30, r12
    161e:	80 81       	ld	r24, Z
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	49 f1       	breq	.+82     	; 0x1676 <_ZN8GSM_MQTT8_tcpInitEv+0x7a>
    1624:	30 f0       	brcs	.+12     	; 0x1632 <_ZN8GSM_MQTT8_tcpInitEv+0x36>
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	b9 f1       	breq	.+110    	; 0x1698 <_ZN8GSM_MQTT8_tcpInitEv+0x9c>
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	09 f4       	brne	.+2      	; 0x1630 <_ZN8GSM_MQTT8_tcpInitEv+0x34>
    162e:	75 c0       	rjmp	.+234    	; 0x171a <_ZN8GSM_MQTT8_tcpInitEv+0x11e>
    1630:	46 c1       	rjmp	.+652    	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
  {
    case 0:
      {
        delay(1000);
    1632:	68 ee       	ldi	r22, 0xE8	; 232
    1634:	73 e0       	ldi	r23, 0x03	; 3
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <delay>
        Serial.print("+++");
    163e:	66 ee       	ldi	r22, 0xE6	; 230
    1640:	71 e0       	ldi	r23, 0x01	; 1
    1642:	82 e1       	ldi	r24, 0x12	; 18
    1644:	96 e0       	ldi	r25, 0x06	; 6
    1646:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
        delay(500);
    164a:	64 ef       	ldi	r22, 0xF4	; 244
    164c:	71 e0       	ldi	r23, 0x01	; 1
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <delay>
        if (_sendAT("AT\r\n", 5000) == 1)
    1656:	28 e8       	ldi	r18, 0x88	; 136
    1658:	33 e1       	ldi	r19, 0x13	; 19
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	6a ee       	ldi	r22, 0xEA	; 234
    1660:	71 e0       	ldi	r23, 0x01	; 1
    1662:	ce 01       	movw	r24, r28
    1664:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN8GSM_MQTT7_sendATEPcm>
        {
          modemStatus = 1;
    1668:	f6 01       	movw	r30, r12
    case 0:
      {
        delay(1000);
        Serial.print("+++");
        delay(500);
        if (_sendAT("AT\r\n", 5000) == 1)
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	11 f4       	brne	.+4      	; 0x1672 <_ZN8GSM_MQTT8_tcpInitEv+0x76>
        {
          modemStatus = 1;
    166e:	80 83       	st	Z, r24
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <_ZN8GSM_MQTT8_tcpInitEv+0x7a>
        }
        else
        {
          modemStatus = 0;
    1672:	10 82       	st	Z, r1
          break;
    1674:	24 c1       	rjmp	.+584    	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
        }
      }
    case 1:
      {
        if (_sendAT("ATE1\r\n", 2000) == 1)
    1676:	20 ed       	ldi	r18, 0xD0	; 208
    1678:	37 e0       	ldi	r19, 0x07	; 7
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	6f ee       	ldi	r22, 0xEF	; 239
    1680:	71 e0       	ldi	r23, 0x01	; 1
    1682:	ce 01       	movw	r24, r28
    1684:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN8GSM_MQTT7_sendATEPcm>
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	21 f4       	brne	.+8      	; 0x1694 <_ZN8GSM_MQTT8_tcpInitEv+0x98>
        {
          modemStatus = 2;
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	f6 01       	movw	r30, r12
    1690:	80 83       	st	Z, r24
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <_ZN8GSM_MQTT8_tcpInitEv+0x9c>
        }
        else
        {
          modemStatus = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	3f c0       	rjmp	.+126    	; 0x1716 <_ZN8GSM_MQTT8_tcpInitEv+0x11a>
          break;
        }
      }
    case 2:
      {
        if (sendATreply("AT+CREG?\r\n", "0,1", 5000) == 1)
    1698:	08 e8       	ldi	r16, 0x88	; 136
    169a:	13 e1       	ldi	r17, 0x13	; 19
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	46 ef       	ldi	r20, 0xF6	; 246
    16a2:	51 e0       	ldi	r21, 0x01	; 1
    16a4:	6a ef       	ldi	r22, 0xFA	; 250
    16a6:	71 e0       	ldi	r23, 0x01	; 1
    16a8:	ce 01       	movw	r24, r28
    16aa:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN8GSM_MQTT11sendATreplyEPcS0_m>
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	89 f5       	brne	.+98     	; 0x1714 <_ZN8GSM_MQTT8_tcpInitEv+0x118>
        {
          _sendAT("AT+CIPMUX=0\r\n", 2000);
    16b2:	20 ed       	ldi	r18, 0xD0	; 208
    16b4:	37 e0       	ldi	r19, 0x07	; 7
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	65 e0       	ldi	r22, 0x05	; 5
    16bc:	72 e0       	ldi	r23, 0x02	; 2
    16be:	ce 01       	movw	r24, r28
    16c0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN8GSM_MQTT7_sendATEPcm>
          _sendAT("AT+CIPMODE=1\r\n", 2000);
    16c4:	20 ed       	ldi	r18, 0xD0	; 208
    16c6:	37 e0       	ldi	r19, 0x07	; 7
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	63 e1       	ldi	r22, 0x13	; 19
    16ce:	72 e0       	ldi	r23, 0x02	; 2
    16d0:	ce 01       	movw	r24, r28
    16d2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN8GSM_MQTT7_sendATEPcm>
          if (sendATreply("AT+CGATT?\r\n", ": 1", 4000) != 1)
    16d6:	00 ea       	ldi	r16, 0xA0	; 160
    16d8:	1f e0       	ldi	r17, 0x0F	; 15
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	42 e2       	ldi	r20, 0x22	; 34
    16e0:	52 e0       	ldi	r21, 0x02	; 2
    16e2:	66 e2       	ldi	r22, 0x26	; 38
    16e4:	72 e0       	ldi	r23, 0x02	; 2
    16e6:	ce 01       	movw	r24, r28
    16e8:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN8GSM_MQTT11sendATreplyEPcS0_m>
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	49 f0       	breq	.+18     	; 0x1702 <_ZN8GSM_MQTT8_tcpInitEv+0x106>
          {
            _sendAT("AT+CGATT=1\r\n", 2000);
    16f0:	20 ed       	ldi	r18, 0xD0	; 208
    16f2:	37 e0       	ldi	r19, 0x07	; 7
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	62 e3       	ldi	r22, 0x32	; 50
    16fa:	72 e0       	ldi	r23, 0x02	; 2
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN8GSM_MQTT7_sendATEPcm>
          }
          modemStatus = 3;
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	f6 01       	movw	r30, r12
    1706:	80 83       	st	Z, r24
          _tcpStatus = 2;
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	fe 01       	movw	r30, r28
    170c:	eb 57       	subi	r30, 0x7B	; 123
    170e:	fd 4f       	sbci	r31, 0xFD	; 253
    1710:	80 83       	st	Z, r24
    1712:	03 c0       	rjmp	.+6      	; 0x171a <_ZN8GSM_MQTT8_tcpInitEv+0x11e>
        }
        else
        {
          modemStatus = 2;
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	f6 01       	movw	r30, r12
    1718:	d1 c0       	rjmp	.+418    	; 0x18bc <_ZN8GSM_MQTT8_tcpInitEv+0x2c0>
          break;
        }
      }
    case 3:
      {
        if (GSM_ReplyFlag != 7)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9e 01       	movw	r18, r28
    171e:	2b 57       	subi	r18, 0x7B	; 123
    1720:	3d 4f       	sbci	r19, 0xFD	; 253
    1722:	79 01       	movw	r14, r18
    1724:	fe 01       	movw	r30, r28
    1726:	ea 57       	subi	r30, 0x7A	; 122
    1728:	fd 4f       	sbci	r31, 0xFD	; 253
    172a:	5f 01       	movw	r10, r30
    172c:	87 30       	cpi	r24, 0x07	; 7
    172e:	11 f1       	breq	.+68     	; 0x1774 <_ZN8GSM_MQTT8_tcpInitEv+0x178>
        {
          _tcpStatus = sendATreply("AT+CIPSTATUS\r\n", "STATE", 4000);
    1730:	00 ea       	ldi	r16, 0xA0	; 160
    1732:	1f e0       	ldi	r17, 0x0F	; 15
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4f e3       	ldi	r20, 0x3F	; 63
    173a:	52 e0       	ldi	r21, 0x02	; 2
    173c:	65 e4       	ldi	r22, 0x45	; 69
    173e:	72 e0       	ldi	r23, 0x02	; 2
    1740:	ce 01       	movw	r24, r28
    1742:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN8GSM_MQTT11sendATreplyEPcS0_m>
    1746:	f7 01       	movw	r30, r14
    1748:	80 83       	st	Z, r24
          if (_tcpStatusPrev == _tcpStatus)
    174a:	f5 01       	movw	r30, r10
    174c:	90 81       	ld	r25, Z
    174e:	f7 01       	movw	r30, r14
    1750:	80 81       	ld	r24, Z
    1752:	98 13       	cpse	r25, r24
    1754:	0a c0       	rjmp	.+20     	; 0x176a <_ZN8GSM_MQTT8_tcpInitEv+0x16e>
          {
            tcpATerrorcount++;
    1756:	8d 85       	ldd	r24, Y+13	; 0x0d
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	8d 87       	std	Y+13, r24	; 0x0d
            if (tcpATerrorcount >= 10)
    175c:	8d 85       	ldd	r24, Y+13	; 0x0d
    175e:	8a 30       	cpi	r24, 0x0A	; 10
    1760:	48 f0       	brcs	.+18     	; 0x1774 <_ZN8GSM_MQTT8_tcpInitEv+0x178>
            {
              tcpATerrorcount = 0;
    1762:	1d 86       	std	Y+13, r1	; 0x0d
              _tcpStatus = 7;
    1764:	87 e0       	ldi	r24, 0x07	; 7
    1766:	80 83       	st	Z, r24
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <_ZN8GSM_MQTT8_tcpInitEv+0x178>
            }

          }
          else
          {
            _tcpStatusPrev = _tcpStatus;
    176a:	f7 01       	movw	r30, r14
    176c:	80 81       	ld	r24, Z
    176e:	f5 01       	movw	r30, r10
    1770:	80 83       	st	Z, r24
            tcpATerrorcount = 0;
    1772:	1d 86       	std	Y+13, r1	; 0x0d
          }
        }
        _tcpStatusPrev = _tcpStatus;
    1774:	f7 01       	movw	r30, r14
    1776:	80 81       	ld	r24, Z
    1778:	f5 01       	movw	r30, r10
    177a:	80 83       	st	Z, r24
        mySerial.print(_tcpStatus);
    177c:	f7 01       	movw	r30, r14
    177e:	60 81       	ld	r22, Z
    1780:	87 ee       	ldi	r24, 0xE7	; 231
    1782:	95 e0       	ldi	r25, 0x05	; 5
    1784:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
        switch (_tcpStatus)
    1788:	f7 01       	movw	r30, r14
    178a:	80 81       	ld	r24, Z
    178c:	84 30       	cpi	r24, 0x04	; 4
    178e:	b9 f1       	breq	.+110    	; 0x17fe <_ZN8GSM_MQTT8_tcpInitEv+0x202>
    1790:	60 f4       	brcc	.+24     	; 0x17aa <_ZN8GSM_MQTT8_tcpInitEv+0x1ae>
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	09 f1       	breq	.+66     	; 0x17d8 <_ZN8GSM_MQTT8_tcpInitEv+0x1dc>
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	09 f0       	breq	.+2      	; 0x179c <_ZN8GSM_MQTT8_tcpInitEv+0x1a0>
    179a:	91 c0       	rjmp	.+290    	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
              _sendAT("AT+CSTT=\"antel.lte\",\"\",\"\"\r\n", 5000);
              break;
            }
          case 3:
            {
              _sendAT("AT+CIICR\r\n", 5000)  ;
    179c:	28 e8       	ldi	r18, 0x88	; 136
    179e:	33 e1       	ldi	r19, 0x13	; 19
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	60 e7       	ldi	r22, 0x70	; 112
    17a6:	72 e0       	ldi	r23, 0x02	; 2
    17a8:	1d c0       	rjmp	.+58     	; 0x17e4 <_ZN8GSM_MQTT8_tcpInitEv+0x1e8>
            tcpATerrorcount = 0;
          }
        }
        _tcpStatusPrev = _tcpStatus;
        mySerial.print(_tcpStatus);
        switch (_tcpStatus)
    17aa:	86 30       	cpi	r24, 0x06	; 6
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <_ZN8GSM_MQTT8_tcpInitEv+0x1b4>
    17ae:	6e c0       	rjmp	.+220    	; 0x188c <_ZN8GSM_MQTT8_tcpInitEv+0x290>
    17b0:	90 f1       	brcs	.+100    	; 0x1816 <_ZN8GSM_MQTT8_tcpInitEv+0x21a>
    17b2:	87 30       	cpi	r24, 0x07	; 7
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <_ZN8GSM_MQTT8_tcpInitEv+0x1bc>
    17b6:	83 c0       	rjmp	.+262    	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
              }
              break;
            }
          case 7:
            {
              sendATreply("AT+CIPSHUT\r\n", "OK", 4000) ;
    17b8:	00 ea       	ldi	r16, 0xA0	; 160
    17ba:	1f e0       	ldi	r17, 0x0F	; 15
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4c e5       	ldi	r20, 0x5C	; 92
    17c2:	51 e0       	ldi	r21, 0x01	; 1
    17c4:	62 ed       	ldi	r22, 0xD2	; 210
    17c6:	71 e0       	ldi	r23, 0x01	; 1
    17c8:	ce 01       	movw	r24, r28
    17ca:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN8GSM_MQTT11sendATreplyEPcS0_m>
              modemStatus = 0;
    17ce:	f6 01       	movw	r30, r12
    17d0:	10 82       	st	Z, r1
              _tcpStatus = 2;
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	f7 01       	movw	r30, r14
    17d6:	72 c0       	rjmp	.+228    	; 0x18bc <_ZN8GSM_MQTT8_tcpInitEv+0x2c0>
        mySerial.print(_tcpStatus);
        switch (_tcpStatus)
        {
          case 2:
            {
              _sendAT("AT+CSTT=\"antel.lte\",\"\",\"\"\r\n", 5000);
    17d8:	28 e8       	ldi	r18, 0x88	; 136
    17da:	33 e1       	ldi	r19, 0x13	; 19
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	64 e5       	ldi	r22, 0x54	; 84
    17e2:	72 e0       	ldi	r23, 0x02	; 2
              break;
            }
          case 3:
            {
              _sendAT("AT+CIICR\r\n", 5000)  ;
    17e4:	ce 01       	movw	r24, r28
            }
        }
      }
  }

}
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	bf 90       	pop	r11
    17f8:	af 90       	pop	r10
              _sendAT("AT+CSTT=\"antel.lte\",\"\",\"\"\r\n", 5000);
              break;
            }
          case 3:
            {
              _sendAT("AT+CIICR\r\n", 5000)  ;
    17fa:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <_ZN8GSM_MQTT7_sendATEPcm>
              break;
            }
          case 4:
            {
              sendATreply("AT+CIFSR\r\n", ".", 4000) ;
    17fe:	00 ea       	ldi	r16, 0xA0	; 160
    1800:	1f e0       	ldi	r17, 0x0F	; 15
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 ed       	ldi	r20, 0xD0	; 208
    1808:	51 e0       	ldi	r21, 0x01	; 1
    180a:	6b e7       	ldi	r22, 0x7B	; 123
    180c:	72 e0       	ldi	r23, 0x02	; 2
    180e:	ce 01       	movw	r24, r28
    1810:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN8GSM_MQTT11sendATreplyEPcS0_m>
              break;
    1814:	54 c0       	rjmp	.+168    	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
            }
          case 5:
            {
              Serial.print("AT+CIPSTART=\"TCP\",\"");
    1816:	66 e8       	ldi	r22, 0x86	; 134
    1818:	72 e0       	ldi	r23, 0x02	; 2
    181a:	82 e1       	ldi	r24, 0x12	; 18
    181c:	96 e0       	ldi	r25, 0x06	; 6
    181e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
              Serial.print(MQTT_HOST);
    1822:	6c e0       	ldi	r22, 0x0C	; 12
    1824:	76 e0       	ldi	r23, 0x06	; 6
    1826:	82 e1       	ldi	r24, 0x12	; 18
    1828:	96 e0       	ldi	r25, 0x06	; 6
    182a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN5Print5printERK6String>
              Serial.print("\",\"");
    182e:	66 e9       	ldi	r22, 0x96	; 150
    1830:	72 e0       	ldi	r23, 0x02	; 2
    1832:	82 e1       	ldi	r24, 0x12	; 18
    1834:	96 e0       	ldi	r25, 0x06	; 6
    1836:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPKc>
              Serial.print(MQTT_PORT);
    183a:	66 e0       	ldi	r22, 0x06	; 6
    183c:	76 e0       	ldi	r23, 0x06	; 6
    183e:	82 e1       	ldi	r24, 0x12	; 18
    1840:	96 e0       	ldi	r25, 0x06	; 6
    1842:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN5Print5printERK6String>
              if (_sendAT("\"\r\n", 5000) == 1)
    1846:	28 e8       	ldi	r18, 0x88	; 136
    1848:	33 e1       	ldi	r19, 0x13	; 19
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	6c e6       	ldi	r22, 0x6C	; 108
    1850:	72 e0       	ldi	r23, 0x02	; 2
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN8GSM_MQTT7_sendATEPcm>
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	89 f5       	brne	.+98     	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
              {
                unsigned long PrevMillis = millis();
    185c:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
    1860:	6b 01       	movw	r12, r22
    1862:	7c 01       	movw	r14, r24
                unsigned long currentMillis = millis();
    1864:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
                while ( (GSM_Response != 4) && ((currentMillis - PrevMillis) < 20000) )
    1868:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <GSM_Response>
    186c:	24 30       	cpi	r18, 0x04	; 4
    186e:	39 f1       	breq	.+78     	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8c 19       	sub	r24, r12
    1876:	9d 09       	sbc	r25, r13
    1878:	ae 09       	sbc	r26, r14
    187a:	bf 09       	sbc	r27, r15
    187c:	80 32       	cpi	r24, 0x20	; 32
    187e:	9e 44       	sbci	r25, 0x4E	; 78
    1880:	a1 05       	cpc	r26, r1
    1882:	b1 05       	cpc	r27, r1
    1884:	e0 f4       	brcc	.+56     	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
                {
                  //    delay(1);
                  serialEvent();
    1886:	0e 94 42 06 	call	0xc84	; 0xc84 <_Z11serialEventv>
    188a:	ec cf       	rjmp	.-40     	; 0x1864 <_ZN8GSM_MQTT8_tcpInitEv+0x268>
              }
              break;
            }
          case 6:
            {
              unsigned long PrevMillis = millis();
    188c:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
    1890:	6b 01       	movw	r12, r22
    1892:	7c 01       	movw	r14, r24
              unsigned long currentMillis = millis();
    1894:	0e 94 b3 10 	call	0x2166	; 0x2166 <millis>
              while ( (GSM_Response != 4) && ((currentMillis - PrevMillis) < 20000) )
    1898:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <GSM_Response>
    189c:	24 30       	cpi	r18, 0x04	; 4
    189e:	79 f0       	breq	.+30     	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	8c 19       	sub	r24, r12
    18a6:	9d 09       	sbc	r25, r13
    18a8:	ae 09       	sbc	r26, r14
    18aa:	bf 09       	sbc	r27, r15
    18ac:	80 32       	cpi	r24, 0x20	; 32
    18ae:	9e 44       	sbci	r25, 0x4E	; 78
    18b0:	a1 05       	cpc	r26, r1
    18b2:	b1 05       	cpc	r27, r1
    18b4:	20 f4       	brcc	.+8      	; 0x18be <_ZN8GSM_MQTT8_tcpInitEv+0x2c2>
              {
                //    delay(1);
                serialEvent();
    18b6:	0e 94 42 06 	call	0xc84	; 0xc84 <_Z11serialEventv>
    18ba:	ec cf       	rjmp	.-40     	; 0x1894 <_ZN8GSM_MQTT8_tcpInitEv+0x298>
            }
          case 7:
            {
              sendATreply("AT+CIPSHUT\r\n", "OK", 4000) ;
              modemStatus = 0;
              _tcpStatus = 2;
    18bc:	80 83       	st	Z, r24
            }
        }
      }
  }

}
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	bf 90       	pop	r11
    18d0:	af 90       	pop	r10
    18d2:	08 95       	ret

000018d4 <_ZN8GSM_MQTT5beginEv>:
{
  _KeepAliveTimeOut = KeepAlive;
}

void GSM_MQTT::begin(void)
{
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	ec 01       	movw	r28, r24
  mySerial.begin(9600);
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	55 e2       	ldi	r21, 0x25	; 37
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	87 ee       	ldi	r24, 0xE7	; 231
    18e4:	95 e0       	ldi	r25, 0x05	; 5
    18e6:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN14SoftwareSerial5beginEl>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    18ea:	26 e0       	ldi	r18, 0x06	; 6
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	55 e2       	ldi	r21, 0x25	; 37
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	82 e1       	ldi	r24, 0x12	; 18
    18f6:	96 e0       	ldi	r25, 0x06	; 6
    18f8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  Serial.write("AT\r\n");
    18fc:	6a ee       	ldi	r22, 0xEA	; 234
    18fe:	71 e0       	ldi	r23, 0x01	; 1
    1900:	82 e1       	ldi	r24, 0x12	; 18
    1902:	96 e0       	ldi	r25, 0x06	; 6
    1904:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN5Print5writeEPKc>
  delay(1000);
    1908:	68 ee       	ldi	r22, 0xE8	; 232
    190a:	73 e0       	ldi	r23, 0x03	; 3
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <delay>
  _tcpInit();
    1914:	ce 01       	movw	r24, r28
}
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
{
  mySerial.begin(9600);
  Serial.begin(9600);
  Serial.write("AT\r\n");
  delay(1000);
  _tcpInit();
    191a:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <_ZN8GSM_MQTT8_tcpInitEv>

0000191e <_ZN8GSM_MQTT10processingEv>:
    _LastMessaseID = 0;
    return _LastMessaseID;
  }
}
void GSM_MQTT::processing(void)
{
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	ec 01       	movw	r28, r24
  if (TCP_Flag == false)
    1924:	88 81       	ld	r24, Y
    1926:	81 11       	cpse	r24, r1
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <_ZN8GSM_MQTT10processingEv+0x14>
  {
    MQTT_Flag = false;
    192a:	1e 86       	std	Y+14, r1	; 0x0e
    _tcpInit();
    192c:	ce 01       	movw	r24, r28
    192e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN8GSM_MQTT8_tcpInitEv>
  }
  _ping();
    1932:	ce 01       	movw	r24, r28
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
  if (TCP_Flag == false)
  {
    MQTT_Flag = false;
    _tcpInit();
  }
  _ping();
    1938:	0c 94 81 02 	jmp	0x502	; 0x502 <_ZN8GSM_MQTT5_pingEv>

0000193c <_ZN8GSM_MQTT11AutoConnectEv>:
SoftwareSerial mySerial(10, 11); // RX, TX
/*
   Software Serial through which mqtt events log is printed at 9600 baud rate
*/
void GSM_MQTT::AutoConnect(void)
{
    193c:	8f 92       	push	r8
    193e:	af 92       	push	r10
    1940:	cf 92       	push	r12
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
  /*
     Use this function if you want to use autoconnect(and auto reconnect) facility
     This function is called whenever TCP connection is established (or re-established).
     put your connect codes here.
  */
  connect("SH-v4-001", 1, 0, "os8xar9uL5WqoAsVmwWKs75IAOIi7sOjIKGG1G1AzLQLc7wmrgUKeNgCsMLn4nwB", "", 1, 0, 0, 0, "", "");
    194a:	2f e6       	ldi	r18, 0x6F	; 111
    194c:	32 e0       	ldi	r19, 0x02	; 2
    194e:	3f 93       	push	r19
    1950:	2f 93       	push	r18
    1952:	3f 93       	push	r19
    1954:	2f 93       	push	r18
    1956:	1f 92       	push	r1
    1958:	81 2c       	mov	r8, r1
    195a:	a1 2c       	mov	r10, r1
    195c:	cc 24       	eor	r12, r12
    195e:	c3 94       	inc	r12
    1960:	79 01       	movw	r14, r18
    1962:	0a e9       	ldi	r16, 0x9A	; 154
    1964:	12 e0       	ldi	r17, 0x02	; 2
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	69 ef       	ldi	r22, 0xF9	; 249
    196c:	72 e0       	ldi	r23, 0x02	; 2
    196e:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN8GSM_MQTT7connectEPcccS0_S0_ccccS0_S0_>
                            :The Will Message will published to this topic (WillTopic) in case of involuntary client disconnection.
          WillMessage       :Mandatory when  WillFlag is 1, otherwise its value is disregarded.
                            :This message (WillMessage) will published to WillTopic in case of involuntary client disconnection.
  */
  
}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	cf 90       	pop	r12
    1986:	af 90       	pop	r10
    1988:	8f 90       	pop	r8
    198a:	08 95       	ret

0000198c <_ZN8GSM_MQTT9OnConnectEv>:
void GSM_MQTT::OnConnect(void)
{
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	ec 01       	movw	r28, r24
  /*
     This function is called when mqqt connection is established.
     put your subscription publish codes here.
  */
  subscribe(0, _generateMessageID(), "GsmClientTest/read", 1);
    199e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN8GSM_MQTT18_generateMessageIDEv>
    19a2:	01 e0       	ldi	r16, 0x01	; 1
    19a4:	2b ed       	ldi	r18, 0xDB	; 219
    19a6:	32 e0       	ldi	r19, 0x02	; 2
    19a8:	ac 01       	movw	r20, r24
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	ce 01       	movw	r24, r28
    19ae:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN8GSM_MQTT9subscribeEcjPcc>
          SubQoS    :QoS level at which the client wants to receive messages
                    :Possible values (0,1,2)
                    :Default value 0
  */

  publish(0, 0, 0, _generateMessageID(), "GsmClientTest/led", "Hello from SH-v4-001");
    19b2:	ce 01       	movw	r24, r28
    19b4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN8GSM_MQTT18_generateMessageIDEv>
    19b8:	2e ee       	ldi	r18, 0xEE	; 238
    19ba:	c2 2e       	mov	r12, r18
    19bc:	22 e0       	ldi	r18, 0x02	; 2
    19be:	d2 2e       	mov	r13, r18
    19c0:	33 e0       	ldi	r19, 0x03	; 3
    19c2:	e3 2e       	mov	r14, r19
    19c4:	33 e0       	ldi	r19, 0x03	; 3
    19c6:	f3 2e       	mov	r15, r19
    19c8:	8c 01       	movw	r16, r24
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	ce 01       	movw	r24, r28
    19d2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN8GSM_MQTT7publishEcccjPcS0_>
      Message ID:The Message Identifier (Message ID) field
                :Used only in messages where the QoS levels greater than 0
      Topic     :Publishing topic
      Message   :Publishing Message
  */
}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	08 95       	ret

000019e8 <_ZN8GSM_MQTT9OnMessageEPciS0_i>:
void GSM_MQTT::OnMessage(char *Topic, int TopicLength, char *Message, int MessageLength)
{
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	7b 01       	movw	r14, r22
    19f6:	ba 01       	movw	r22, r20
    19f8:	e9 01       	movw	r28, r18
     Topic        :Name of the topic from which message is coming
     TopicLength  :Number of characters in topic name
     Message      :The containing array
     MessageLength:Number of characters in message
  */
  mySerial.println(TopicLength);
    19fa:	4a e0       	ldi	r20, 0x0A	; 10
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	87 ee       	ldi	r24, 0xE7	; 231
    1a00:	95 e0       	ldi	r25, 0x05	; 5
    1a02:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN5Print7printlnEii>
  mySerial.println(Topic);
    1a06:	b7 01       	movw	r22, r14
    1a08:	87 ee       	ldi	r24, 0xE7	; 231
    1a0a:	95 e0       	ldi	r25, 0x05	; 5
    1a0c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnEPKc>
  mySerial.println(MessageLength);
    1a10:	4a e0       	ldi	r20, 0x0A	; 10
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	b8 01       	movw	r22, r16
    1a16:	87 ee       	ldi	r24, 0xE7	; 231
    1a18:	95 e0       	ldi	r25, 0x05	; 5
    1a1a:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN5Print7printlnEii>
  mySerial.println(Message);
    1a1e:	be 01       	movw	r22, r28
    1a20:	87 ee       	ldi	r24, 0xE7	; 231
    1a22:	95 e0       	ldi	r25, 0x05	; 5

}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
     MessageLength:Number of characters in message
  */
  mySerial.println(TopicLength);
  mySerial.println(Topic);
  mySerial.println(MessageLength);
  mySerial.println(Message);
    1a30:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <_ZN5Print7printlnEPKc>

00001a34 <setup>:
void setup()
{
  // initialize mqtt:
  // GSM modem should be connected to Harware Serial
  //  index =0;
  MQTT.begin();
    1a34:	8c e5       	ldi	r24, 0x5C	; 92
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <_ZN8GSM_MQTT5beginEv>

00001a3c <loop>:
     You can write your code here
  */

}
void loop()
{
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17

  /*
     You can write your code here
  */
  if (MQTT.available())
    1a48:	8c e5       	ldi	r24, 0x5C	; 92
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN8GSM_MQTT9availableEv>
    1a50:	88 23       	and	r24, r24
    1a52:	b9 f0       	breq	.+46     	; 0x1a82 <loop+0x46>
  {
    /*
      if you want to do something when mqtt connection is live.
      You can write your code here
    */
    delay(3000);
    1a54:	68 eb       	ldi	r22, 0xB8	; 184
    1a56:	7b e0       	ldi	r23, 0x0B	; 11
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <delay>
    MQTT.publish(0, 0, 0, 0, "GsmClientTest/led", "Hello from SH-v4-001");
    1a60:	8e ee       	ldi	r24, 0xEE	; 238
    1a62:	c8 2e       	mov	r12, r24
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	d8 2e       	mov	r13, r24
    1a68:	93 e0       	ldi	r25, 0x03	; 3
    1a6a:	e9 2e       	mov	r14, r25
    1a6c:	93 e0       	ldi	r25, 0x03	; 3
    1a6e:	f9 2e       	mov	r15, r25
    1a70:	00 e0       	ldi	r16, 0x00	; 0
    1a72:	10 e0       	ldi	r17, 0x00	; 0
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	8c e5       	ldi	r24, 0x5C	; 92
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN8GSM_MQTT7publishEcccjPcS0_>
  }

  MQTT.processing();
    1a82:	8c e5       	ldi	r24, 0x5C	; 92
    1a84:	93 e0       	ldi	r25, 0x03	; 3
}
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	cf 90       	pop	r12
    */
    delay(3000);
    MQTT.publish(0, 0, 0, 0, "GsmClientTest/led", "Hello from SH-v4-001");
  }

  MQTT.processing();
    1a92:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <_ZN8GSM_MQTT10processingEv>

00001a96 <_GLOBAL__sub_I_MQTT_HOST>:
#include <SoftwareSerial.h>
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio


String MQTT_HOST = "mqtt.flespi.io";
    1a96:	65 e1       	ldi	r22, 0x15	; 21
    1a98:	73 e0       	ldi	r23, 0x03	; 3
    1a9a:	8c e0       	ldi	r24, 0x0C	; 12
    1a9c:	96 e0       	ldi	r25, 0x06	; 6
    1a9e:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN6StringC1EPKc>
/*
   MQTT host address
*/
String MQTT_PORT = "1883";
    1aa2:	64 e2       	ldi	r22, 0x24	; 36
    1aa4:	73 e0       	ldi	r23, 0x03	; 3
    1aa6:	86 e0       	ldi	r24, 0x06	; 6
    1aa8:	96 e0       	ldi	r25, 0x06	; 6
    1aaa:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN6StringC1EPKc>
/*
   MQTT port
*/
SoftwareSerial mySerial(10, 11); // RX, TX
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	4b e0       	ldi	r20, 0x0B	; 11
    1ab2:	6a e0       	ldi	r22, 0x0A	; 10
    1ab4:	87 ee       	ldi	r24, 0xE7	; 231
    1ab6:	95 e0       	ldi	r25, 0x05	; 5
    1ab8:	0e 94 92 13 	call	0x2724	; 0x2724 <_ZN14SoftwareSerialC1Ehhb>
  mySerial.println(Topic);
  mySerial.println(MessageLength);
  mySerial.println(Message);

}
GSM_MQTT MQTT(20);
    1abc:	44 e1       	ldi	r20, 0x14	; 20
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	8c e5       	ldi	r24, 0x5C	; 92
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_ZN8GSM_MQTTC1Em>

00001acc <_GLOBAL__sub_D_MQTT_HOST>:
*/
String MQTT_PORT = "1883";
/*
   MQTT port
*/
SoftwareSerial mySerial(10, 11); // RX, TX
    1acc:	87 ee       	ldi	r24, 0xE7	; 231
    1ace:	95 e0       	ldi	r25, 0x05	; 5
    1ad0:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN14SoftwareSerialD1Ev>

String MQTT_HOST = "mqtt.flespi.io";
/*
   MQTT host address
*/
String MQTT_PORT = "1883";
    1ad4:	86 e0       	ldi	r24, 0x06	; 6
    1ad6:	96 e0       	ldi	r25, 0x06	; 6
    1ad8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_ZN6StringD1Ev>
#include <SoftwareSerial.h>
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio


String MQTT_HOST = "mqtt.flespi.io";
    1adc:	8c e0       	ldi	r24, 0x0C	; 12
    1ade:	96 e0       	ldi	r25, 0x06	; 6
    1ae0:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <_ZN6StringD1Ev>

00001ae4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1ae4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1ae6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ae8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aea:	89 2f       	mov	r24, r25
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	80 5c       	subi	r24, 0xC0	; 192
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	82 1b       	sub	r24, r18
    1af4:	91 09       	sbc	r25, r1
}
    1af6:	8f 73       	andi	r24, 0x3F	; 63
    1af8:	99 27       	eor	r25, r25
    1afa:	08 95       	ret

00001afc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1afc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1afe:	91 8d       	ldd	r25, Z+25	; 0x19
    1b00:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b02:	98 17       	cp	r25, r24
    1b04:	31 f0       	breq	.+12     	; 0x1b12 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1b06:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b08:	e8 0f       	add	r30, r24
    1b0a:	f1 1d       	adc	r31, r1
    1b0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1b16:	08 95       	ret

00001b18 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1b18:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b1a:	91 8d       	ldd	r25, Z+25	; 0x19
    1b1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b1e:	98 17       	cp	r25, r24
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b22:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b24:	df 01       	movw	r26, r30
    1b26:	a8 0f       	add	r26, r24
    1b28:	b1 1d       	adc	r27, r1
    1b2a:	5d 96       	adiw	r26, 0x1d	; 29
    1b2c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b2e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	9f 73       	andi	r25, 0x3F	; 63
    1b34:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b3a:	8f ef       	ldi	r24, 0xFF	; 255
    1b3c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b3e:	08 95       	ret

00001b40 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1b40:	fc 01       	movw	r30, r24
    1b42:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    1b44:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b46:	25 2f       	mov	r18, r21
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	84 2f       	mov	r24, r20
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1b4e:	82 1b       	sub	r24, r18
    1b50:	93 0b       	sbc	r25, r19
    1b52:	54 17       	cp	r21, r20
    1b54:	10 f0       	brcs	.+4      	; 0x1b5a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1b56:	cf 96       	adiw	r24, 0x3f	; 63
    1b58:	08 95       	ret
  return tail - head - 1;
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
}
    1b5c:	08 95       	ret

00001b5e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	9f e0       	ldi	r25, 0x0F	; 15
    1b62:	89 2b       	or	r24, r25
    1b64:	49 f0       	breq	.+18     	; 0x1b78 <_Z14serialEventRunv+0x1a>
    1b66:	82 e4       	ldi	r24, 0x42	; 66
    1b68:	96 e0       	ldi	r25, 0x06	; 6
    1b6a:	89 2b       	or	r24, r25
    1b6c:	29 f0       	breq	.+10     	; 0x1b78 <_Z14serialEventRunv+0x1a>
    1b6e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z17Serial0_availablev>
    1b72:	81 11       	cpse	r24, r1
    1b74:	0c 94 42 06 	jmp	0xc84	; 0xc84 <_Z11serialEventv>
    1b78:	08 95       	ret

00001b7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1b7a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b7e:	df 01       	movw	r26, r30
    1b80:	a8 0f       	add	r26, r24
    1b82:	b1 1d       	adc	r27, r1
    1b84:	a3 5a       	subi	r26, 0xA3	; 163
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1b8a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	8f 73       	andi	r24, 0x3F	; 63
    1b92:	99 27       	eor	r25, r25
    1b94:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1b96:	a6 89       	ldd	r26, Z+22	; 0x16
    1b98:	b7 89       	ldd	r27, Z+23	; 0x17
    1b9a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1b9c:	a0 89       	ldd	r26, Z+16	; 0x10
    1b9e:	b1 89       	ldd	r27, Z+17	; 0x11
    1ba0:	8c 91       	ld	r24, X
    1ba2:	80 64       	ori	r24, 0x40	; 64
    1ba4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1ba6:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ba8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1baa:	98 13       	cpse	r25, r24
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1bae:	02 88       	ldd	r0, Z+18	; 0x12
    1bb0:	f3 89       	ldd	r31, Z+19	; 0x13
    1bb2:	e0 2d       	mov	r30, r0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 7d       	andi	r24, 0xDF	; 223
    1bb8:	80 83       	st	Z, r24
    1bba:	08 95       	ret

00001bbc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	ec 01       	movw	r28, r24
  _written = true;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1bce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bd0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bd2:	98 13       	cpse	r25, r24
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <_ZN14HardwareSerial5writeEh+0x24>
    1bd6:	e8 89       	ldd	r30, Y+16	; 0x10
    1bd8:	f9 89       	ldd	r31, Y+17	; 0x11
    1bda:	80 81       	ld	r24, Z
    1bdc:	85 fd       	sbrc	r24, 5
    1bde:	24 c0       	rjmp	.+72     	; 0x1c28 <_ZN14HardwareSerial5writeEh+0x6c>
    1be0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1be2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1be4:	10 e0       	ldi	r17, 0x00	; 0
    1be6:	0f 5f       	subi	r16, 0xFF	; 255
    1be8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bea:	0f 73       	andi	r16, 0x3F	; 63
    1bec:	11 27       	eor	r17, r17
    1bee:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1bf0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bf2:	e8 12       	cpse	r14, r24
    1bf4:	0c c0       	rjmp	.+24     	; 0x1c0e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	07 fc       	sbrc	r0, 7
    1bfa:	fa cf       	rjmp	.-12     	; 0x1bf0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1bfc:	e8 89       	ldd	r30, Y+16	; 0x10
    1bfe:	f9 89       	ldd	r31, Y+17	; 0x11
    1c00:	80 81       	ld	r24, Z
    1c02:	85 ff       	sbrs	r24, 5
    1c04:	f5 cf       	rjmp	.-22     	; 0x1bf0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1c06:	ce 01       	movw	r24, r28
    1c08:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c0c:	f1 cf       	rjmp	.-30     	; 0x1bf0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1c0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c10:	fe 01       	movw	r30, r28
    1c12:	e8 0f       	add	r30, r24
    1c14:	f1 1d       	adc	r31, r1
    1c16:	e3 5a       	subi	r30, 0xA3	; 163
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1c1c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1c1e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c20:	fb 89       	ldd	r31, Y+19	; 0x13
    1c22:	80 81       	ld	r24, Z
    1c24:	80 62       	ori	r24, 0x20	; 32
    1c26:	07 c0       	rjmp	.+14     	; 0x1c36 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1c28:	ee 89       	ldd	r30, Y+22	; 0x16
    1c2a:	ff 89       	ldd	r31, Y+23	; 0x17
    1c2c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1c2e:	e8 89       	ldd	r30, Y+16	; 0x10
    1c30:	f9 89       	ldd	r31, Y+17	; 0x11
    1c32:	80 81       	ld	r24, Z
    1c34:	80 64       	ori	r24, 0x40	; 64
    1c36:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	08 95       	ret

00001c4a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1c50:	88 8d       	ldd	r24, Y+24	; 0x18
    1c52:	88 23       	and	r24, r24
    1c54:	c9 f0       	breq	.+50     	; 0x1c88 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1c56:	ea 89       	ldd	r30, Y+18	; 0x12
    1c58:	fb 89       	ldd	r31, Y+19	; 0x13
    1c5a:	80 81       	ld	r24, Z
    1c5c:	85 fd       	sbrc	r24, 5
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <_ZN14HardwareSerial5flushEv+0x20>
    1c60:	a8 89       	ldd	r26, Y+16	; 0x10
    1c62:	b9 89       	ldd	r27, Y+17	; 0x11
    1c64:	8c 91       	ld	r24, X
    1c66:	86 fd       	sbrc	r24, 6
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	07 fc       	sbrc	r0, 7
    1c6e:	f5 cf       	rjmp	.-22     	; 0x1c5a <_ZN14HardwareSerial5flushEv+0x10>
    1c70:	80 81       	ld	r24, Z
    1c72:	85 ff       	sbrs	r24, 5
    1c74:	f2 cf       	rjmp	.-28     	; 0x1c5a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1c76:	a8 89       	ldd	r26, Y+16	; 0x10
    1c78:	b9 89       	ldd	r27, Y+17	; 0x11
    1c7a:	8c 91       	ld	r24, X
    1c7c:	85 ff       	sbrs	r24, 5
    1c7e:	ed cf       	rjmp	.-38     	; 0x1c5a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1c80:	ce 01       	movw	r24, r28
    1c82:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c86:	e7 cf       	rjmp	.-50     	; 0x1c56 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1c8e:	cf 92       	push	r12
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	ec 01       	movw	r28, r24
    1c9e:	6a 01       	movw	r12, r20
    1ca0:	7b 01       	movw	r14, r22
    1ca2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ca4:	60 e8       	ldi	r22, 0x80	; 128
    1ca6:	74 e8       	ldi	r23, 0x84	; 132
    1ca8:	8e e1       	ldi	r24, 0x1E	; 30
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a7 01       	movw	r20, r14
    1cae:	96 01       	movw	r18, r12
    1cb0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__udivmodsi4>
    1cb4:	da 01       	movw	r26, r20
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	a1 09       	sbc	r26, r1
    1cbc:	b1 09       	sbc	r27, r1
    1cbe:	b6 95       	lsr	r27
    1cc0:	a7 95       	ror	r26
    1cc2:	97 95       	ror	r25
    1cc4:	87 95       	ror	r24
    1cc6:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    1cc8:	e8 89       	ldd	r30, Y+16	; 0x10
    1cca:	f9 89       	ldd	r31, Y+17	; 0x11
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1cd0:	21 15       	cp	r18, r1
    1cd2:	80 e1       	ldi	r24, 0x10	; 16
    1cd4:	38 07       	cpc	r19, r24
    1cd6:	a8 f0       	brcs	.+42     	; 0x1d02 <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    1cd8:	e8 89       	ldd	r30, Y+16	; 0x10
    1cda:	f9 89       	ldd	r31, Y+17	; 0x11
    1cdc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1cde:	60 e4       	ldi	r22, 0x40	; 64
    1ce0:	72 e4       	ldi	r23, 0x42	; 66
    1ce2:	8f e0       	ldi	r24, 0x0F	; 15
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a7 01       	movw	r20, r14
    1ce8:	96 01       	movw	r18, r12
    1cea:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__udivmodsi4>
    1cee:	da 01       	movw	r26, r20
    1cf0:	c9 01       	movw	r24, r18
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	a1 09       	sbc	r26, r1
    1cf6:	b1 09       	sbc	r27, r1
    1cf8:	b6 95       	lsr	r27
    1cfa:	a7 95       	ror	r26
    1cfc:	97 95       	ror	r25
    1cfe:	87 95       	ror	r24
    1d00:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1d02:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d04:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d06:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1d08:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d0a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d0c:	20 83       	st	Z, r18

  _written = false;
    1d0e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1d10:	ec 89       	ldd	r30, Y+20	; 0x14
    1d12:	fd 89       	ldd	r31, Y+21	; 0x15
    1d14:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1d16:	ea 89       	ldd	r30, Y+18	; 0x12
    1d18:	fb 89       	ldd	r31, Y+19	; 0x13
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 61       	ori	r24, 0x10	; 16
    1d1e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1d20:	ea 89       	ldd	r30, Y+18	; 0x12
    1d22:	fb 89       	ldd	r31, Y+19	; 0x13
    1d24:	80 81       	ld	r24, Z
    1d26:	88 60       	ori	r24, 0x08	; 8
    1d28:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1d2a:	ea 89       	ldd	r30, Y+18	; 0x12
    1d2c:	fb 89       	ldd	r31, Y+19	; 0x13
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 68       	ori	r24, 0x80	; 128
    1d32:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1d34:	ea 89       	ldd	r30, Y+18	; 0x12
    1d36:	fb 89       	ldd	r31, Y+19	; 0x13
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7d       	andi	r24, 0xDF	; 223
    1d3c:	80 83       	st	Z, r24
}
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	df 90       	pop	r13
    1d4a:	cf 90       	pop	r12
    1d4c:	08 95       	ret

00001d4e <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	08 95       	ret

00001d54 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	2f 93       	push	r18
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	ef 93       	push	r30
    1d66:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d68:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <Serial+0x10>
    1d6c:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <Serial+0x11>
    1d70:	80 81       	ld	r24, Z
    1d72:	e0 91 28 06 	lds	r30, 0x0628	; 0x800628 <Serial+0x16>
    1d76:	f0 91 29 06 	lds	r31, 0x0629	; 0x800629 <Serial+0x17>
    1d7a:	82 fd       	sbrc	r24, 2
    1d7c:	12 c0       	rjmp	.+36     	; 0x1da2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1d7e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1d80:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <Serial+0x19>
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1d88:	20 91 2c 06 	lds	r18, 0x062C	; 0x80062c <Serial+0x1a>
    1d8c:	82 17       	cp	r24, r18
    1d8e:	51 f0       	breq	.+20     	; 0x1da4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1d90:	e0 91 2b 06 	lds	r30, 0x062B	; 0x80062b <Serial+0x19>
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	ee 5e       	subi	r30, 0xEE	; 238
    1d98:	f9 4f       	sbci	r31, 0xF9	; 249
    1d9a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1d9c:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <Serial+0x19>
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1da2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1da4:	ff 91       	pop	r31
    1da6:	ef 91       	pop	r30
    1da8:	9f 91       	pop	r25
    1daa:	8f 91       	pop	r24
    1dac:	2f 91       	pop	r18
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f 90       	pop	r0
    1db4:	1f 90       	pop	r1
    1db6:	18 95       	reti

00001db8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1db8:	1f 92       	push	r1
    1dba:	0f 92       	push	r0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	0f 92       	push	r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	2f 93       	push	r18
    1dc4:	3f 93       	push	r19
    1dc6:	4f 93       	push	r20
    1dc8:	5f 93       	push	r21
    1dca:	6f 93       	push	r22
    1dcc:	7f 93       	push	r23
    1dce:	8f 93       	push	r24
    1dd0:	9f 93       	push	r25
    1dd2:	af 93       	push	r26
    1dd4:	bf 93       	push	r27
    1dd6:	ef 93       	push	r30
    1dd8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1dda:	82 e1       	ldi	r24, 0x12	; 18
    1ddc:	96 e0       	ldi	r25, 0x06	; 6
    1dde:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	7f 91       	pop	r23
    1df0:	6f 91       	pop	r22
    1df2:	5f 91       	pop	r21
    1df4:	4f 91       	pop	r20
    1df6:	3f 91       	pop	r19
    1df8:	2f 91       	pop	r18
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	0f 90       	pop	r0
    1e00:	1f 90       	pop	r1
    1e02:	18 95       	reti

00001e04 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1e04:	82 e1       	ldi	r24, 0x12	; 18
    1e06:	96 e0       	ldi	r25, 0x06	; 6
    1e08:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN14HardwareSerial9availableEv>
    1e0c:	21 e0       	ldi	r18, 0x01	; 1
    1e0e:	89 2b       	or	r24, r25
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <_Z17Serial0_availablev+0x10>
    1e12:	20 e0       	ldi	r18, 0x00	; 0
}
    1e14:	82 2f       	mov	r24, r18
    1e16:	08 95       	ret

00001e18 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e18:	e2 e1       	ldi	r30, 0x12	; 18
    1e1a:	f6 e0       	ldi	r31, 0x06	; 6
    1e1c:	13 82       	std	Z+3, r1	; 0x03
    1e1e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1e20:	88 ee       	ldi	r24, 0xE8	; 232
    1e22:	93 e0       	ldi	r25, 0x03	; 3
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	84 83       	std	Z+4, r24	; 0x04
    1e2a:	95 83       	std	Z+5, r25	; 0x05
    1e2c:	a6 83       	std	Z+6, r26	; 0x06
    1e2e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1e30:	8d e2       	ldi	r24, 0x2D	; 45
    1e32:	93 e0       	ldi	r25, 0x03	; 3
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	85 ec       	ldi	r24, 0xC5	; 197
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	95 87       	std	Z+13, r25	; 0x0d
    1e3e:	84 87       	std	Z+12, r24	; 0x0c
    1e40:	84 ec       	ldi	r24, 0xC4	; 196
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	97 87       	std	Z+15, r25	; 0x0f
    1e46:	86 87       	std	Z+14, r24	; 0x0e
    1e48:	80 ec       	ldi	r24, 0xC0	; 192
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	91 8b       	std	Z+17, r25	; 0x11
    1e4e:	80 8b       	std	Z+16, r24	; 0x10
    1e50:	81 ec       	ldi	r24, 0xC1	; 193
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	93 8b       	std	Z+19, r25	; 0x13
    1e56:	82 8b       	std	Z+18, r24	; 0x12
    1e58:	82 ec       	ldi	r24, 0xC2	; 194
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	95 8b       	std	Z+21, r25	; 0x15
    1e5e:	84 8b       	std	Z+20, r24	; 0x14
    1e60:	86 ec       	ldi	r24, 0xC6	; 198
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	97 8b       	std	Z+23, r25	; 0x17
    1e66:	86 8b       	std	Z+22, r24	; 0x16
    1e68:	11 8e       	std	Z+25, r1	; 0x19
    1e6a:	12 8e       	std	Z+26, r1	; 0x1a
    1e6c:	13 8e       	std	Z+27, r1	; 0x1b
    1e6e:	14 8e       	std	Z+28, r1	; 0x1c
    1e70:	08 95       	ret

00001e72 <initVariant>:
    1e72:	08 95       	ret

00001e74 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1e74:	0e 94 20 11 	call	0x2240	; 0x2240 <init>

	initVariant();
    1e78:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e7c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e80:	cf ea       	ldi	r28, 0xAF	; 175
    1e82:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e84:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <loop>
		if (serialEventRun) serialEventRun();
    1e88:	20 97       	sbiw	r28, 0x00	; 0
    1e8a:	e1 f3       	breq	.-8      	; 0x1e84 <main+0x10>
    1e8c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_Z14serialEventRunv>
    1e90:	f9 cf       	rjmp	.-14     	; 0x1e84 <main+0x10>

00001e92 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1e92:	cf 92       	push	r12
    1e94:	df 92       	push	r13
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	6c 01       	movw	r12, r24
    1ea4:	7a 01       	movw	r14, r20
    1ea6:	8b 01       	movw	r16, r22
    1ea8:	c0 e0       	ldi	r28, 0x00	; 0
    1eaa:	d0 e0       	ldi	r29, 0x00	; 0
    1eac:	ce 15       	cp	r28, r14
    1eae:	df 05       	cpc	r29, r15
    1eb0:	81 f0       	breq	.+32     	; 0x1ed2 <_ZN5Print5writeEPKhj+0x40>
    1eb2:	d8 01       	movw	r26, r16
    1eb4:	6d 91       	ld	r22, X+
    1eb6:	8d 01       	movw	r16, r26
    1eb8:	d6 01       	movw	r26, r12
    1eba:	ed 91       	ld	r30, X+
    1ebc:	fc 91       	ld	r31, X
    1ebe:	01 90       	ld	r0, Z+
    1ec0:	f0 81       	ld	r31, Z
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	c6 01       	movw	r24, r12
    1ec6:	09 95       	icall
    1ec8:	89 2b       	or	r24, r25
    1eca:	11 f0       	breq	.+4      	; 0x1ed0 <_ZN5Print5writeEPKhj+0x3e>
    1ecc:	21 96       	adiw	r28, 0x01	; 1
    1ece:	ee cf       	rjmp	.-36     	; 0x1eac <_ZN5Print5writeEPKhj+0x1a>
    1ed0:	7e 01       	movw	r14, r28
    1ed2:	c7 01       	movw	r24, r14
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	1f 91       	pop	r17
    1eda:	0f 91       	pop	r16
    1edc:	ff 90       	pop	r15
    1ede:	ef 90       	pop	r14
    1ee0:	df 90       	pop	r13
    1ee2:	cf 90       	pop	r12
    1ee4:	08 95       	ret

00001ee6 <_ZN5Print5printERK6String>:
    1ee6:	db 01       	movw	r26, r22
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	4d 91       	ld	r20, X+
    1eec:	5c 91       	ld	r21, X
    1eee:	15 97       	sbiw	r26, 0x05	; 5
    1ef0:	6d 91       	ld	r22, X+
    1ef2:	7c 91       	ld	r23, X
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	ed 91       	ld	r30, X+
    1ef8:	fc 91       	ld	r31, X
    1efa:	02 80       	ldd	r0, Z+2	; 0x02
    1efc:	f3 81       	ldd	r31, Z+3	; 0x03
    1efe:	e0 2d       	mov	r30, r0
    1f00:	09 94       	ijmp

00001f02 <_ZN5Print5printEPKc>:
    1f02:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_ZN5Print5writeEPKc>

00001f06 <_ZN5Print5printEc>:
    1f06:	dc 01       	movw	r26, r24
    1f08:	ed 91       	ld	r30, X+
    1f0a:	fc 91       	ld	r31, X
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	f0 81       	ld	r31, Z
    1f10:	e0 2d       	mov	r30, r0
    1f12:	09 94       	ijmp

00001f14 <_ZN5Print7printlnEv>:
    1f14:	6d e6       	ldi	r22, 0x6D	; 109
    1f16:	72 e0       	ldi	r23, 0x02	; 2
    1f18:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_ZN5Print5writeEPKc>

00001f1c <_ZN5Print7printlnEPKc>:
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
    1f26:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN5Print5writeEPKc>
    1f2a:	8c 01       	movw	r16, r24
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN5Print7printlnEv>
    1f32:	80 0f       	add	r24, r16
    1f34:	91 1f       	adc	r25, r17
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	08 95       	ret

00001f40 <_ZN5Print11printNumberEmh>:
    1f40:	8f 92       	push	r8
    1f42:	9f 92       	push	r9
    1f44:	af 92       	push	r10
    1f46:	bf 92       	push	r11
    1f48:	ef 92       	push	r14
    1f4a:	ff 92       	push	r15
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	a1 97       	sbiw	r28, 0x21	; 33
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	7c 01       	movw	r14, r24
    1f66:	fa 01       	movw	r30, r20
    1f68:	cb 01       	movw	r24, r22
    1f6a:	19 a2       	std	Y+33, r1	; 0x21
    1f6c:	22 30       	cpi	r18, 0x02	; 2
    1f6e:	08 f4       	brcc	.+2      	; 0x1f72 <_ZN5Print11printNumberEmh+0x32>
    1f70:	2a e0       	ldi	r18, 0x0A	; 10
    1f72:	8e 01       	movw	r16, r28
    1f74:	0f 5d       	subi	r16, 0xDF	; 223
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	82 2e       	mov	r8, r18
    1f7a:	91 2c       	mov	r9, r1
    1f7c:	a1 2c       	mov	r10, r1
    1f7e:	b1 2c       	mov	r11, r1
    1f80:	bf 01       	movw	r22, r30
    1f82:	a5 01       	movw	r20, r10
    1f84:	94 01       	movw	r18, r8
    1f86:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__udivmodsi4>
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	ca 01       	movw	r24, r20
    1f8e:	01 50       	subi	r16, 0x01	; 1
    1f90:	11 09       	sbc	r17, r1
    1f92:	6a 30       	cpi	r22, 0x0A	; 10
    1f94:	10 f4       	brcc	.+4      	; 0x1f9a <_ZN5Print11printNumberEmh+0x5a>
    1f96:	60 5d       	subi	r22, 0xD0	; 208
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <_ZN5Print11printNumberEmh+0x5c>
    1f9a:	69 5c       	subi	r22, 0xC9	; 201
    1f9c:	d8 01       	movw	r26, r16
    1f9e:	6c 93       	st	X, r22
    1fa0:	23 2b       	or	r18, r19
    1fa2:	24 2b       	or	r18, r20
    1fa4:	25 2b       	or	r18, r21
    1fa6:	61 f7       	brne	.-40     	; 0x1f80 <_ZN5Print11printNumberEmh+0x40>
    1fa8:	b8 01       	movw	r22, r16
    1faa:	c7 01       	movw	r24, r14
    1fac:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN5Print5writeEPKc>
    1fb0:	a1 96       	adiw	r28, 0x21	; 33
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	bf 90       	pop	r11
    1fca:	af 90       	pop	r10
    1fcc:	9f 90       	pop	r9
    1fce:	8f 90       	pop	r8
    1fd0:	08 95       	ret

00001fd2 <_ZN5Print5printEmi>:
    1fd2:	21 15       	cp	r18, r1
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	41 f4       	brne	.+16     	; 0x1fe8 <_ZN5Print5printEmi+0x16>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	ed 91       	ld	r30, X+
    1fdc:	fc 91       	ld	r31, X
    1fde:	01 90       	ld	r0, Z+
    1fe0:	f0 81       	ld	r31, Z
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	64 2f       	mov	r22, r20
    1fe6:	09 94       	ijmp
    1fe8:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_ZN5Print11printNumberEmh>

00001fec <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1ff6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN5Print5printEmi>
    1ffa:	8c 01       	movw	r16, r24
  n += println();
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN5Print7printlnEv>
  return n;
}
    2002:	80 0f       	add	r24, r16
    2004:	91 1f       	adc	r25, r17
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	08 95       	ret

00002010 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
  if (base == 0) {
    2020:	21 15       	cp	r18, r1
    2022:	31 05       	cpc	r19, r1
    2024:	81 f4       	brne	.+32     	; 0x2046 <_ZN5Print5printEli+0x36>
    return write(n);
    2026:	dc 01       	movw	r26, r24
    2028:	ed 91       	ld	r30, X+
    202a:	fc 91       	ld	r31, X
    202c:	01 90       	ld	r0, Z+
    202e:	f0 81       	ld	r31, Z
    2030:	e0 2d       	mov	r30, r0
    2032:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2044:	09 94       	ijmp
  } else if (base == 10) {
    2046:	2a 30       	cpi	r18, 0x0A	; 10
    2048:	31 05       	cpc	r19, r1
    204a:	01 f5       	brne	.+64     	; 0x208c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    204c:	77 ff       	sbrs	r23, 7
    204e:	1d c0       	rjmp	.+58     	; 0x208a <_ZN5Print5printEli+0x7a>
    2050:	6a 01       	movw	r12, r20
    2052:	7b 01       	movw	r14, r22
    2054:	ec 01       	movw	r28, r24
      int t = print('-');
    2056:	6d e2       	ldi	r22, 0x2D	; 45
    2058:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN5Print5printEc>
    205c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    205e:	44 27       	eor	r20, r20
    2060:	55 27       	eor	r21, r21
    2062:	ba 01       	movw	r22, r20
    2064:	4c 19       	sub	r20, r12
    2066:	5d 09       	sbc	r21, r13
    2068:	6e 09       	sbc	r22, r14
    206a:	7f 09       	sbc	r23, r15
    206c:	2a e0       	ldi	r18, 0x0A	; 10
    206e:	ce 01       	movw	r24, r28
    2070:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print11printNumberEmh>
    2074:	80 0f       	add	r24, r16
    2076:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	df 90       	pop	r13
    2086:	cf 90       	pop	r12
    2088:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    208a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    209c:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_ZN5Print11printNumberEmh>

000020a0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    20a0:	9a 01       	movw	r18, r20
  return print((long) n, base);
    20a2:	ab 01       	movw	r20, r22
    20a4:	77 0f       	add	r23, r23
    20a6:	66 0b       	sbc	r22, r22
    20a8:	77 0b       	sbc	r23, r23
    20aa:	0c 94 08 10 	jmp	0x2010	; 0x2010 <_ZN5Print5printEli>

000020ae <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    20b8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_ZN5Print5printEii>
    20bc:	8c 01       	movw	r16, r24
  n += println();
    20be:	ce 01       	movw	r24, r28
    20c0:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN5Print7printlnEv>
  return n;
}
    20c4:	80 0f       	add	r24, r16
    20c6:	91 1f       	adc	r25, r17
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	08 95       	ret

000020d2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    20d2:	1f 92       	push	r1
    20d4:	0f 92       	push	r0
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	0f 92       	push	r0
    20da:	11 24       	eor	r1, r1
    20dc:	2f 93       	push	r18
    20de:	3f 93       	push	r19
    20e0:	8f 93       	push	r24
    20e2:	9f 93       	push	r25
    20e4:	af 93       	push	r26
    20e6:	bf 93       	push	r27
    20e8:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <timer0_millis>
    20ec:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <timer0_millis+0x1>
    20f0:	a0 91 b2 06 	lds	r26, 0x06B2	; 0x8006b2 <timer0_millis+0x2>
    20f4:	b0 91 b3 06 	lds	r27, 0x06B3	; 0x8006b3 <timer0_millis+0x3>
    20f8:	30 91 af 06 	lds	r19, 0x06AF	; 0x8006af <timer0_fract>
    20fc:	26 e0       	ldi	r18, 0x06	; 6
    20fe:	23 0f       	add	r18, r19
    2100:	2d 37       	cpi	r18, 0x7D	; 125
    2102:	20 f4       	brcc	.+8      	; 0x210c <__vector_16+0x3a>
    2104:	02 96       	adiw	r24, 0x02	; 2
    2106:	a1 1d       	adc	r26, r1
    2108:	b1 1d       	adc	r27, r1
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <__vector_16+0x44>
    210c:	29 e8       	ldi	r18, 0x89	; 137
    210e:	23 0f       	add	r18, r19
    2110:	03 96       	adiw	r24, 0x03	; 3
    2112:	a1 1d       	adc	r26, r1
    2114:	b1 1d       	adc	r27, r1
    2116:	20 93 af 06 	sts	0x06AF, r18	; 0x8006af <timer0_fract>
    211a:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <timer0_millis>
    211e:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <timer0_millis+0x1>
    2122:	a0 93 b2 06 	sts	0x06B2, r26	; 0x8006b2 <timer0_millis+0x2>
    2126:	b0 93 b3 06 	sts	0x06B3, r27	; 0x8006b3 <timer0_millis+0x3>
    212a:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <timer0_overflow_count>
    212e:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <timer0_overflow_count+0x1>
    2132:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <timer0_overflow_count+0x2>
    2136:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <timer0_overflow_count+0x3>
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	a1 1d       	adc	r26, r1
    213e:	b1 1d       	adc	r27, r1
    2140:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <timer0_overflow_count>
    2144:	90 93 b5 06 	sts	0x06B5, r25	; 0x8006b5 <timer0_overflow_count+0x1>
    2148:	a0 93 b6 06 	sts	0x06B6, r26	; 0x8006b6 <timer0_overflow_count+0x2>
    214c:	b0 93 b7 06 	sts	0x06B7, r27	; 0x8006b7 <timer0_overflow_count+0x3>
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	3f 91       	pop	r19
    215a:	2f 91       	pop	r18
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	0f 90       	pop	r0
    2162:	1f 90       	pop	r1
    2164:	18 95       	reti

00002166 <millis>:
    2166:	2f b7       	in	r18, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	60 91 b0 06 	lds	r22, 0x06B0	; 0x8006b0 <timer0_millis>
    216e:	70 91 b1 06 	lds	r23, 0x06B1	; 0x8006b1 <timer0_millis+0x1>
    2172:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <timer0_millis+0x2>
    2176:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <timer0_millis+0x3>
    217a:	2f bf       	out	0x3f, r18	; 63
    217c:	08 95       	ret

0000217e <micros>:
    217e:	3f b7       	in	r19, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <timer0_overflow_count>
    2186:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <timer0_overflow_count+0x1>
    218a:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <timer0_overflow_count+0x2>
    218e:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <timer0_overflow_count+0x3>
    2192:	26 b5       	in	r18, 0x26	; 38
    2194:	a8 9b       	sbis	0x15, 0	; 21
    2196:	05 c0       	rjmp	.+10     	; 0x21a2 <micros+0x24>
    2198:	2f 3f       	cpi	r18, 0xFF	; 255
    219a:	19 f0       	breq	.+6      	; 0x21a2 <micros+0x24>
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	a1 1d       	adc	r26, r1
    21a0:	b1 1d       	adc	r27, r1
    21a2:	3f bf       	out	0x3f, r19	; 63
    21a4:	ba 2f       	mov	r27, r26
    21a6:	a9 2f       	mov	r26, r25
    21a8:	98 2f       	mov	r25, r24
    21aa:	88 27       	eor	r24, r24
    21ac:	82 0f       	add	r24, r18
    21ae:	91 1d       	adc	r25, r1
    21b0:	a1 1d       	adc	r26, r1
    21b2:	b1 1d       	adc	r27, r1
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	43 e0       	ldi	r20, 0x03	; 3
    21ba:	66 0f       	add	r22, r22
    21bc:	77 1f       	adc	r23, r23
    21be:	88 1f       	adc	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	4a 95       	dec	r20
    21c4:	d1 f7       	brne	.-12     	; 0x21ba <micros+0x3c>
    21c6:	08 95       	ret

000021c8 <delay>:
    21c8:	8f 92       	push	r8
    21ca:	9f 92       	push	r9
    21cc:	af 92       	push	r10
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	6b 01       	movw	r12, r22
    21da:	7c 01       	movw	r14, r24
    21dc:	0e 94 bf 10 	call	0x217e	; 0x217e <micros>
    21e0:	4b 01       	movw	r8, r22
    21e2:	5c 01       	movw	r10, r24
    21e4:	c1 14       	cp	r12, r1
    21e6:	d1 04       	cpc	r13, r1
    21e8:	e1 04       	cpc	r14, r1
    21ea:	f1 04       	cpc	r15, r1
    21ec:	01 f1       	breq	.+64     	; 0x222e <delay+0x66>
    21ee:	0e 94 4b 14 	call	0x2896	; 0x2896 <yield>
    21f2:	0e 94 bf 10 	call	0x217e	; 0x217e <micros>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	88 19       	sub	r24, r8
    21fc:	99 09       	sbc	r25, r9
    21fe:	aa 09       	sbc	r26, r10
    2200:	bb 09       	sbc	r27, r11
    2202:	88 3e       	cpi	r24, 0xE8	; 232
    2204:	93 40       	sbci	r25, 0x03	; 3
    2206:	a1 05       	cpc	r26, r1
    2208:	b1 05       	cpc	r27, r1
    220a:	60 f3       	brcs	.-40     	; 0x21e4 <delay+0x1c>
    220c:	21 e0       	ldi	r18, 0x01	; 1
    220e:	c2 1a       	sub	r12, r18
    2210:	d1 08       	sbc	r13, r1
    2212:	e1 08       	sbc	r14, r1
    2214:	f1 08       	sbc	r15, r1
    2216:	88 ee       	ldi	r24, 0xE8	; 232
    2218:	88 0e       	add	r8, r24
    221a:	83 e0       	ldi	r24, 0x03	; 3
    221c:	98 1e       	adc	r9, r24
    221e:	a1 1c       	adc	r10, r1
    2220:	b1 1c       	adc	r11, r1
    2222:	c1 14       	cp	r12, r1
    2224:	d1 04       	cpc	r13, r1
    2226:	e1 04       	cpc	r14, r1
    2228:	f1 04       	cpc	r15, r1
    222a:	19 f7       	brne	.-58     	; 0x21f2 <delay+0x2a>
    222c:	db cf       	rjmp	.-74     	; 0x21e4 <delay+0x1c>
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	9f 90       	pop	r9
    223c:	8f 90       	pop	r8
    223e:	08 95       	ret

00002240 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2240:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2242:	84 b5       	in	r24, 0x24	; 36
    2244:	82 60       	ori	r24, 0x02	; 2
    2246:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2248:	84 b5       	in	r24, 0x24	; 36
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    224e:	85 b5       	in	r24, 0x25	; 37
    2250:	82 60       	ori	r24, 0x02	; 2
    2252:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2254:	85 b5       	in	r24, 0x25	; 37
    2256:	81 60       	ori	r24, 0x01	; 1
    2258:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    225a:	ee e6       	ldi	r30, 0x6E	; 110
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2264:	e1 e8       	ldi	r30, 0x81	; 129
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    226a:	80 81       	ld	r24, Z
    226c:	82 60       	ori	r24, 0x02	; 2
    226e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2270:	80 81       	ld	r24, Z
    2272:	81 60       	ori	r24, 0x01	; 1
    2274:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2276:	e0 e8       	ldi	r30, 0x80	; 128
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	81 60       	ori	r24, 0x01	; 1
    227e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2280:	e1 eb       	ldi	r30, 0xB1	; 177
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	84 60       	ori	r24, 0x04	; 4
    2288:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    228a:	e0 eb       	ldi	r30, 0xB0	; 176
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	81 60       	ori	r24, 0x01	; 1
    2292:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2294:	ea e7       	ldi	r30, 0x7A	; 122
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	84 60       	ori	r24, 0x04	; 4
    229c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    229e:	80 81       	ld	r24, Z
    22a0:	82 60       	ori	r24, 0x02	; 2
    22a2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    22a4:	80 81       	ld	r24, Z
    22a6:	8e 7f       	andi	r24, 0xFE	; 254
    22a8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    22aa:	80 81       	ld	r24, Z
    22ac:	80 68       	ori	r24, 0x80	; 128
    22ae:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    22b0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    22b4:	08 95       	ret

000022b6 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    22b6:	fc 01       	movw	r30, r24
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <free>

000022c0 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    22c6:	88 81       	ld	r24, Y
    22c8:	99 81       	ldd	r25, Y+1	; 0x01
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <_ZN6String10invalidateEv+0x12>
    22ce:	0e 94 01 16 	call	0x2c02	; 0x2c02 <free>
	buffer = NULL;
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	18 82       	st	Y, r1
	capacity = len = 0;
    22d6:	1d 82       	std	Y+5, r1	; 0x05
    22d8:	1c 82       	std	Y+4, r1	; 0x04
    22da:	1b 82       	std	Y+3, r1	; 0x03
    22dc:	1a 82       	std	Y+2, r1	; 0x02
}
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	08 95       	ret

000022e4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	ec 01       	movw	r28, r24
    22ee:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    22f0:	6f 5f       	subi	r22, 0xFF	; 255
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	88 81       	ld	r24, Y
    22f6:	99 81       	ldd	r25, Y+1	; 0x01
    22f8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <realloc>
	if (newbuffer) {
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	31 f0       	breq	.+12     	; 0x230c <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2300:	99 83       	std	Y+1, r25	; 0x01
    2302:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2304:	1b 83       	std	Y+3, r17	; 0x03
    2306:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	01 c0       	rjmp	.+2      	; 0x230e <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    230c:	80 e0       	ldi	r24, 0x00	; 0
}
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	08 95       	ret

00002318 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    231e:	88 81       	ld	r24, Y
    2320:	99 81       	ldd	r25, Y+1	; 0x01
    2322:	89 2b       	or	r24, r25
    2324:	29 f0       	breq	.+10     	; 0x2330 <_ZN6String7reserveEj+0x18>
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	9b 81       	ldd	r25, Y+3	; 0x03
    232a:	86 17       	cp	r24, r22
    232c:	97 07       	cpc	r25, r23
    232e:	60 f4       	brcc	.+24     	; 0x2348 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    2330:	ce 01       	movw	r24, r28
    2332:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN6String12changeBufferEj>
    2336:	88 23       	and	r24, r24
    2338:	41 f0       	breq	.+16     	; 0x234a <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    233a:	8c 81       	ldd	r24, Y+4	; 0x04
    233c:	9d 81       	ldd	r25, Y+5	; 0x05
    233e:	89 2b       	or	r24, r25
    2340:	19 f4       	brne	.+6      	; 0x2348 <_ZN6String7reserveEj+0x30>
    2342:	e8 81       	ld	r30, Y
    2344:	f9 81       	ldd	r31, Y+1	; 0x01
    2346:	10 82       	st	Z, r1
    2348:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	08 95       	ret

00002350 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	ec 01       	movw	r28, r24
    235e:	7b 01       	movw	r14, r22
    2360:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2362:	ba 01       	movw	r22, r20
    2364:	0e 94 8c 11 	call	0x2318	; 0x2318 <_ZN6String7reserveEj>
    2368:	81 11       	cpse	r24, r1
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    236c:	ce 01       	movw	r24, r28
    236e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN6String10invalidateEv>
		return *this;
    2372:	07 c0       	rjmp	.+14     	; 0x2382 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2374:	1d 83       	std	Y+5, r17	; 0x05
    2376:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2378:	b7 01       	movw	r22, r14
    237a:	88 81       	ld	r24, Y
    237c:	99 81       	ldd	r25, Y+1	; 0x01
    237e:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <strcpy>
	return *this;
}
    2382:	ce 01       	movw	r24, r28
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	08 95       	ret

00002392 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2392:	fc 01       	movw	r30, r24
    2394:	11 82       	std	Z+1, r1	; 0x01
    2396:	10 82       	st	Z, r1
	capacity = 0;
    2398:	13 82       	std	Z+3, r1	; 0x03
    239a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    239c:	15 82       	std	Z+5, r1	; 0x05
    239e:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    23a0:	61 15       	cp	r22, r1
    23a2:	71 05       	cpc	r23, r1
    23a4:	51 f0       	breq	.+20     	; 0x23ba <_ZN6StringC1EPKc+0x28>
    23a6:	fb 01       	movw	r30, r22
    23a8:	01 90       	ld	r0, Z+
    23aa:	00 20       	and	r0, r0
    23ac:	e9 f7       	brne	.-6      	; 0x23a8 <_ZN6StringC1EPKc+0x16>
    23ae:	31 97       	sbiw	r30, 0x01	; 1
    23b0:	af 01       	movw	r20, r30
    23b2:	46 1b       	sub	r20, r22
    23b4:	57 0b       	sbc	r21, r23
    23b6:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <_ZN6String4copyEPKcj>
    23ba:	08 95       	ret

000023bc <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    23bc:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    23c0:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    23c4:	28 17       	cp	r18, r24
    23c6:	39 07       	cpc	r19, r25
    23c8:	b9 f4       	brne	.+46     	; 0x23f8 <_ZN14SoftwareSerial4readEv+0x3c>
    23ca:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    23ce:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    23d2:	98 17       	cp	r25, r24
    23d4:	89 f0       	breq	.+34     	; 0x23f8 <_ZN14SoftwareSerial4readEv+0x3c>
    23d6:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	e6 54       	subi	r30, 0x46	; 70
    23de:	f9 4f       	sbci	r31, 0xF9	; 249
    23e0:	80 81       	ld	r24, Z
    23e2:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	2f 73       	andi	r18, 0x3F	; 63
    23ee:	33 27       	eor	r19, r19
    23f0:	20 93 b8 06 	sts	0x06B8, r18	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	08 95       	ret
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	9f ef       	ldi	r25, 0xFF	; 255
    23fc:	08 95       	ret

000023fe <_ZN14SoftwareSerial5writeEh>:
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	dc 01       	movw	r26, r24
    2406:	5c 96       	adiw	r26, 0x1c	; 28
    2408:	8d 91       	ld	r24, X+
    240a:	9c 91       	ld	r25, X
    240c:	5d 97       	sbiw	r26, 0x1d	; 29
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	39 f4       	brne	.+14     	; 0x2420 <_ZN14SoftwareSerial5writeEh+0x22>
    2412:	21 e0       	ldi	r18, 0x01	; 1
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	13 96       	adiw	r26, 0x03	; 3
    2418:	3c 93       	st	X, r19
    241a:	2e 93       	st	-X, r18
    241c:	12 97       	sbiw	r26, 0x02	; 2
    241e:	3b c0       	rjmp	.+118    	; 0x2496 <_ZN14SoftwareSerial5writeEh+0x98>
    2420:	51 96       	adiw	r26, 0x11	; 17
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	52 97       	sbiw	r26, 0x12	; 18
    2428:	50 96       	adiw	r26, 0x10	; 16
    242a:	2c 91       	ld	r18, X
    242c:	50 97       	sbiw	r26, 0x10	; 16
    242e:	32 2f       	mov	r19, r18
    2430:	30 95       	com	r19
    2432:	1f b7       	in	r17, 0x3f	; 63
    2434:	5e 96       	adiw	r26, 0x1e	; 30
    2436:	4c 91       	ld	r20, X
    2438:	5e 97       	sbiw	r26, 0x1e	; 30
    243a:	74 2f       	mov	r23, r20
    243c:	72 70       	andi	r23, 0x02	; 2
    243e:	41 fd       	sbrc	r20, 1
    2440:	60 95       	com	r22
    2442:	f8 94       	cli
    2444:	40 81       	ld	r20, Z
    2446:	77 23       	and	r23, r23
    2448:	11 f0       	breq	.+4      	; 0x244e <_ZN14SoftwareSerial5writeEh+0x50>
    244a:	42 2b       	or	r20, r18
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <_ZN14SoftwareSerial5writeEh+0x52>
    244e:	43 23       	and	r20, r19
    2450:	40 83       	st	Z, r20
    2452:	ec 01       	movw	r28, r24
    2454:	21 97       	sbiw	r28, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <_ZN14SoftwareSerial5writeEh+0x56>
    2458:	48 e0       	ldi	r20, 0x08	; 8
    245a:	50 81       	ld	r21, Z
    245c:	60 ff       	sbrs	r22, 0
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <_ZN14SoftwareSerial5writeEh+0x66>
    2460:	52 2b       	or	r21, r18
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <_ZN14SoftwareSerial5writeEh+0x68>
    2464:	53 23       	and	r21, r19
    2466:	50 83       	st	Z, r21
    2468:	ec 01       	movw	r28, r24
    246a:	21 97       	sbiw	r28, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <_ZN14SoftwareSerial5writeEh+0x6c>
    246e:	66 95       	lsr	r22
    2470:	41 50       	subi	r20, 0x01	; 1
    2472:	99 f7       	brne	.-26     	; 0x245a <_ZN14SoftwareSerial5writeEh+0x5c>
    2474:	80 81       	ld	r24, Z
    2476:	77 23       	and	r23, r23
    2478:	19 f0       	breq	.+6      	; 0x2480 <_ZN14SoftwareSerial5writeEh+0x82>
    247a:	83 23       	and	r24, r19
    247c:	80 83       	st	Z, r24
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <_ZN14SoftwareSerial5writeEh+0x86>
    2480:	28 2b       	or	r18, r24
    2482:	20 83       	st	Z, r18
    2484:	1f bf       	out	0x3f, r17	; 63
    2486:	5c 96       	adiw	r26, 0x1c	; 28
    2488:	8d 91       	ld	r24, X+
    248a:	9c 91       	ld	r25, X
    248c:	5d 97       	sbiw	r26, 0x1d	; 29
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <_ZN14SoftwareSerial5writeEh+0x90>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	1f 91       	pop	r17
    249c:	08 95       	ret

0000249e <_ZN14SoftwareSerial5flushEv>:
    249e:	08 95       	ret

000024a0 <_ZN14SoftwareSerial4peekEv>:
    24a0:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    24a4:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    24a8:	28 17       	cp	r18, r24
    24aa:	39 07       	cpc	r19, r25
    24ac:	71 f4       	brne	.+28     	; 0x24ca <_ZN14SoftwareSerial4peekEv+0x2a>
    24ae:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    24b2:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    24b6:	98 17       	cp	r25, r24
    24b8:	41 f0       	breq	.+16     	; 0x24ca <_ZN14SoftwareSerial4peekEv+0x2a>
    24ba:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	e6 54       	subi	r30, 0x46	; 70
    24c2:	f9 4f       	sbci	r31, 0xF9	; 249
    24c4:	80 81       	ld	r24, Z
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	08 95       	ret
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
    24cc:	9f ef       	ldi	r25, 0xFF	; 255
    24ce:	08 95       	ret

000024d0 <_ZN14SoftwareSerial9availableEv>:
    24d0:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    24d4:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    24d8:	28 17       	cp	r18, r24
    24da:	39 07       	cpc	r19, r25
    24dc:	71 f4       	brne	.+28     	; 0x24fa <_ZN14SoftwareSerial9availableEv+0x2a>
    24de:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    24e2:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	80 5c       	subi	r24, 0xC0	; 192
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	82 1b       	sub	r24, r18
    24ee:	91 09       	sbc	r25, r1
    24f0:	60 e4       	ldi	r22, 0x40	; 64
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__divmodhi4>
    24f8:	08 95       	ret
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	08 95       	ret

00002500 <_ZN14SoftwareSerial13stopListeningEv>:
    2500:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    2504:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    2508:	e8 17       	cp	r30, r24
    250a:	f9 07       	cpc	r31, r25
    250c:	69 f4       	brne	.+26     	; 0x2528 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    250e:	a3 89       	ldd	r26, Z+19	; 0x13
    2510:	b4 89       	ldd	r27, Z+20	; 0x14
    2512:	9c 91       	ld	r25, X
    2514:	85 89       	ldd	r24, Z+21	; 0x15
    2516:	80 95       	com	r24
    2518:	89 23       	and	r24, r25
    251a:	8c 93       	st	X, r24
    251c:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    2520:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	08 95       	ret
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	08 95       	ret

0000252c <_ZN14SoftwareSerial6listenEv>:
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	ec 01       	movw	r28, r24
    2532:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2534:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2536:	89 2b       	or	r24, r25
    2538:	f1 f0       	breq	.+60     	; 0x2576 <_ZN14SoftwareSerial6listenEv+0x4a>
    253a:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    253e:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    2542:	c8 17       	cp	r28, r24
    2544:	d9 07       	cpc	r29, r25
    2546:	b9 f0       	breq	.+46     	; 0x2576 <_ZN14SoftwareSerial6listenEv+0x4a>
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	11 f0       	breq	.+4      	; 0x2550 <_ZN14SoftwareSerial6listenEv+0x24>
    254c:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN14SoftwareSerial13stopListeningEv>
    2550:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2552:	8e 7f       	andi	r24, 0xFE	; 254
    2554:	8e 8f       	std	Y+30, r24	; 0x1e
    2556:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    255a:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    255e:	d0 93 fb 06 	sts	0x06FB, r29	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    2562:	c0 93 fa 06 	sts	0x06FA, r28	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    2566:	eb 89       	ldd	r30, Y+19	; 0x13
    2568:	fc 89       	ldd	r31, Y+20	; 0x14
    256a:	90 81       	ld	r25, Z
    256c:	8d 89       	ldd	r24, Y+21	; 0x15
    256e:	89 2b       	or	r24, r25
    2570:	80 83       	st	Z, r24
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <_ZN14SoftwareSerial6listenEv+0x4c>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	08 95       	ret

0000257e <__vector_3>:
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	2f 93       	push	r18
    258a:	3f 93       	push	r19
    258c:	4f 93       	push	r20
    258e:	5f 93       	push	r21
    2590:	6f 93       	push	r22
    2592:	7f 93       	push	r23
    2594:	8f 93       	push	r24
    2596:	9f 93       	push	r25
    2598:	af 93       	push	r26
    259a:	bf 93       	push	r27
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
    25a0:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <_ZN14SoftwareSerial13active_objectE>
    25a4:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <_ZN14SoftwareSerial13active_objectE+0x1>
    25a8:	30 97       	sbiw	r30, 0x00	; 0
    25aa:	09 f4       	brne	.+2      	; 0x25ae <__vector_3+0x30>
    25ac:	51 c0       	rjmp	.+162    	; 0x2650 <__vector_3+0xd2>
    25ae:	96 8d       	ldd	r25, Z+30	; 0x1e
    25b0:	a6 85       	ldd	r26, Z+14	; 0x0e
    25b2:	b7 85       	ldd	r27, Z+15	; 0x0f
    25b4:	85 85       	ldd	r24, Z+13	; 0x0d
    25b6:	91 ff       	sbrs	r25, 1
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <__vector_3+0x44>
    25ba:	9c 91       	ld	r25, X
    25bc:	89 23       	and	r24, r25
    25be:	29 f4       	brne	.+10     	; 0x25ca <__vector_3+0x4c>
    25c0:	47 c0       	rjmp	.+142    	; 0x2650 <__vector_3+0xd2>
    25c2:	9c 91       	ld	r25, X
    25c4:	89 23       	and	r24, r25
    25c6:	09 f0       	breq	.+2      	; 0x25ca <__vector_3+0x4c>
    25c8:	43 c0       	rjmp	.+134    	; 0x2650 <__vector_3+0xd2>
    25ca:	a3 89       	ldd	r26, Z+19	; 0x13
    25cc:	b4 89       	ldd	r27, Z+20	; 0x14
    25ce:	9c 91       	ld	r25, X
    25d0:	85 89       	ldd	r24, Z+21	; 0x15
    25d2:	80 95       	com	r24
    25d4:	89 23       	and	r24, r25
    25d6:	8c 93       	st	X, r24
    25d8:	86 89       	ldd	r24, Z+22	; 0x16
    25da:	97 89       	ldd	r25, Z+23	; 0x17
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <__vector_3+0x5e>
    25e0:	60 8d       	ldd	r22, Z+24	; 0x18
    25e2:	71 8d       	ldd	r23, Z+25	; 0x19
    25e4:	a6 85       	ldd	r26, Z+14	; 0x0e
    25e6:	b7 85       	ldd	r27, Z+15	; 0x0f
    25e8:	55 85       	ldd	r21, Z+13	; 0x0d
    25ea:	38 e0       	ldi	r19, 0x08	; 8
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	cb 01       	movw	r24, r22
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <__vector_3+0x72>
    25f4:	82 2f       	mov	r24, r18
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	95 95       	asr	r25
    25fa:	87 95       	ror	r24
    25fc:	28 2f       	mov	r18, r24
    25fe:	4c 91       	ld	r20, X
    2600:	45 23       	and	r20, r21
    2602:	09 f0       	breq	.+2      	; 0x2606 <__vector_3+0x88>
    2604:	20 68       	ori	r18, 0x80	; 128
    2606:	31 50       	subi	r19, 0x01	; 1
    2608:	91 f7       	brne	.-28     	; 0x25ee <__vector_3+0x70>
    260a:	86 8d       	ldd	r24, Z+30	; 0x1e
    260c:	81 fd       	sbrc	r24, 1
    260e:	20 95       	com	r18
    2610:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	8f 73       	andi	r24, 0x3F	; 63
    261a:	99 27       	eor	r25, r25
    261c:	30 91 b8 06 	lds	r19, 0x06B8	; 0x8006b8 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2620:	38 17       	cp	r19, r24
    2622:	49 f0       	breq	.+18     	; 0x2636 <__vector_3+0xb8>
    2624:	a0 91 b9 06 	lds	r26, 0x06B9	; 0x8006b9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	a6 54       	subi	r26, 0x46	; 70
    262c:	b9 4f       	sbci	r27, 0xF9	; 249
    262e:	2c 93       	st	X, r18
    2630:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2634:	03 c0       	rjmp	.+6      	; 0x263c <__vector_3+0xbe>
    2636:	86 8d       	ldd	r24, Z+30	; 0x1e
    2638:	81 60       	ori	r24, 0x01	; 1
    263a:	86 8f       	std	Z+30, r24	; 0x1e
    263c:	82 8d       	ldd	r24, Z+26	; 0x1a
    263e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <__vector_3+0xc2>
    2644:	a3 89       	ldd	r26, Z+19	; 0x13
    2646:	b4 89       	ldd	r27, Z+20	; 0x14
    2648:	9c 91       	ld	r25, X
    264a:	85 89       	ldd	r24, Z+21	; 0x15
    264c:	89 2b       	or	r24, r25
    264e:	8c 93       	st	X, r24
    2650:	ff 91       	pop	r31
    2652:	ef 91       	pop	r30
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	7f 91       	pop	r23
    265e:	6f 91       	pop	r22
    2660:	5f 91       	pop	r21
    2662:	4f 91       	pop	r20
    2664:	3f 91       	pop	r19
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	1f 90       	pop	r1
    2670:	18 95       	reti

00002672 <_ZN14SoftwareSerialD1Ev>:
    2672:	2b e4       	ldi	r18, 0x4B	; 75
    2674:	33 e0       	ldi	r19, 0x03	; 3
    2676:	fc 01       	movw	r30, r24
    2678:	31 83       	std	Z+1, r19	; 0x01
    267a:	20 83       	st	Z, r18
    267c:	0c 94 80 12 	jmp	0x2500	; 0x2500 <_ZN14SoftwareSerial13stopListeningEv>

00002680 <_ZN14SoftwareSerial5setTXEh>:
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	ec 01       	movw	r28, r24
    2688:	16 2f       	mov	r17, r22
    268a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    268c:	66 95       	lsr	r22
    268e:	61 70       	andi	r22, 0x01	; 1
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	68 27       	eor	r22, r24
    2694:	81 2f       	mov	r24, r17
    2696:	0e 94 b1 14 	call	0x2962	; 0x2962 <digitalWrite>
    269a:	61 e0       	ldi	r22, 0x01	; 1
    269c:	81 2f       	mov	r24, r17
    269e:	0e 94 75 14 	call	0x28ea	; 0x28ea <pinMode>
    26a2:	81 2f       	mov	r24, r17
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	fc 01       	movw	r30, r24
    26a8:	ed 5d       	subi	r30, 0xDD	; 221
    26aa:	fc 4f       	sbci	r31, 0xFC	; 252
    26ac:	e4 91       	lpm	r30, Z
    26ae:	e8 8b       	std	Y+16, r30	; 0x10
    26b0:	fc 01       	movw	r30, r24
    26b2:	e9 5c       	subi	r30, 0xC9	; 201
    26b4:	fc 4f       	sbci	r31, 0xFC	; 252
    26b6:	e4 91       	lpm	r30, Z
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	eb 5a       	subi	r30, 0xAB	; 171
    26c0:	fc 4f       	sbci	r31, 0xFC	; 252
    26c2:	85 91       	lpm	r24, Z+
    26c4:	94 91       	lpm	r25, Z
    26c6:	9a 8b       	std	Y+18, r25	; 0x12
    26c8:	89 8b       	std	Y+17, r24	; 0x11
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	08 95       	ret

000026d2 <_ZN14SoftwareSerial5setRXEh>:
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	ec 01       	movw	r28, r24
    26da:	16 2f       	mov	r17, r22
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	81 2f       	mov	r24, r17
    26e0:	0e 94 75 14 	call	0x28ea	; 0x28ea <pinMode>
    26e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26e6:	81 fd       	sbrc	r24, 1
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <_ZN14SoftwareSerial5setRXEh+0x20>
    26ea:	61 e0       	ldi	r22, 0x01	; 1
    26ec:	81 2f       	mov	r24, r17
    26ee:	0e 94 b1 14 	call	0x2962	; 0x2962 <digitalWrite>
    26f2:	1c 87       	std	Y+12, r17	; 0x0c
    26f4:	81 2f       	mov	r24, r17
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	fc 01       	movw	r30, r24
    26fa:	ed 5d       	subi	r30, 0xDD	; 221
    26fc:	fc 4f       	sbci	r31, 0xFC	; 252
    26fe:	e4 91       	lpm	r30, Z
    2700:	ed 87       	std	Y+13, r30	; 0x0d
    2702:	fc 01       	movw	r30, r24
    2704:	e9 5c       	subi	r30, 0xC9	; 201
    2706:	fc 4f       	sbci	r31, 0xFC	; 252
    2708:	e4 91       	lpm	r30, Z
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	e5 5b       	subi	r30, 0xB5	; 181
    2712:	fc 4f       	sbci	r31, 0xFC	; 252
    2714:	85 91       	lpm	r24, Z+
    2716:	94 91       	lpm	r25, Z
    2718:	9f 87       	std	Y+15, r25	; 0x0f
    271a:	8e 87       	std	Y+14, r24	; 0x0e
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	08 95       	ret

00002724 <_ZN14SoftwareSerialC1Ehhb>:
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	ec 01       	movw	r28, r24
    272c:	16 2f       	mov	r17, r22
    272e:	1b 82       	std	Y+3, r1	; 0x03
    2730:	1a 82       	std	Y+2, r1	; 0x02
    2732:	88 ee       	ldi	r24, 0xE8	; 232
    2734:	93 e0       	ldi	r25, 0x03	; 3
    2736:	a0 e0       	ldi	r26, 0x00	; 0
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	8c 83       	std	Y+4, r24	; 0x04
    273c:	9d 83       	std	Y+5, r25	; 0x05
    273e:	ae 83       	std	Y+6, r26	; 0x06
    2740:	bf 83       	std	Y+7, r27	; 0x07
    2742:	8b e4       	ldi	r24, 0x4B	; 75
    2744:	93 e0       	ldi	r25, 0x03	; 3
    2746:	99 83       	std	Y+1, r25	; 0x01
    2748:	88 83       	st	Y, r24
    274a:	1f 8a       	std	Y+23, r1	; 0x17
    274c:	1e 8a       	std	Y+22, r1	; 0x16
    274e:	19 8e       	std	Y+25, r1	; 0x19
    2750:	18 8e       	std	Y+24, r1	; 0x18
    2752:	1b 8e       	std	Y+27, r1	; 0x1b
    2754:	1a 8e       	std	Y+26, r1	; 0x1a
    2756:	1d 8e       	std	Y+29, r1	; 0x1d
    2758:	1c 8e       	std	Y+28, r1	; 0x1c
    275a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    275c:	8e 7f       	andi	r24, 0xFE	; 254
    275e:	20 fb       	bst	r18, 0
    2760:	81 f9       	bld	r24, 1
    2762:	8e 8f       	std	Y+30, r24	; 0x1e
    2764:	64 2f       	mov	r22, r20
    2766:	ce 01       	movw	r24, r28
    2768:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN14SoftwareSerial5setTXEh>
    276c:	61 2f       	mov	r22, r17
    276e:	ce 01       	movw	r24, r28
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <_ZN14SoftwareSerial5setRXEh>

0000277a <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	ec 01       	movw	r28, r24
    2780:	9a 01       	movw	r18, r20
    2782:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2784:	1b 8e       	std	Y+27, r1	; 0x1b
    2786:	1a 8e       	std	Y+26, r1	; 0x1a
    2788:	19 8e       	std	Y+25, r1	; 0x19
    278a:	18 8e       	std	Y+24, r1	; 0x18
    278c:	1f 8a       	std	Y+23, r1	; 0x17
    278e:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2790:	60 e8       	ldi	r22, 0x80	; 128
    2792:	74 e8       	ldi	r23, 0x84	; 132
    2794:	8e e1       	ldi	r24, 0x1E	; 30
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__divmodsi4>
    279c:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    279e:	24 30       	cpi	r18, 0x04	; 4
    27a0:	31 05       	cpc	r19, r1
    27a2:	18 f0       	brcs	.+6      	; 0x27aa <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    27a4:	c9 01       	movw	r24, r18
    27a6:	03 97       	sbiw	r24, 0x03	; 3
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    27ae:	9d 8f       	std	Y+29, r25	; 0x1d
    27b0:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    27b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    27b4:	66 31       	cpi	r22, 0x16	; 22
    27b6:	08 f0       	brcs	.+2      	; 0x27ba <_ZN14SoftwareSerial5beginEl+0x40>
    27b8:	69 c0       	rjmp	.+210    	; 0x288c <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    27ba:	c9 01       	movw	r24, r18
    27bc:	96 95       	lsr	r25
    27be:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    27c0:	84 31       	cpi	r24, 0x14	; 20
    27c2:	91 05       	cpc	r25, r1
    27c4:	10 f0       	brcs	.+4      	; 0x27ca <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    27c6:	43 97       	sbiw	r24, 0x13	; 19
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    27ce:	9f 8b       	std	Y+23, r25	; 0x17
    27d0:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    27d2:	36 97       	sbiw	r30, 0x06	; 6
    27d4:	18 f0       	brcs	.+6      	; 0x27dc <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    27d6:	c9 01       	movw	r24, r18
    27d8:	05 97       	sbiw	r24, 0x05	; 5
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    27e0:	99 8f       	std	Y+25, r25	; 0x19
    27e2:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    27e4:	c9 01       	movw	r24, r18
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	28 0f       	add	r18, r24
    27ec:	39 1f       	adc	r19, r25
    27ee:	36 95       	lsr	r19
    27f0:	27 95       	ror	r18
    27f2:	36 95       	lsr	r19
    27f4:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    27f6:	2d 30       	cpi	r18, 0x0D	; 13
    27f8:	31 05       	cpc	r19, r1
    27fa:	18 f0       	brcs	.+6      	; 0x2802 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    27fc:	2c 50       	subi	r18, 0x0C	; 12
    27fe:	31 09       	sbc	r19, r1
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    2802:	21 e0       	ldi	r18, 0x01	; 1
    2804:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2806:	3b 8f       	std	Y+27, r19	; 0x1b
    2808:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    280a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    280e:	68 30       	cpi	r22, 0x08	; 8
    2810:	50 f0       	brcs	.+20     	; 0x2826 <_ZN14SoftwareSerial5beginEl+0xac>
    2812:	21 e0       	ldi	r18, 0x01	; 1
    2814:	6e 30       	cpi	r22, 0x0E	; 14
    2816:	08 f4       	brcc	.+2      	; 0x281a <_ZN14SoftwareSerial5beginEl+0xa0>
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	01 c0       	rjmp	.+2      	; 0x2820 <_ZN14SoftwareSerial5beginEl+0xa6>
    281e:	88 0f       	add	r24, r24
    2820:	2a 95       	dec	r18
    2822:	ea f7       	brpl	.-6      	; 0x281e <_ZN14SoftwareSerial5beginEl+0xa4>
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <_ZN14SoftwareSerial5beginEl+0xae>
    2826:	84 e0       	ldi	r24, 0x04	; 4
    2828:	89 2b       	or	r24, r25
    282a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    282e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2830:	98 30       	cpi	r25, 0x08	; 8
    2832:	38 f0       	brcs	.+14     	; 0x2842 <_ZN14SoftwareSerial5beginEl+0xc8>
    2834:	9e 30       	cpi	r25, 0x0E	; 14
    2836:	40 f0       	brcs	.+16     	; 0x2848 <_ZN14SoftwareSerial5beginEl+0xce>
    2838:	96 31       	cpi	r25, 0x16	; 22
    283a:	48 f0       	brcs	.+18     	; 0x284e <_ZN14SoftwareSerial5beginEl+0xd4>
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	08 c0       	rjmp	.+16     	; 0x2852 <_ZN14SoftwareSerial5beginEl+0xd8>
    2842:	2d e6       	ldi	r18, 0x6D	; 109
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	05 c0       	rjmp	.+10     	; 0x2852 <_ZN14SoftwareSerial5beginEl+0xd8>
    2848:	2b e6       	ldi	r18, 0x6B	; 107
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <_ZN14SoftwareSerial5beginEl+0xd8>
    284e:	2c e6       	ldi	r18, 0x6C	; 108
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	3c 8b       	std	Y+20, r19	; 0x14
    2854:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2856:	98 30       	cpi	r25, 0x08	; 8
    2858:	30 f4       	brcc	.+12     	; 0x2866 <_ZN14SoftwareSerial5beginEl+0xec>
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <_ZN14SoftwareSerial5beginEl+0xe6>
    285e:	88 0f       	add	r24, r24
    2860:	9a 95       	dec	r25
    2862:	ea f7       	brpl	.-6      	; 0x285e <_ZN14SoftwareSerial5beginEl+0xe4>
    2864:	0e c0       	rjmp	.+28     	; 0x2882 <_ZN14SoftwareSerial5beginEl+0x108>
    2866:	29 2f       	mov	r18, r25
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	9e 30       	cpi	r25, 0x0E	; 14
    286c:	18 f4       	brcc	.+6      	; 0x2874 <_ZN14SoftwareSerial5beginEl+0xfa>
    286e:	28 50       	subi	r18, 0x08	; 8
    2870:	31 09       	sbc	r19, r1
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <_ZN14SoftwareSerial5beginEl+0xfe>
    2874:	2e 50       	subi	r18, 0x0E	; 14
    2876:	31 09       	sbc	r19, r1
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	01 c0       	rjmp	.+2      	; 0x287e <_ZN14SoftwareSerial5beginEl+0x104>
    287c:	88 0f       	add	r24, r24
    287e:	2a 95       	dec	r18
    2880:	ea f7       	brpl	.-6      	; 0x287c <_ZN14SoftwareSerial5beginEl+0x102>
    2882:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2884:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2886:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    288c:	ce 01       	movw	r24, r28
}
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2892:	0c 94 96 12 	jmp	0x252c	; 0x252c <_ZN14SoftwareSerial6listenEv>

00002896 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2896:	08 95       	ret

00002898 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2898:	83 30       	cpi	r24, 0x03	; 3
    289a:	81 f0       	breq	.+32     	; 0x28bc <turnOffPWM+0x24>
    289c:	28 f4       	brcc	.+10     	; 0x28a8 <turnOffPWM+0x10>
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	99 f0       	breq	.+38     	; 0x28c8 <turnOffPWM+0x30>
    28a2:	82 30       	cpi	r24, 0x02	; 2
    28a4:	a1 f0       	breq	.+40     	; 0x28ce <turnOffPWM+0x36>
    28a6:	08 95       	ret
    28a8:	87 30       	cpi	r24, 0x07	; 7
    28aa:	a9 f0       	breq	.+42     	; 0x28d6 <turnOffPWM+0x3e>
    28ac:	88 30       	cpi	r24, 0x08	; 8
    28ae:	b9 f0       	breq	.+46     	; 0x28de <turnOffPWM+0x46>
    28b0:	84 30       	cpi	r24, 0x04	; 4
    28b2:	d1 f4       	brne	.+52     	; 0x28e8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    28b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    28b8:	8f 7d       	andi	r24, 0xDF	; 223
    28ba:	03 c0       	rjmp	.+6      	; 0x28c2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    28bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    28c0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    28c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    28c6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    28c8:	84 b5       	in	r24, 0x24	; 36
    28ca:	8f 77       	andi	r24, 0x7F	; 127
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    28ce:	84 b5       	in	r24, 0x24	; 36
    28d0:	8f 7d       	andi	r24, 0xDF	; 223
    28d2:	84 bd       	out	0x24, r24	; 36
    28d4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    28d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28da:	8f 77       	andi	r24, 0x7F	; 127
    28dc:	03 c0       	rjmp	.+6      	; 0x28e4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    28de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28e2:	8f 7d       	andi	r24, 0xDF	; 223
    28e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28e8:	08 95       	ret

000028ea <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	fc 01       	movw	r30, r24
    28f2:	ed 5d       	subi	r30, 0xDD	; 221
    28f4:	fc 4f       	sbci	r31, 0xFC	; 252
    28f6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    28f8:	fc 01       	movw	r30, r24
    28fa:	e9 5c       	subi	r30, 0xC9	; 201
    28fc:	fc 4f       	sbci	r31, 0xFC	; 252
    28fe:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2900:	88 23       	and	r24, r24
    2902:	61 f1       	breq	.+88     	; 0x295c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	fc 01       	movw	r30, r24
    290c:	e1 5a       	subi	r30, 0xA1	; 161
    290e:	fc 4f       	sbci	r31, 0xFC	; 252
    2910:	c5 91       	lpm	r28, Z+
    2912:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2914:	fc 01       	movw	r30, r24
    2916:	eb 5a       	subi	r30, 0xAB	; 171
    2918:	fc 4f       	sbci	r31, 0xFC	; 252
    291a:	a5 91       	lpm	r26, Z+
    291c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    291e:	61 11       	cpse	r22, r1
    2920:	09 c0       	rjmp	.+18     	; 0x2934 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2922:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2924:	f8 94       	cli
		*reg &= ~bit;
    2926:	88 81       	ld	r24, Y
    2928:	20 95       	com	r18
    292a:	82 23       	and	r24, r18
    292c:	88 83       	st	Y, r24
		*out &= ~bit;
    292e:	ec 91       	ld	r30, X
    2930:	2e 23       	and	r18, r30
    2932:	0b c0       	rjmp	.+22     	; 0x294a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2934:	62 30       	cpi	r22, 0x02	; 2
    2936:	61 f4       	brne	.+24     	; 0x2950 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2938:	9f b7       	in	r25, 0x3f	; 63
                cli();
    293a:	f8 94       	cli
		*reg &= ~bit;
    293c:	88 81       	ld	r24, Y
    293e:	32 2f       	mov	r19, r18
    2940:	30 95       	com	r19
    2942:	83 23       	and	r24, r19
    2944:	88 83       	st	Y, r24
		*out |= bit;
    2946:	ec 91       	ld	r30, X
    2948:	2e 2b       	or	r18, r30
    294a:	2c 93       	st	X, r18
		SREG = oldSREG;
    294c:	9f bf       	out	0x3f, r25	; 63
    294e:	06 c0       	rjmp	.+12     	; 0x295c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2950:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2952:	f8 94       	cli
		*reg |= bit;
    2954:	e8 81       	ld	r30, Y
    2956:	2e 2b       	or	r18, r30
    2958:	28 83       	st	Y, r18
		SREG = oldSREG;
    295a:	8f bf       	out	0x3f, r24	; 63
	}
}
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	08 95       	ret

00002962 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	f9 01       	movw	r30, r18
    296e:	e1 5f       	subi	r30, 0xF1	; 241
    2970:	fc 4f       	sbci	r31, 0xFC	; 252
    2972:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2974:	f9 01       	movw	r30, r18
    2976:	ed 5d       	subi	r30, 0xDD	; 221
    2978:	fc 4f       	sbci	r31, 0xFC	; 252
    297a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    297c:	f9 01       	movw	r30, r18
    297e:	e9 5c       	subi	r30, 0xC9	; 201
    2980:	fc 4f       	sbci	r31, 0xFC	; 252
    2982:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2984:	cc 23       	and	r28, r28
    2986:	c1 f0       	breq	.+48     	; 0x29b8 <digitalWrite+0x56>
    2988:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    298a:	81 11       	cpse	r24, r1
    298c:	0e 94 4c 14 	call	0x2898	; 0x2898 <turnOffPWM>

	out = portOutputRegister(port);
    2990:	ec 2f       	mov	r30, r28
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	ee 0f       	add	r30, r30
    2996:	ff 1f       	adc	r31, r31
    2998:	eb 5a       	subi	r30, 0xAB	; 171
    299a:	fc 4f       	sbci	r31, 0xFC	; 252
    299c:	a5 91       	lpm	r26, Z+
    299e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    29a0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    29a2:	f8 94       	cli

	if (val == LOW) {
    29a4:	11 11       	cpse	r17, r1
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <digitalWrite+0x4e>
		*out &= ~bit;
    29a8:	8c 91       	ld	r24, X
    29aa:	d0 95       	com	r29
    29ac:	d8 23       	and	r29, r24
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    29b0:	ec 91       	ld	r30, X
    29b2:	de 2b       	or	r29, r30
    29b4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    29b6:	9f bf       	out	0x3f, r25	; 63
}
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	08 95       	ret

000029c0 <__divmodhi4>:
    29c0:	97 fb       	bst	r25, 7
    29c2:	07 2e       	mov	r0, r23
    29c4:	16 f4       	brtc	.+4      	; 0x29ca <__divmodhi4+0xa>
    29c6:	00 94       	com	r0
    29c8:	07 d0       	rcall	.+14     	; 0x29d8 <__divmodhi4_neg1>
    29ca:	77 fd       	sbrc	r23, 7
    29cc:	09 d0       	rcall	.+18     	; 0x29e0 <__divmodhi4_neg2>
    29ce:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__udivmodhi4>
    29d2:	07 fc       	sbrc	r0, 7
    29d4:	05 d0       	rcall	.+10     	; 0x29e0 <__divmodhi4_neg2>
    29d6:	3e f4       	brtc	.+14     	; 0x29e6 <__divmodhi4_exit>

000029d8 <__divmodhi4_neg1>:
    29d8:	90 95       	com	r25
    29da:	81 95       	neg	r24
    29dc:	9f 4f       	sbci	r25, 0xFF	; 255
    29de:	08 95       	ret

000029e0 <__divmodhi4_neg2>:
    29e0:	70 95       	com	r23
    29e2:	61 95       	neg	r22
    29e4:	7f 4f       	sbci	r23, 0xFF	; 255

000029e6 <__divmodhi4_exit>:
    29e6:	08 95       	ret

000029e8 <__udivmodsi4>:
    29e8:	a1 e2       	ldi	r26, 0x21	; 33
    29ea:	1a 2e       	mov	r1, r26
    29ec:	aa 1b       	sub	r26, r26
    29ee:	bb 1b       	sub	r27, r27
    29f0:	fd 01       	movw	r30, r26
    29f2:	0d c0       	rjmp	.+26     	; 0x2a0e <__udivmodsi4_ep>

000029f4 <__udivmodsi4_loop>:
    29f4:	aa 1f       	adc	r26, r26
    29f6:	bb 1f       	adc	r27, r27
    29f8:	ee 1f       	adc	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	a2 17       	cp	r26, r18
    29fe:	b3 07       	cpc	r27, r19
    2a00:	e4 07       	cpc	r30, r20
    2a02:	f5 07       	cpc	r31, r21
    2a04:	20 f0       	brcs	.+8      	; 0x2a0e <__udivmodsi4_ep>
    2a06:	a2 1b       	sub	r26, r18
    2a08:	b3 0b       	sbc	r27, r19
    2a0a:	e4 0b       	sbc	r30, r20
    2a0c:	f5 0b       	sbc	r31, r21

00002a0e <__udivmodsi4_ep>:
    2a0e:	66 1f       	adc	r22, r22
    2a10:	77 1f       	adc	r23, r23
    2a12:	88 1f       	adc	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	1a 94       	dec	r1
    2a18:	69 f7       	brne	.-38     	; 0x29f4 <__udivmodsi4_loop>
    2a1a:	60 95       	com	r22
    2a1c:	70 95       	com	r23
    2a1e:	80 95       	com	r24
    2a20:	90 95       	com	r25
    2a22:	9b 01       	movw	r18, r22
    2a24:	ac 01       	movw	r20, r24
    2a26:	bd 01       	movw	r22, r26
    2a28:	cf 01       	movw	r24, r30
    2a2a:	08 95       	ret

00002a2c <__divmodsi4>:
    2a2c:	05 2e       	mov	r0, r21
    2a2e:	97 fb       	bst	r25, 7
    2a30:	1e f4       	brtc	.+6      	; 0x2a38 <__divmodsi4+0xc>
    2a32:	00 94       	com	r0
    2a34:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__negsi2>
    2a38:	57 fd       	sbrc	r21, 7
    2a3a:	07 d0       	rcall	.+14     	; 0x2a4a <__divmodsi4_neg2>
    2a3c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__udivmodsi4>
    2a40:	07 fc       	sbrc	r0, 7
    2a42:	03 d0       	rcall	.+6      	; 0x2a4a <__divmodsi4_neg2>
    2a44:	4e f4       	brtc	.+18     	; 0x2a58 <__divmodsi4_exit>
    2a46:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__negsi2>

00002a4a <__divmodsi4_neg2>:
    2a4a:	50 95       	com	r21
    2a4c:	40 95       	com	r20
    2a4e:	30 95       	com	r19
    2a50:	21 95       	neg	r18
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
    2a54:	4f 4f       	sbci	r20, 0xFF	; 255
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255

00002a58 <__divmodsi4_exit>:
    2a58:	08 95       	ret

00002a5a <__negsi2>:
    2a5a:	90 95       	com	r25
    2a5c:	80 95       	com	r24
    2a5e:	70 95       	com	r23
    2a60:	61 95       	neg	r22
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	8f 4f       	sbci	r24, 0xFF	; 255
    2a66:	9f 4f       	sbci	r25, 0xFF	; 255
    2a68:	08 95       	ret

00002a6a <__tablejump2__>:
    2a6a:	ee 0f       	add	r30, r30
    2a6c:	ff 1f       	adc	r31, r31
    2a6e:	05 90       	lpm	r0, Z+
    2a70:	f4 91       	lpm	r31, Z
    2a72:	e0 2d       	mov	r30, r0
    2a74:	09 94       	ijmp

00002a76 <__muluhisi3>:
    2a76:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__umulhisi3>
    2a7a:	a5 9f       	mul	r26, r21
    2a7c:	90 0d       	add	r25, r0
    2a7e:	b4 9f       	mul	r27, r20
    2a80:	90 0d       	add	r25, r0
    2a82:	a4 9f       	mul	r26, r20
    2a84:	80 0d       	add	r24, r0
    2a86:	91 1d       	adc	r25, r1
    2a88:	11 24       	eor	r1, r1
    2a8a:	08 95       	ret

00002a8c <__udivmodhi4>:
    2a8c:	aa 1b       	sub	r26, r26
    2a8e:	bb 1b       	sub	r27, r27
    2a90:	51 e1       	ldi	r21, 0x11	; 17
    2a92:	07 c0       	rjmp	.+14     	; 0x2aa2 <__udivmodhi4_ep>

00002a94 <__udivmodhi4_loop>:
    2a94:	aa 1f       	adc	r26, r26
    2a96:	bb 1f       	adc	r27, r27
    2a98:	a6 17       	cp	r26, r22
    2a9a:	b7 07       	cpc	r27, r23
    2a9c:	10 f0       	brcs	.+4      	; 0x2aa2 <__udivmodhi4_ep>
    2a9e:	a6 1b       	sub	r26, r22
    2aa0:	b7 0b       	sbc	r27, r23

00002aa2 <__udivmodhi4_ep>:
    2aa2:	88 1f       	adc	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	5a 95       	dec	r21
    2aa8:	a9 f7       	brne	.-22     	; 0x2a94 <__udivmodhi4_loop>
    2aaa:	80 95       	com	r24
    2aac:	90 95       	com	r25
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	08 95       	ret

00002ab4 <__umulhisi3>:
    2ab4:	a2 9f       	mul	r26, r18
    2ab6:	b0 01       	movw	r22, r0
    2ab8:	b3 9f       	mul	r27, r19
    2aba:	c0 01       	movw	r24, r0
    2abc:	a3 9f       	mul	r26, r19
    2abe:	70 0d       	add	r23, r0
    2ac0:	81 1d       	adc	r24, r1
    2ac2:	11 24       	eor	r1, r1
    2ac4:	91 1d       	adc	r25, r1
    2ac6:	b2 9f       	mul	r27, r18
    2ac8:	70 0d       	add	r23, r0
    2aca:	81 1d       	adc	r24, r1
    2acc:	11 24       	eor	r1, r1
    2ace:	91 1d       	adc	r25, r1
    2ad0:	08 95       	ret

00002ad2 <malloc>:
    2ad2:	0f 93       	push	r16
    2ad4:	1f 93       	push	r17
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	91 05       	cpc	r25, r1
    2ade:	10 f4       	brcc	.+4      	; 0x2ae4 <malloc+0x12>
    2ae0:	82 e0       	ldi	r24, 0x02	; 2
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	e0 91 fe 06 	lds	r30, 0x06FE	; 0x8006fe <__flp>
    2ae8:	f0 91 ff 06 	lds	r31, 0x06FF	; 0x8006ff <__flp+0x1>
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	a0 e0       	ldi	r26, 0x00	; 0
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	30 97       	sbiw	r30, 0x00	; 0
    2af6:	19 f1       	breq	.+70     	; 0x2b3e <malloc+0x6c>
    2af8:	40 81       	ld	r20, Z
    2afa:	51 81       	ldd	r21, Z+1	; 0x01
    2afc:	02 81       	ldd	r16, Z+2	; 0x02
    2afe:	13 81       	ldd	r17, Z+3	; 0x03
    2b00:	48 17       	cp	r20, r24
    2b02:	59 07       	cpc	r21, r25
    2b04:	c8 f0       	brcs	.+50     	; 0x2b38 <malloc+0x66>
    2b06:	84 17       	cp	r24, r20
    2b08:	95 07       	cpc	r25, r21
    2b0a:	69 f4       	brne	.+26     	; 0x2b26 <malloc+0x54>
    2b0c:	10 97       	sbiw	r26, 0x00	; 0
    2b0e:	31 f0       	breq	.+12     	; 0x2b1c <malloc+0x4a>
    2b10:	12 96       	adiw	r26, 0x02	; 2
    2b12:	0c 93       	st	X, r16
    2b14:	12 97       	sbiw	r26, 0x02	; 2
    2b16:	13 96       	adiw	r26, 0x03	; 3
    2b18:	1c 93       	st	X, r17
    2b1a:	27 c0       	rjmp	.+78     	; 0x2b6a <malloc+0x98>
    2b1c:	00 93 fe 06 	sts	0x06FE, r16	; 0x8006fe <__flp>
    2b20:	10 93 ff 06 	sts	0x06FF, r17	; 0x8006ff <__flp+0x1>
    2b24:	22 c0       	rjmp	.+68     	; 0x2b6a <malloc+0x98>
    2b26:	21 15       	cp	r18, r1
    2b28:	31 05       	cpc	r19, r1
    2b2a:	19 f0       	breq	.+6      	; 0x2b32 <malloc+0x60>
    2b2c:	42 17       	cp	r20, r18
    2b2e:	53 07       	cpc	r21, r19
    2b30:	18 f4       	brcc	.+6      	; 0x2b38 <malloc+0x66>
    2b32:	9a 01       	movw	r18, r20
    2b34:	bd 01       	movw	r22, r26
    2b36:	ef 01       	movw	r28, r30
    2b38:	df 01       	movw	r26, r30
    2b3a:	f8 01       	movw	r30, r16
    2b3c:	db cf       	rjmp	.-74     	; 0x2af4 <malloc+0x22>
    2b3e:	21 15       	cp	r18, r1
    2b40:	31 05       	cpc	r19, r1
    2b42:	f9 f0       	breq	.+62     	; 0x2b82 <malloc+0xb0>
    2b44:	28 1b       	sub	r18, r24
    2b46:	39 0b       	sbc	r19, r25
    2b48:	24 30       	cpi	r18, 0x04	; 4
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	80 f4       	brcc	.+32     	; 0x2b6e <malloc+0x9c>
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	9b 81       	ldd	r25, Y+3	; 0x03
    2b52:	61 15       	cp	r22, r1
    2b54:	71 05       	cpc	r23, r1
    2b56:	21 f0       	breq	.+8      	; 0x2b60 <malloc+0x8e>
    2b58:	fb 01       	movw	r30, r22
    2b5a:	93 83       	std	Z+3, r25	; 0x03
    2b5c:	82 83       	std	Z+2, r24	; 0x02
    2b5e:	04 c0       	rjmp	.+8      	; 0x2b68 <malloc+0x96>
    2b60:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <__flp+0x1>
    2b64:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <__flp>
    2b68:	fe 01       	movw	r30, r28
    2b6a:	32 96       	adiw	r30, 0x02	; 2
    2b6c:	44 c0       	rjmp	.+136    	; 0x2bf6 <malloc+0x124>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e2 0f       	add	r30, r18
    2b72:	f3 1f       	adc	r31, r19
    2b74:	81 93       	st	Z+, r24
    2b76:	91 93       	st	Z+, r25
    2b78:	22 50       	subi	r18, 0x02	; 2
    2b7a:	31 09       	sbc	r19, r1
    2b7c:	39 83       	std	Y+1, r19	; 0x01
    2b7e:	28 83       	st	Y, r18
    2b80:	3a c0       	rjmp	.+116    	; 0x2bf6 <malloc+0x124>
    2b82:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <__brkval>
    2b86:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <__brkval+0x1>
    2b8a:	23 2b       	or	r18, r19
    2b8c:	41 f4       	brne	.+16     	; 0x2b9e <malloc+0xcc>
    2b8e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2b92:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2b96:	30 93 fd 06 	sts	0x06FD, r19	; 0x8006fd <__brkval+0x1>
    2b9a:	20 93 fc 06 	sts	0x06FC, r18	; 0x8006fc <__brkval>
    2b9e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2ba2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2ba6:	21 15       	cp	r18, r1
    2ba8:	31 05       	cpc	r19, r1
    2baa:	41 f4       	brne	.+16     	; 0x2bbc <malloc+0xea>
    2bac:	2d b7       	in	r18, 0x3d	; 61
    2bae:	3e b7       	in	r19, 0x3e	; 62
    2bb0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2bb4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2bb8:	24 1b       	sub	r18, r20
    2bba:	35 0b       	sbc	r19, r21
    2bbc:	e0 91 fc 06 	lds	r30, 0x06FC	; 0x8006fc <__brkval>
    2bc0:	f0 91 fd 06 	lds	r31, 0x06FD	; 0x8006fd <__brkval+0x1>
    2bc4:	e2 17       	cp	r30, r18
    2bc6:	f3 07       	cpc	r31, r19
    2bc8:	a0 f4       	brcc	.+40     	; 0x2bf2 <malloc+0x120>
    2bca:	2e 1b       	sub	r18, r30
    2bcc:	3f 0b       	sbc	r19, r31
    2bce:	28 17       	cp	r18, r24
    2bd0:	39 07       	cpc	r19, r25
    2bd2:	78 f0       	brcs	.+30     	; 0x2bf2 <malloc+0x120>
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	4e 5f       	subi	r20, 0xFE	; 254
    2bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bda:	24 17       	cp	r18, r20
    2bdc:	35 07       	cpc	r19, r21
    2bde:	48 f0       	brcs	.+18     	; 0x2bf2 <malloc+0x120>
    2be0:	4e 0f       	add	r20, r30
    2be2:	5f 1f       	adc	r21, r31
    2be4:	50 93 fd 06 	sts	0x06FD, r21	; 0x8006fd <__brkval+0x1>
    2be8:	40 93 fc 06 	sts	0x06FC, r20	; 0x8006fc <__brkval>
    2bec:	81 93       	st	Z+, r24
    2bee:	91 93       	st	Z+, r25
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <malloc+0x124>
    2bf2:	e0 e0       	ldi	r30, 0x00	; 0
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	cf 01       	movw	r24, r30
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	08 95       	ret

00002c02 <free>:
    2c02:	cf 93       	push	r28
    2c04:	df 93       	push	r29
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <free+0xa>
    2c0a:	81 c0       	rjmp	.+258    	; 0x2d0e <free+0x10c>
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	32 97       	sbiw	r30, 0x02	; 2
    2c10:	13 82       	std	Z+3, r1	; 0x03
    2c12:	12 82       	std	Z+2, r1	; 0x02
    2c14:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <__flp>
    2c18:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <__flp+0x1>
    2c1c:	10 97       	sbiw	r26, 0x00	; 0
    2c1e:	81 f4       	brne	.+32     	; 0x2c40 <free+0x3e>
    2c20:	20 81       	ld	r18, Z
    2c22:	31 81       	ldd	r19, Z+1	; 0x01
    2c24:	82 0f       	add	r24, r18
    2c26:	93 1f       	adc	r25, r19
    2c28:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <__brkval>
    2c2c:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <__brkval+0x1>
    2c30:	28 17       	cp	r18, r24
    2c32:	39 07       	cpc	r19, r25
    2c34:	51 f5       	brne	.+84     	; 0x2c8a <free+0x88>
    2c36:	f0 93 fd 06 	sts	0x06FD, r31	; 0x8006fd <__brkval+0x1>
    2c3a:	e0 93 fc 06 	sts	0x06FC, r30	; 0x8006fc <__brkval>
    2c3e:	67 c0       	rjmp	.+206    	; 0x2d0e <free+0x10c>
    2c40:	ed 01       	movw	r28, r26
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	ce 17       	cp	r28, r30
    2c48:	df 07       	cpc	r29, r31
    2c4a:	40 f4       	brcc	.+16     	; 0x2c5c <free+0x5a>
    2c4c:	4a 81       	ldd	r20, Y+2	; 0x02
    2c4e:	5b 81       	ldd	r21, Y+3	; 0x03
    2c50:	9e 01       	movw	r18, r28
    2c52:	41 15       	cp	r20, r1
    2c54:	51 05       	cpc	r21, r1
    2c56:	f1 f0       	breq	.+60     	; 0x2c94 <free+0x92>
    2c58:	ea 01       	movw	r28, r20
    2c5a:	f5 cf       	rjmp	.-22     	; 0x2c46 <free+0x44>
    2c5c:	d3 83       	std	Z+3, r29	; 0x03
    2c5e:	c2 83       	std	Z+2, r28	; 0x02
    2c60:	40 81       	ld	r20, Z
    2c62:	51 81       	ldd	r21, Z+1	; 0x01
    2c64:	84 0f       	add	r24, r20
    2c66:	95 1f       	adc	r25, r21
    2c68:	c8 17       	cp	r28, r24
    2c6a:	d9 07       	cpc	r29, r25
    2c6c:	59 f4       	brne	.+22     	; 0x2c84 <free+0x82>
    2c6e:	88 81       	ld	r24, Y
    2c70:	99 81       	ldd	r25, Y+1	; 0x01
    2c72:	84 0f       	add	r24, r20
    2c74:	95 1f       	adc	r25, r21
    2c76:	02 96       	adiw	r24, 0x02	; 2
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c80:	93 83       	std	Z+3, r25	; 0x03
    2c82:	82 83       	std	Z+2, r24	; 0x02
    2c84:	21 15       	cp	r18, r1
    2c86:	31 05       	cpc	r19, r1
    2c88:	29 f4       	brne	.+10     	; 0x2c94 <free+0x92>
    2c8a:	f0 93 ff 06 	sts	0x06FF, r31	; 0x8006ff <__flp+0x1>
    2c8e:	e0 93 fe 06 	sts	0x06FE, r30	; 0x8006fe <__flp>
    2c92:	3d c0       	rjmp	.+122    	; 0x2d0e <free+0x10c>
    2c94:	e9 01       	movw	r28, r18
    2c96:	fb 83       	std	Y+3, r31	; 0x03
    2c98:	ea 83       	std	Y+2, r30	; 0x02
    2c9a:	49 91       	ld	r20, Y+
    2c9c:	59 91       	ld	r21, Y+
    2c9e:	c4 0f       	add	r28, r20
    2ca0:	d5 1f       	adc	r29, r21
    2ca2:	ec 17       	cp	r30, r28
    2ca4:	fd 07       	cpc	r31, r29
    2ca6:	61 f4       	brne	.+24     	; 0x2cc0 <free+0xbe>
    2ca8:	80 81       	ld	r24, Z
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	84 0f       	add	r24, r20
    2cae:	95 1f       	adc	r25, r21
    2cb0:	02 96       	adiw	r24, 0x02	; 2
    2cb2:	e9 01       	movw	r28, r18
    2cb4:	99 83       	std	Y+1, r25	; 0x01
    2cb6:	88 83       	st	Y, r24
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	93 81       	ldd	r25, Z+3	; 0x03
    2cbc:	9b 83       	std	Y+3, r25	; 0x03
    2cbe:	8a 83       	std	Y+2, r24	; 0x02
    2cc0:	e0 e0       	ldi	r30, 0x00	; 0
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	12 96       	adiw	r26, 0x02	; 2
    2cc6:	8d 91       	ld	r24, X+
    2cc8:	9c 91       	ld	r25, X
    2cca:	13 97       	sbiw	r26, 0x03	; 3
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	19 f0       	breq	.+6      	; 0x2cd6 <free+0xd4>
    2cd0:	fd 01       	movw	r30, r26
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	f7 cf       	rjmp	.-18     	; 0x2cc4 <free+0xc2>
    2cd6:	8d 91       	ld	r24, X+
    2cd8:	9c 91       	ld	r25, X
    2cda:	11 97       	sbiw	r26, 0x01	; 1
    2cdc:	9d 01       	movw	r18, r26
    2cde:	2e 5f       	subi	r18, 0xFE	; 254
    2ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce2:	82 0f       	add	r24, r18
    2ce4:	93 1f       	adc	r25, r19
    2ce6:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <__brkval>
    2cea:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <__brkval+0x1>
    2cee:	28 17       	cp	r18, r24
    2cf0:	39 07       	cpc	r19, r25
    2cf2:	69 f4       	brne	.+26     	; 0x2d0e <free+0x10c>
    2cf4:	30 97       	sbiw	r30, 0x00	; 0
    2cf6:	29 f4       	brne	.+10     	; 0x2d02 <free+0x100>
    2cf8:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <__flp+0x1>
    2cfc:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <__flp>
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <free+0x104>
    2d02:	13 82       	std	Z+3, r1	; 0x03
    2d04:	12 82       	std	Z+2, r1	; 0x02
    2d06:	b0 93 fd 06 	sts	0x06FD, r27	; 0x8006fd <__brkval+0x1>
    2d0a:	a0 93 fc 06 	sts	0x06FC, r26	; 0x8006fc <__brkval>
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	08 95       	ret

00002d14 <realloc>:
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	e0 e9       	ldi	r30, 0x90	; 144
    2d1a:	f6 e1       	ldi	r31, 0x16	; 22
    2d1c:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__prologue_saves__+0x8>
    2d20:	ec 01       	movw	r28, r24
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	21 f4       	brne	.+8      	; 0x2d2e <realloc+0x1a>
    2d26:	cb 01       	movw	r24, r22
    2d28:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <malloc>
    2d2c:	b4 c0       	rjmp	.+360    	; 0x2e96 <realloc+0x182>
    2d2e:	fc 01       	movw	r30, r24
    2d30:	e6 0f       	add	r30, r22
    2d32:	f7 1f       	adc	r31, r23
    2d34:	9c 01       	movw	r18, r24
    2d36:	22 50       	subi	r18, 0x02	; 2
    2d38:	31 09       	sbc	r19, r1
    2d3a:	e2 17       	cp	r30, r18
    2d3c:	f3 07       	cpc	r31, r19
    2d3e:	08 f4       	brcc	.+2      	; 0x2d42 <realloc+0x2e>
    2d40:	a8 c0       	rjmp	.+336    	; 0x2e92 <realloc+0x17e>
    2d42:	d9 01       	movw	r26, r18
    2d44:	0d 91       	ld	r16, X+
    2d46:	1c 91       	ld	r17, X
    2d48:	11 97       	sbiw	r26, 0x01	; 1
    2d4a:	06 17       	cp	r16, r22
    2d4c:	17 07       	cpc	r17, r23
    2d4e:	b0 f0       	brcs	.+44     	; 0x2d7c <realloc+0x68>
    2d50:	05 30       	cpi	r16, 0x05	; 5
    2d52:	11 05       	cpc	r17, r1
    2d54:	08 f4       	brcc	.+2      	; 0x2d58 <realloc+0x44>
    2d56:	9b c0       	rjmp	.+310    	; 0x2e8e <realloc+0x17a>
    2d58:	c8 01       	movw	r24, r16
    2d5a:	04 97       	sbiw	r24, 0x04	; 4
    2d5c:	86 17       	cp	r24, r22
    2d5e:	97 07       	cpc	r25, r23
    2d60:	08 f4       	brcc	.+2      	; 0x2d64 <realloc+0x50>
    2d62:	95 c0       	rjmp	.+298    	; 0x2e8e <realloc+0x17a>
    2d64:	02 50       	subi	r16, 0x02	; 2
    2d66:	11 09       	sbc	r17, r1
    2d68:	06 1b       	sub	r16, r22
    2d6a:	17 0b       	sbc	r17, r23
    2d6c:	01 93       	st	Z+, r16
    2d6e:	11 93       	st	Z+, r17
    2d70:	6d 93       	st	X+, r22
    2d72:	7c 93       	st	X, r23
    2d74:	cf 01       	movw	r24, r30
    2d76:	0e 94 01 16 	call	0x2c02	; 0x2c02 <free>
    2d7a:	89 c0       	rjmp	.+274    	; 0x2e8e <realloc+0x17a>
    2d7c:	5b 01       	movw	r10, r22
    2d7e:	a0 1a       	sub	r10, r16
    2d80:	b1 0a       	sbc	r11, r17
    2d82:	4c 01       	movw	r8, r24
    2d84:	80 0e       	add	r8, r16
    2d86:	91 1e       	adc	r9, r17
    2d88:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <__flp>
    2d8c:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <__flp+0x1>
    2d90:	61 2c       	mov	r6, r1
    2d92:	71 2c       	mov	r7, r1
    2d94:	e1 2c       	mov	r14, r1
    2d96:	f1 2c       	mov	r15, r1
    2d98:	10 97       	sbiw	r26, 0x00	; 0
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <realloc+0x8a>
    2d9c:	46 c0       	rjmp	.+140    	; 0x2e2a <realloc+0x116>
    2d9e:	8d 91       	ld	r24, X+
    2da0:	9c 91       	ld	r25, X
    2da2:	11 97       	sbiw	r26, 0x01	; 1
    2da4:	a8 15       	cp	r26, r8
    2da6:	b9 05       	cpc	r27, r9
    2da8:	b1 f5       	brne	.+108    	; 0x2e16 <realloc+0x102>
    2daa:	6c 01       	movw	r12, r24
    2dac:	42 e0       	ldi	r20, 0x02	; 2
    2dae:	c4 0e       	add	r12, r20
    2db0:	d1 1c       	adc	r13, r1
    2db2:	ca 14       	cp	r12, r10
    2db4:	db 04       	cpc	r13, r11
    2db6:	78 f1       	brcs	.+94     	; 0x2e16 <realloc+0x102>
    2db8:	4c 01       	movw	r8, r24
    2dba:	8a 18       	sub	r8, r10
    2dbc:	9b 08       	sbc	r9, r11
    2dbe:	64 01       	movw	r12, r8
    2dc0:	42 e0       	ldi	r20, 0x02	; 2
    2dc2:	c4 0e       	add	r12, r20
    2dc4:	d1 1c       	adc	r13, r1
    2dc6:	12 96       	adiw	r26, 0x02	; 2
    2dc8:	bc 90       	ld	r11, X
    2dca:	12 97       	sbiw	r26, 0x02	; 2
    2dcc:	13 96       	adiw	r26, 0x03	; 3
    2dce:	ac 91       	ld	r26, X
    2dd0:	b5 e0       	ldi	r27, 0x05	; 5
    2dd2:	cb 16       	cp	r12, r27
    2dd4:	d1 04       	cpc	r13, r1
    2dd6:	40 f0       	brcs	.+16     	; 0x2de8 <realloc+0xd4>
    2dd8:	b2 82       	std	Z+2, r11	; 0x02
    2dda:	a3 83       	std	Z+3, r26	; 0x03
    2ddc:	91 82       	std	Z+1, r9	; 0x01
    2dde:	80 82       	st	Z, r8
    2de0:	d9 01       	movw	r26, r18
    2de2:	6d 93       	st	X+, r22
    2de4:	7c 93       	st	X, r23
    2de6:	09 c0       	rjmp	.+18     	; 0x2dfa <realloc+0xe6>
    2de8:	0e 5f       	subi	r16, 0xFE	; 254
    2dea:	1f 4f       	sbci	r17, 0xFF	; 255
    2dec:	80 0f       	add	r24, r16
    2dee:	91 1f       	adc	r25, r17
    2df0:	f9 01       	movw	r30, r18
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
    2df6:	eb 2d       	mov	r30, r11
    2df8:	fa 2f       	mov	r31, r26
    2dfa:	e1 14       	cp	r14, r1
    2dfc:	f1 04       	cpc	r15, r1
    2dfe:	31 f0       	breq	.+12     	; 0x2e0c <realloc+0xf8>
    2e00:	d7 01       	movw	r26, r14
    2e02:	13 96       	adiw	r26, 0x03	; 3
    2e04:	fc 93       	st	X, r31
    2e06:	ee 93       	st	-X, r30
    2e08:	12 97       	sbiw	r26, 0x02	; 2
    2e0a:	41 c0       	rjmp	.+130    	; 0x2e8e <realloc+0x17a>
    2e0c:	f0 93 ff 06 	sts	0x06FF, r31	; 0x8006ff <__flp+0x1>
    2e10:	e0 93 fe 06 	sts	0x06FE, r30	; 0x8006fe <__flp>
    2e14:	3c c0       	rjmp	.+120    	; 0x2e8e <realloc+0x17a>
    2e16:	68 16       	cp	r6, r24
    2e18:	79 06       	cpc	r7, r25
    2e1a:	08 f4       	brcc	.+2      	; 0x2e1e <realloc+0x10a>
    2e1c:	3c 01       	movw	r6, r24
    2e1e:	7d 01       	movw	r14, r26
    2e20:	12 96       	adiw	r26, 0x02	; 2
    2e22:	0d 90       	ld	r0, X+
    2e24:	bc 91       	ld	r27, X
    2e26:	a0 2d       	mov	r26, r0
    2e28:	b7 cf       	rjmp	.-146    	; 0x2d98 <realloc+0x84>
    2e2a:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <__brkval>
    2e2e:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <__brkval+0x1>
    2e32:	88 16       	cp	r8, r24
    2e34:	99 06       	cpc	r9, r25
    2e36:	e1 f4       	brne	.+56     	; 0x2e70 <realloc+0x15c>
    2e38:	66 16       	cp	r6, r22
    2e3a:	77 06       	cpc	r7, r23
    2e3c:	c8 f4       	brcc	.+50     	; 0x2e70 <realloc+0x15c>
    2e3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2e42:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	41 f4       	brne	.+16     	; 0x2e5a <realloc+0x146>
    2e4a:	8d b7       	in	r24, 0x3d	; 61
    2e4c:	9e b7       	in	r25, 0x3e	; 62
    2e4e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2e52:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2e56:	84 1b       	sub	r24, r20
    2e58:	95 0b       	sbc	r25, r21
    2e5a:	e8 17       	cp	r30, r24
    2e5c:	f9 07       	cpc	r31, r25
    2e5e:	c8 f4       	brcc	.+50     	; 0x2e92 <realloc+0x17e>
    2e60:	f0 93 fd 06 	sts	0x06FD, r31	; 0x8006fd <__brkval+0x1>
    2e64:	e0 93 fc 06 	sts	0x06FC, r30	; 0x8006fc <__brkval>
    2e68:	f9 01       	movw	r30, r18
    2e6a:	71 83       	std	Z+1, r23	; 0x01
    2e6c:	60 83       	st	Z, r22
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <realloc+0x17a>
    2e70:	cb 01       	movw	r24, r22
    2e72:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <malloc>
    2e76:	7c 01       	movw	r14, r24
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	59 f0       	breq	.+22     	; 0x2e92 <realloc+0x17e>
    2e7c:	a8 01       	movw	r20, r16
    2e7e:	be 01       	movw	r22, r28
    2e80:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <memcpy>
    2e84:	ce 01       	movw	r24, r28
    2e86:	0e 94 01 16 	call	0x2c02	; 0x2c02 <free>
    2e8a:	c7 01       	movw	r24, r14
    2e8c:	04 c0       	rjmp	.+8      	; 0x2e96 <realloc+0x182>
    2e8e:	ce 01       	movw	r24, r28
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <realloc+0x182>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	ee e0       	ldi	r30, 0x0E	; 14
    2e9c:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__epilogue_restores__+0x8>

00002ea0 <memcpy>:
    2ea0:	fb 01       	movw	r30, r22
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <memcpy+0xa>
    2ea6:	01 90       	ld	r0, Z+
    2ea8:	0d 92       	st	X+, r0
    2eaa:	41 50       	subi	r20, 0x01	; 1
    2eac:	50 40       	sbci	r21, 0x00	; 0
    2eae:	d8 f7       	brcc	.-10     	; 0x2ea6 <memcpy+0x6>
    2eb0:	08 95       	ret

00002eb2 <strchr>:
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	81 91       	ld	r24, Z+
    2eb6:	86 17       	cp	r24, r22
    2eb8:	21 f0       	breq	.+8      	; 0x2ec2 <strchr+0x10>
    2eba:	88 23       	and	r24, r24
    2ebc:	d9 f7       	brne	.-10     	; 0x2eb4 <strchr+0x2>
    2ebe:	99 27       	eor	r25, r25
    2ec0:	08 95       	ret
    2ec2:	31 97       	sbiw	r30, 0x01	; 1
    2ec4:	cf 01       	movw	r24, r30
    2ec6:	08 95       	ret

00002ec8 <strcpy>:
    2ec8:	fb 01       	movw	r30, r22
    2eca:	dc 01       	movw	r26, r24
    2ecc:	01 90       	ld	r0, Z+
    2ece:	0d 92       	st	X+, r0
    2ed0:	00 20       	and	r0, r0
    2ed2:	e1 f7       	brne	.-8      	; 0x2ecc <strcpy+0x4>
    2ed4:	08 95       	ret

00002ed6 <strstr>:
    2ed6:	fb 01       	movw	r30, r22
    2ed8:	51 91       	ld	r21, Z+
    2eda:	55 23       	and	r21, r21
    2edc:	a9 f0       	breq	.+42     	; 0x2f08 <strstr+0x32>
    2ede:	bf 01       	movw	r22, r30
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	4d 91       	ld	r20, X+
    2ee4:	45 17       	cp	r20, r21
    2ee6:	41 11       	cpse	r20, r1
    2ee8:	e1 f7       	brne	.-8      	; 0x2ee2 <strstr+0xc>
    2eea:	59 f4       	brne	.+22     	; 0x2f02 <strstr+0x2c>
    2eec:	cd 01       	movw	r24, r26
    2eee:	01 90       	ld	r0, Z+
    2ef0:	00 20       	and	r0, r0
    2ef2:	49 f0       	breq	.+18     	; 0x2f06 <strstr+0x30>
    2ef4:	4d 91       	ld	r20, X+
    2ef6:	40 15       	cp	r20, r0
    2ef8:	41 11       	cpse	r20, r1
    2efa:	c9 f3       	breq	.-14     	; 0x2eee <strstr+0x18>
    2efc:	fb 01       	movw	r30, r22
    2efe:	41 11       	cpse	r20, r1
    2f00:	ef cf       	rjmp	.-34     	; 0x2ee0 <strstr+0xa>
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	08 95       	ret

00002f0a <__prologue_saves__>:
    2f0a:	2f 92       	push	r2
    2f0c:	3f 92       	push	r3
    2f0e:	4f 92       	push	r4
    2f10:	5f 92       	push	r5
    2f12:	6f 92       	push	r6
    2f14:	7f 92       	push	r7
    2f16:	8f 92       	push	r8
    2f18:	9f 92       	push	r9
    2f1a:	af 92       	push	r10
    2f1c:	bf 92       	push	r11
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	ca 1b       	sub	r28, r26
    2f34:	db 0b       	sbc	r29, r27
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	09 94       	ijmp

00002f42 <__epilogue_restores__>:
    2f42:	2a 88       	ldd	r2, Y+18	; 0x12
    2f44:	39 88       	ldd	r3, Y+17	; 0x11
    2f46:	48 88       	ldd	r4, Y+16	; 0x10
    2f48:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f50:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f52:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f54:	b9 84       	ldd	r11, Y+9	; 0x09
    2f56:	c8 84       	ldd	r12, Y+8	; 0x08
    2f58:	df 80       	ldd	r13, Y+7	; 0x07
    2f5a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f5c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f5e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f60:	1b 81       	ldd	r17, Y+3	; 0x03
    2f62:	aa 81       	ldd	r26, Y+2	; 0x02
    2f64:	b9 81       	ldd	r27, Y+1	; 0x01
    2f66:	ce 0f       	add	r28, r30
    2f68:	d1 1d       	adc	r29, r1
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	ed 01       	movw	r28, r26
    2f76:	08 95       	ret

00002f78 <__do_global_dtors>:
    2f78:	11 e0       	ldi	r17, 0x01	; 1
    2f7a:	c7 eb       	ldi	r28, 0xB7	; 183
    2f7c:	d1 e0       	ldi	r29, 0x01	; 1
    2f7e:	04 c0       	rjmp	.+8      	; 0x2f88 <__do_global_dtors+0x10>
    2f80:	fe 01       	movw	r30, r28
    2f82:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__tablejump2__>
    2f86:	21 96       	adiw	r28, 0x01	; 1
    2f88:	c8 3b       	cpi	r28, 0xB8	; 184
    2f8a:	d1 07       	cpc	r29, r17
    2f8c:	c9 f7       	brne	.-14     	; 0x2f80 <__do_global_dtors+0x8>
    2f8e:	f8 94       	cli

00002f90 <__stop_program>:
    2f90:	ff cf       	rjmp	.-2      	; 0x2f90 <__stop_program>
